%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: C6-act2.dvi
%%CreationDate: Wed Sep 15 16:17:33 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: FontAwesome5Free-Solid Dingbats CMMI10 CMR8 CMSY10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o C6-act2.ps C6-act2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.09.15:2017
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: fa5free0.enc 0 0
/fa5free0 [
/ad
/address-book
/address-card
/adjust
/air-freshener
/align-center
/align-justify
/align-left
/align-right
/allergies
/ambulance
/american-sign-language-interpreting
/anchor
/angle-double-down
/angle-double-left
/angle-double-right
/angle-double-up
/angle-down
/angle-left
/angle-right
/angle-up
/angry
/ankh
/apple-alt
/archive
/archway
/arrow-alt-circle-down
/arrow-alt-circle-left
/arrow-alt-circle-right
/arrow-alt-circle-up
/arrow-circle-down
/arrow-circle-left
/arrow-circle-right
/arrow-circle-up
/arrow-down
/arrow-left
/arrow-right
/arrows-alt
/arrows-alt-h
/arrows-alt-v
/arrow-up
/assistive-listening-systems
/asterisk
/at
/atlas
/atom
/audio-description
/award
/baby
/baby-carriage
/backspace
/backward
/bacon
/bahai
/balance-scale
/balance-scale-left
/balance-scale-right
/ban
/band-aid
/barcode
/bars
/baseball-ball
/basketball-ball
/bath
/battery-empty
/battery-full
/battery-half
/battery-quarter
/battery-three-quarters
/bed
/beer
/bell
/bell-slash
/bezier-curve
/bible
/bicycle
/biking
/binoculars
/biohazard
/birthday-cake
/blender
/blender-phone
/blind
/blog
/bold
/bolt
/bomb
/bone
/bong
/book
/book-dead
/bookmark
/book-medical
/book-open
/book-reader
/border-all
/border-none
/border-style
/bowling-ball
/box
/boxes
/box-open
/braille
/brain
/bread-slice
/briefcase
/briefcase-medical
/broadcast-tower
/broom
/brush
/bug
/building
/bullhorn
/bullseye
/burn
/bus
/bus-alt
/business-time
/calculator
/calendar
/calendar-alt
/calendar-check
/calendar-day
/calendar-minus
/calendar-plus
/calendar-times
/calendar-week
/camera
/camera-retro
/campground
/candy-cane
/cannabis
/capsules
/car
/car-alt
/caravan
/car-battery
/car-crash
/caret-down
/caret-left
/caret-right
/caret-square-down
/caret-square-left
/caret-square-right
/caret-square-up
/caret-up
/carrot
/car-side
/cart-arrow-down
/cart-plus
/cash-register
/cat
/certificate
/chair
/chalkboard
/chalkboard-teacher
/charging-station
/chart-area
/chart-bar
/chart-line
/chart-pie
/check
/check-circle
/check-double
/check-square
/cheese
/chess
/chess-bishop
/chess-board
/chess-king
/chess-knight
/chess-pawn
/chess-queen
/chess-rook
/chevron-circle-down
/chevron-circle-left
/chevron-circle-right
/chevron-circle-up
/chevron-down
/chevron-left
/chevron-right
/chevron-up
/child
/church
/circle
/circle-notch
/city
/clinic-medical
/clipboard
/clipboard-check
/clipboard-list
/clock
/clone
/closed-captioning
/cloud
/cloud-download-alt
/cloud-meatball
/cloud-moon
/cloud-moon-rain
/cloud-rain
/cloud-showers-heavy
/cloud-sun
/cloud-sun-rain
/cloud-upload-alt
/cocktail
/code
/code-branch
/coffee
/cog
/cogs
/coins
/columns
/comment
/comment-alt
/comment-dollar
/comment-dots
/comment-medical
/comments
/comments-dollar
/comment-slash
/compact-disc
/compass
/compress
/compress-alt
/compress-arrows-alt
/concierge-bell
/cookie
/cookie-bite
/copy
/copyright
/couch
/credit-card
/crop
/crop-alt
/cross
/crosshairs
/crow
/crown
/crutch
/cube
/cubes
/cut
/database
/deaf
/democrat
/desktop
/dharmachakra
/diagnoses
/dice
/dice-d20
/dice-d6
/dice-five
/dice-four
/dice-one
/dice-six
/dice-three
] def

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: fa5free1.enc 0 0
/fa5free1 [
/dice-two
/digital-tachograph
/directions
/divide
/dizzy
/dna
/dog
/dollar-sign
/dolly
/dolly-flatbed
/donate
/door-closed
/door-open
/dot-circle
/dove
/download
/drafting-compass
/dragon
/draw-polygon
/drum
/drum-steelpan
/drumstick-bite
/dumbbell
/dumpster
/dumpster-fire
/dungeon
/edit
/egg
/eject
/ellipsis-h
/ellipsis-v
/envelope
/envelope-open
/envelope-open-text
/envelope-square
/equals
/eraser
/ethernet
/euro-sign
/exchange-alt
/exclamation
/exclamation-circle
/exclamation-triangle
/expand
/expand-alt
/expand-arrows-alt
/external-link-alt
/external-link-square-alt
/eye
/eye-dropper
/eye-slash
/fan
/fast-backward
/fast-forward
/fax
/feather
/feather-alt
/female
/fighter-jet
/file
/file-alt
/file-archive
/file-audio
/file-code
/file-contract
/file-csv
/file-download
/file-excel
/file-export
/file-image
/file-import
/file-invoice
/file-invoice-dollar
/file-medical
/file-medical-alt
/file-pdf
/file-powerpoint
/file-prescription
/file-signature
/file-upload
/file-video
/file-word
/fill
/fill-drip
/film
/filter
/fingerprint
/fire
/fire-alt
/fire-extinguisher
/first-aid
/fish
/fist-raised
/flag
/flag-checkered
/flag-usa
/flask
/flushed
/folder
/folder-minus
/folder-open
/folder-plus
/font
/football-ball
/forward
/frog
/frown
/frown-open
/funnel-dollar
/futbol
/gamepad
/gas-pump
/gavel
/gem
/genderless
/ghost
/gift
/gifts
/glass-cheers
/glasses
/glass-martini
/glass-martini-alt
/glass-whiskey
/globe
/globe-africa
/globe-americas
/globe-asia
/globe-europe
/golf-ball
/gopuram
/graduation-cap
/greater-than
/greater-than-equal
/grimace
/grin
/grin-alt
/grin-beam
/grin-beam-sweat
/grin-hearts
/grin-squint
/grin-squint-tears
/grin-stars
/grin-tears
/grin-tongue
/grin-tongue-squint
/grin-tongue-wink
/grin-wink
/grip-horizontal
/grip-lines
/grip-lines-vertical
/grip-vertical
/guitar
/hamburger
/hammer
/hamsa
/hand-holding
/hand-holding-heart
/hand-holding-usd
/hand-lizard
/hand-middle-finger
/hand-paper
/hand-peace
/hand-point-down
/hand-pointer
/hand-point-left
/hand-point-right
/hand-point-up
/hand-rock
/hands
/hand-scissors
/handshake
/hands-helping
/hand-spock
/hanukiah
/hard-hat
/hashtag
/hat-cowboy
/hat-cowboy-side
/hat-wizard
/hdd
/heading
/headphones
/headphones-alt
/headset
/heart
/heartbeat
/heart-broken
/helicopter
/highlighter
/hiking
/hippo
/history
/hockey-puck
/holly-berry
/home
/horse
/horse-head
/hospital
/hospital-alt
/hospital-symbol
/hotdog
/hotel
/hot-tub
/hourglass
/hourglass-end
/hourglass-half
/hourglass-start
/house-damage
/hryvnia
/h-square
/ice-cream
/icicles
/icons
/i-cursor
/id-badge
/id-card
/id-card-alt
/igloo
/image
/images
/inbox
/indent
/industry
/infinity
/info
/info-circle
/italic
/jedi
/joint
/journal-whills
/kaaba
/key
/keyboard
/khanda
/kiss
/kiss-beam
/kiss-wink-heart
/kiwi-bird
/landmark
/language
/laptop
/laptop-code
/laptop-medical
/laugh
/laugh-beam
/laugh-squint
/laugh-wink
/layer-group
/leaf
/lemon
/less-than
/less-than-equal
/level-down-alt
/level-up-alt
/life-ring
/lightbulb
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D9B057F51ACE6BBADF67DC4C0A0F1AE1F8606EE140FB1B2D8843522362
8762E804EDDD847E3201FE5EE8F0F34C223A051AF29F94D581F1319F9405D222
5D11EDEE653B5DFCFA76A428F3244C360E5D64633DA200D77301E7ED1EFC18DB
2BABDDDB242A2DA1829BE2AADED3046A2B41F5018F52BBBCC1887B6023375FD6
5E135F1C6FC129C429DFF593211753D35E506CA1840FC02CEF83D7E675A74C63
AEC3C1C6D3B2889A2EAC6451483AAA15EC3371D20FD98A1502DDEA0C551EE6C7
13E640587BD641C298A4FD4E989EEC1BA81C95A5EAB7914BBF17BB5F8E4EE41C
A5421A46B6A5668425124C0A7DE2BE4E13FD498D6888B03C2D6EFBDB8E462AF8
A2E2945F87163BC48EA4328A28AE0658A0831DF8D6208DEFEE939244572468F2
576155B8529B990C859D4D1775D93E307CAE31BA00D488F734328E55D6A30677
A4E4AF4BEACEEE36AA2A58449A70373A6D97DFC217843E59549F780345E1BA20
B74B46FA556FF6AD041F5AF964A44ED4636FFEED542D8E002D20BD4A45139FE9
1224CA8D79C8888A61CFF11B2F885FF7407F6D9D682EF0E6CDEF9577BC6B8395
99C230E59C767E2188E178841937FC080A6F01FA8C56BEAD52FD6315BB45EFF1
31B1BB41DD4483A25CD6E21C2C97D8C42A2C812782F969E8736953B916070558
4B7CF29AE5CBA9B56A59F3FBAC5275CABABA10951E037226448A025767337026
11FC35AEE917AAC7D1D9B5451D564727948552F6746A60A2C241925E3C0181DF
7DFF0A291B2D4E20F53B5E808AE8C32582387D855D66AA262A8EB378B9C6EC20
F210E1CDD30F0BF2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91051800EE6C54285
AB0594D87D05EB4CB44FFC094DA0072AE7D4BF2F4F9BB812FED256B937BC2574
8C529F97ABAE081B0702A3349EC9A6641770F5E9F75CBD40A2C2BA1DBD67A5CF
D70BE80E6FEA2DEC57585BC12DD19303032F784B5EA8A81B9F57068AE5ACBBA1
C21A4A35D152CC0ACE378141C63C115DADEBADA821BED2C4F19938C22C4CFE00
FE33327DEC2DF262EBF6BDC9C4DF5EC10D8B8CB097B2686FFBAB8685CFCE055F
5CCDDE665660B49B57EBCBFEDE36CA7C0F256FBD50B4E60527DE0C12E0D572C1
CCF14991CECB0C89B6BA6E8B05DDF20729C1095959919BFA00C4606DC36B6154
0593CF72A1113D8A42A39E6BCC8C36837CF465139AC072D56E1F84AB294B6585
D7784640B7AC933A1B011A1172C8597E9D280793CA48C76609BB59F1B979DF3A
7F70AE8C791EA98F5A51970BDABC1A83E8CDA0CF5756AFFD64026D7DDA4C961A
F66DD742C729005497B67A95A08BCC0E6E0F39280EA58C633C5B796A991ED7AA
F7FD0B89151F5EF415417295659A648AAB707D1F625D2125E40D3ADBE69E057E
037AF177B961BF6EC227EF16E0C3A3EB7B6A4A005DE598AAC6DD7A20A67B4CF9
D014EB5CA301
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: FontAwesome5Free-Solid
%!PS-AdobeFont-1.0: FontAwesome5Free-Solid 330.752 (Font Awesome version: 5.12.0)
9 dict begin
/FontName /FontAwesome5Free-Solid def
/FontInfo 9 dict dup begin
/version (330.752 \(Font Awesome version: 5.12.0\)) readonly def
/Notice (Copyright \(c\) Font Awesome) readonly def
/FullName (Font Awesome 5 Free Solid) readonly def
/FamilyName (Font Awesome 5 Free Solid) readonly def
/Weight (Solid) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -97.6562 def
/UnderlineThickness 48.8281 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-55 -127 7797 876} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BABD05D76517D9C24FED216BE906
1643B22AABEA637BFFCB75FF65A91279495B00B8B92CFB39C8899C3818357033
2BBD344CBB263D4250A46E5B09E712D88275731E98C996C69406E43E9DBEFDD7
161A841EE17304D49501F13D3AD3CFB00DA1700EAD2364C31908F18B9F3643EA
E9514021B52FFC8EEA03D195015D30E3BB12C272A254955F88A4DCD045432CDB
693596BAF5E1BEFA2D9AC1CD0CCBC3EB42825F1EE6A16966D49AEE9CA4A40B7A
AF5854776BA4F7EEE4EF09BE48B41B049B631B57F9DEB79BA1DE47B7C025B39F
3CC77C4FBB15C9BF3A39C8D400BD7D15BB1412AE1918DD7B05716B41DA299FCF
AD90249E2810CCCF2846402BA975F3C22EB71AAFC24EA5C6A66D5FB86DEA0D82
A1117C000C5353B2F32B7DF144A69030C8EE0F6971BA336C4C33911E390912FE
FBA5EB88AA67FBD2C8AF8DA2B0A0CCA150F57B850632A58E909DF61D04D76B71
0786C246898D6969AF821D21463B5D770D11D97904922845C026679D889AF774
20B847060B20FA78E265C44C994B20AA9A4749F76E07EFD1CF7C2AB3A433EE2D
A07495342763E2716751093DDA622377EB0C70DF28FCF95DABFAB8884E12E40C
1235BEB723F81A20EAE69E8CE0BE778A97C9D5C1AF3170E6855510853C8C4FCF
CF0D2CE4C6C0710B9584B928C9AC5C465C74B9178A153A434B3F87F01214A69D
4429BFFD0A8DA733179F25B6C15391579ECF0E8725DCF53BCAB814DD38EC0F29
8C225618FA305C623812A1D694E883AF184A0ECF699C9308B3F28A3723530EBB
FAA9CD28A1829FEA371AEA5F8B54D11BF76E15C00CA32DF229892701A4475A6A
734F01EA4438C7E68F17ED1D48D80DA35279189F2FB603FE8F79BC05000007A7
084F12572B7EA09BEBF580B44E76F45650E9E93430AB22AD4292B47B5FB861B8
C20EA254C175EFF7C7CE33228E608FEEE1D9CF299CBA5F727FB11FCD01180520
E9C7510457A9256815BE73930FA7186312B1F1ACF157C44C9BEAE51EBB523877
0086CECA8C6FCFEAE9C0F8156A3FE9B991EDC0CB72C5852F7169A8B98FB8F29B
5A58DBBC136A1E8D1B1A79929E88BCD3886D355A191967C791EADB7A9700D0EF
F276C337E561338D7D02F664A69A127D56BDD67D63C1DF32A80D732FE753B297
08EDF2A1CC7E4617933B49C02A92BD986BB13E68435FB97E81DB37BF578B3AF8
2417947930EEB8A75189696D79615D68BC4BA9238AB9428860AD23E7D8219844
0C741FB72F30CF733FA111B43F33E1D26F464F5999FEBC0888B5E4D8B0E07567
9D90551CDBEB05F9A30F43F45B5210A3007E4D03DD5E05805D3AE898FD752841
54198CDB67A5AABDF7C9F2BE384A98DD9AFFF4E8CCC98FCF480830FA681BF215
3CB11265AB89ADCF53BE360B58DC3621D580F2C7227882B61D155B79B2B43266
4329231C7269A3F30930859BF0A4D5D2CEBA01BB4059A587C6C785E009F19C15
CA40C512E9F5030743BEDD5606CB1C540D829DAF394E13CD4A008EE7F9F1CFFA
95B5C8109B0A8685FDF03A978954D1325F66AF1265829E29C353B84A33388574
B4F73E25F490B88AC3AB2F544988D5CD8459AF56C77885DB50B673602CA70AED
778E4E15F24CEE13A730F1E29D1ED0B74B2F8486AF729E2F0490DD6E2F55F3A7
B4ED7133B02DE4581066B984FE6EDF491454E6CCE895A8A75E0F8E0AF33A7359
E5EB03B1EC74E1885C81F49D2E77939ABD2C66725FA5415CD9265AACA265041C
E228BAB08EDACF4E0AB86D340F5C6FADC65653CBBB25190AB307D29C6FD44AD7
341A399CEBC01967EA5C42552AD19A3DD1DD1BAFCFCA4777528AF5E958E68450
4F95880E2E5594A3FB0D0624D7AFF119981EECFEECA15866AF76B47D283F238B
9D4E9AE5F8549417968001184CE886C1D6AA8396C25E0840EA447F0C2586B021
81A4ED566DE0666A9AB45924378D008A62C2E63BF5394EC9B051E293C9224645
DE121EBBF97E9E1BD85868308FC8186F9BEDDC40357AE239B4F02F00158B87DB
8F9947BDF037FE0532D15D61B38C2EA75CBE50D3330B105E913A071443887BCD
CD7448FB9E03CBA4D711EC4C4CEA1E80D648BA01D3BB41BE8BC9482B0C2A4653
748459A474EE5871E4182A2C14E0D2049F6BCA02129D8B1EA98379E7E8BAF0DB
C2115FC8DE189423A6CF96F3B624FD11C23CA4DAF3293F3FC3B9419FDD02BFE2
01E26AD64F64C6845E0CE09E122DF40D6908B9B6F873A6B8359FD44A37AD1EAC
E2F4E3DC35B12328553CD5FDB59309C317BF49D9A819AD1ACA97D248D8E02DBE
D74AF4F10C41DFE0D90932FADC7ED477550A79F5303533BAC12475EF8D0D1AC2
13E5D5A8A57901118F637BCCBD9AF21516578DCFBF8165AC8C9AA3A601A52A91
EA1B72EF8D4858694D1A5C7C04D68947034889EBB9BC0F6F720F1EAE6D8A8ABE
296B0861C666C1369BDC7BBA46457D3A99A66D975E7F5D1C6DD77CF0A057BF12
7F001A096FC339820E946F636CA2F5D39E4EAC88B2148C5219B1616C53425AF1
1E4A708EC4C3A7928EAB51AF51978FAFFFB2FCCBB6ECBFF8252554B3FDEE05DF
74CA5CFD7B1FB53CFE9E0DCDDCEB8C07F41D8185B10E4287CDBEC9521030B0A7
E706F1865B67C03D749F36AE2F831F159E38017AE2A5D914C676AD9942323C37
95B25E6B0144E78BA5B588222CFF13A2EA3BED7266F79A1074E5DCDBD3BD0AF0
9E1C44241438B8F9FEF51A803D8B74307A3ABC05066687C6800FA1DF62767E92
83811DD10C7A8F6ABFEA1995C317DE4196273C3392DBD9D660030FEECBA7702C
F79AE7F1045B750E199689646466844787CE5559A86835FA39CAD7468662E6FC
B83F6AF669B77400B0511D4510ECD44638EF26170432230E05C2C3DBA6F004F5
F628A1EB008CCAAF16C1B7B759F2A1D0269E4365D98318B0590C62BC52EF9840
999A057D495B8E319EE95C7BD3610F8627E11056A3771AA7458DFDC0443B9054
FE4029D89CE1B04B586869A9C6122D3921EF880C85269AB7635AEC1B6ED1AB71
EC2D8EEFE718975C8F5AD9D1310F764975FD37AB2C30068F8A47BF90C52CB9E3
5496507D403C747874F039959F2B78994EE9090692D1A94BEF2699D17D1F332F
3E93B264B70F73A7340CA8D266EE7799C16443AC8BD2A467493362041E0E3533
26D45985A13FF7B254242BC110A7BC98A9C4645A1BC4EDD802F0639789249100
CE1C557C43EDE5F78AD7D2E36F1107FD8520E12376757500671332190D93976C
C114BCBB0F6B6CD17EC199F588E24327FAF21F0DB8BF26E6808F50DEE9104E34
5D0489346C5A8665A33DCD4401036768758EB25A6609D0088FE1BB01599D8E7B
2FC035268BBA5D1A29EC35C44B1677FECA73E372EF928ED8B67077EC4C55274C
CA4118EFFBE7DD150F7F44E95AD1409C79838CD93764A09AF78BCB2EB79D6AA8
64B7CD3321789D289486659947AB54B4B63DAE783754FCC5FBA74AFA3B0FD4BF
8EBD939A31AC63434F225EF6C99022E39B85A30905EE0EF94F3AFD23DE7299E6
F276EDC265AD00768F3D384F17C236D4555C8D4AB34CC356D96CC4C3ADC1DDE1
7CFC0D7F17C55984B8FCFC72FD93755E84060C2D0E434BF17BCEB50A19790442
09EDC8A058CD39B5CA2E94FB163B4D769E88853C0500373E41EED4EF76557E4E
37BFB3F46B102B250350DBC55F85C82DBF62927C152BE84C76DEBFDA3D795F4F
790A61617F84CA29117B37470E41712F26DEF812CEF41D9D8691532EB72D0E1D
9EF04F8DBF54CA6D66609A0C7B2FCD14BE8F36414462D75F21B572C52EC09EC6
3E7DDCEC847CC6D3EFA2D7E270D930B74376BB0BA82AF94210D51D8204B74FB7
EE69654ACE4577EA85945CFA37EFF0DC5E7BCDAC54CB217B4836CB34BD71DC33
DFD45D383D10779643FF5D0F34B27AF365FC93D94196498468DF8F322E83462B
651C3EDB9C6EED0DFDEBF1BC061ABC48ACA527396B848EA31010DD1995CC4D17
9B4280FBF081B3B3ECECFF24FBA611612ABA11799B791BE95C8905F1CD1B36DE
4FA2573A8587834B9E7004B5F9D768E0AEB93EBE828619524A495E471F42AF6F
82571AE77D7817392A34217C36626D61F75CEE8A5D7C283DFC0BDEACC56560D2
FBBDF51BE7935248B80D4C72A7D75B511E0073A6BF271D440B7F0C63983E4228
92727C7ADA9E27436AA13D9D59E6CB9826C28125E4F9767C3BCC9830F846A2A7
435D5EBE8C5328444CD5B411CBAE3F63171DE32E73D8406A0FEBA498C4E7CBE9
C60B9180545CD51AA4366A849927DE7B83C38F9742E2395538EE29F0A18888C8
FCF0821DE468042FA2FE0C58AD907E93996D94F11F35CDCB7CD14973B7C807BB
1A6CA60883A1D74C3D5F8B26698ECEF7F9B307A9B85FFC3544A0A4093DA00841
0B68FC6B485775BFEC07AA0088CB2D95B1DC37E2437B7A0B13F8BE2FC74B7A24
071B1DB55D67609244BFB5E1887A10C711F0E3D981D7B9024509DA0C14700B6B
3B945FED849189EAD0BB511D7462BE2346D3BA172008B648F1E75DE5B7EA9818
DC9BAA070E04E84DFBEEB8B24D7391FF2FA09F28479007D6FCB926C75C5744E6
1BFFE5904C904C845ADC1DBEDD8DC9CA3A8707D86580C01618776D11D2E86B00
51EBC700B8EDDBD37F78B4B616EE8F3AF2A642B42A13FE5DF058495D1BBB8F01
D7B201219F99DF9ECAB7137F91911E33BEE00B5569886D97F3213D239DD049ED
6A815EF2B9C9C7F76283C21D44BB92897A206BA348EDE2FEDA5621B98650389E
9815E33A17D7DB25EAE6B73230607EF4320A5F03B65BA29AFEB1E609D9090D2B
C12E2ACE102818CEB577840F6A5D09A026F49CC9C67C271BAD106CEA4393C4F6
8F4D7DF0745B3BCBB34E27F41AD6DE6188FF19570280EA1E4950A0E57D0B80CA
4DC1EF8DA79E34D72DDECE2F2D5668B7C5D8B045753B93F43138DC03291DA92D
80EBC10BCFC2E4A4F1D6298650A753B7752DCBE3871343C697C30727022D3347
9434F81CA244113293094802F0B1D3937A7262039981801E3EB72660231A374A
85994B597B17D7D1EA184F04E2973E9674CE5A5B59E5D7C601D8A8A75C2884DD
77917F8FD492E9AB9328EF8E0901DCAB65112CC98E753385111906ECE632B09F
C6E4286156CFCF39F47BF88EF729EE261B767023B0433B9467DCE6B319E84225
E8E9E069D5E80CAC68864456745F608AD7F1DB2A7057A4B60C01E3B48B4F0FC0
A57E6F7D70F0B3099D68828CEF3EB08DD085A46F6AEB847A082D5EE078CA7B10
CCC4335309E6FE477EB7936ADD7770BA3562A4CFAB546D823B7A7685B098DCB5
465959409262902DFF5443B6961E262DB52A34A69D9DBC915D1D979F2D09E8CC
67956FAFE2735096C69A00AA6C9C1421BAF69E1B8F89CF67E5250C659A7D4A19
AE45B58749B3073662F947E7F5BF97A4823DA48BEFE6A643A56D558A474C4055
E9834136244EA39AFDDB3B9BA2B301853A589B355A9B86904D328BF2A61BE758
B1842235C4A4EEE260976EF1644167C2F4070EBDD0B73478C1BF2719880425CC
E4CBFA670CC1E1C6A8BDB75E7B524F977A90FB269661AE8B7C7A351AC33164DF
69839EF4CCC948B1971BDECC3EE24CA73AFC338206AEA78EA76288728ED74CA4
08020B80A53BF23DB3B68F3D0F58E2C7BE658851767A4CAC46F14215BD461B56
DA6E3BBF5DED4486FB1D6C2F60660F14709295FD7B6B4402FAF6EE84EC0E5FCA
8D53CE5CE1FADECA9A7E610105FA17C45AEA5831EC20510FF2330B331C40914C
36F29FEC53C83BCDDE52A40C1DC2C833298BA9C66845C68C0B47D6DEBFFE3F95
A90BA074E34D5AB46ADD2ED15125C4382A1C95B5F9412BCE7B2DEA273664C0F8
4C7788C6F3ACD041B16C9A99A6254FB9B899782664A7ACE087EBA0D48EA7C7F5
D84E04C04694D7ED240C57F885F794BFBD31E89BA753ECF83F6AE705F410368C
0B5213BD561B753676339F0B9FE90C60F82E180F7AA4A9EC783AB037D2F6F2ED
337D854B81D02F2E65C6A913100B8839695517D60FA5B6A125B952B64A1142C6
F39428D8D2B8FF4F1CA15C3E282A1EA0FDDEFCF0434C4123173E38AF82040A4C
F077A335C829D8626D775E72B5502F3769AE6FE8FAA616B8441E702567E898A2
DA6AAC3A314D5DCC26C3721108036A248AF16FD36E00AFC5AC22773740AAD22C
44F44CE2A9EC5A1378354D0EF515DBC0B835738955AD76891B054759FBEAE7F4
717A6118DF303BB77FB7C261E2C91715BBE32E595BFEF8219927C96E0EA2990E
8D729C3D9DABDD29ABD05C1FB213FA9C410C78ADAAC2F16EA19B997E5CF8EEEC
CB2C21340919244745429ADF41BCD1506CB773E28FADF673D70A791711AFFCB0
7D8DB4849837336C3D6DCE6264555AFDCA900E3DF683E54048E01613116C2784
94E20DD2EB17AA2B5CC304906188199CF23D9D54D3DFDF55EDE035DD3563EFB2
74CC50F61FD3428C83F24809D0AD1646380585D0E5D5F28A9353F6784D3CC671
B0FA6F59F3A0347D547C728623FD39A54642E669657AE1E0362D4838EF8177AC
838E414CBAAB3D568D946FE8CA8C25DA2D751FF514A92199AC13F78FEAC5D4FD
0CA34ECE58A8FA8E722FF4625129815E150EC18AAD461DC2DA8C1E6C552D5002
8AE2476F9084AC04C97D6FD5D963A652ED4EF778D021ECAA36830D54A5F9858E
0733034D1F5BFDC20AB2E4902FC4D523AFB607A1A4217F2378650ADC04162F20
8865D6456CD006527E6EF77735F91EA6049E418B901F10FC0A3EF112641C95B8
56F0D87D1389546906D15D9BB1C1A9A946E7EEF8D198562366FC4A89D1C27D33
6133D5488E21C16CB8B66D003CDC73EAE1E5D9EE754660EDF4F9491192A438DB
FD51CA5C5169A2D621134EAD387D472B72A00E3FCDAA121A5A6B5F8D8D6564F9
2339FF8F8305D0970C33AED35D2365BBD9AD50C43666B33ECCCF9754363F3D5E
83EDC43FD61B93DBB81A89763FD4520AF4792C4DCEBB76AA9AC44DFDC4FBB142
0298A665045BCDA5C148E123AFFF96CFD61EEB9C900A19314829CFFC11DB597F
7C55A8A7CC1D8C1245CFD89E7D66E63D1FC972D86D80FA11FA9DAB4BC9968770
BC41B17717A55E5D8A8F06F8378F03A9D9D83E683BBED9AB71BE8C8E5C24E53A
5AFC5DF3401222F292CD0FBAB7F36A7A2E4C582CD4B7ADC254E87493576F75AA
AB9DA284490B1A014F5A9DA7B45CA4D070D83F5BA00415F599E0D7FA55CAD906
0919527012138A4EB36CC9176966B8D949F5A945E578C8DD29FF20796AC3D0E2
9B043E8D6A88357867F8BC52A5786A474539D5B40C1FD85C8B2BEE6A4AB398F3
5D2E5457EEAC9330C8D80DB42EB766C43EA8EFE81CCD0BD4C498F6F335E234DB
1B602BB51593039FC9C7CBC249D24FFBE824F874DD9A9DA5141D56AF49EDE3FE
8AF0EA8374D52E32FB981A846E5CDD5A826B3A045427E0BA44142C86AA0CA4FF
8EB79622F7434C700922343340368914BF3C97314045FAB692C18BE004A54A0D
C17540E09C4D4F7048EBFB72CFF1B8A6BE5957291D85E8E79BEACD319A591395
C24E1ED7B03E8F2570C002FDAA805E647C464CFC6FDE441AFED1A53881AB0640
88EE21559634A7CF4256291DCB5985640CA441D4CD8F39E431384FA126903192
09F8296C41CF3382822A30A4B7538AA371848A055F06F15932DC178E20124CFC
052D11E5A12FFBD12A674BCC38AA80D0E81171F8A8F748EDD178E74AA9D94CCC
799E0AD5EDE46024816DAE80E8A6EAC6A2DD4106E84136E8D75702D559AAED11
96A05CA685947A2F28A8B2C28F3DBEB8A0FA1BC438D77DDBFB30BF2B3FAD678B
F106B39AA7B679DBABC0ED4D3CD66CB775F3BEDED239416C87997E04BB96655E
F28044726492A9381FA2D56019BD6DF622D031C13EB0D1224008C783B8F881F8
70EE9916C1AD45D28C64494DAF402ECCC26A80223DAE6F2B4E61E5ECEE9D3629
475DDF9CF1A646DAF4C24DCAEA2744D04C882204C585DE92E039B9E22CAE2232
C24B64C8408D38C8E6A9D8F9BBBD4C375B5F2D06B8ED858D43F5B7F56AF1A632
9DF39B380DF4659E33C48B4C0C2DE1C3216A7868C56A09C74FED4F43DF635B06
A21BFE1A3F1E05B58EBCBF79076258BE982439823EE9281603440CCA8C3251BF
A1507A9AE55A110CC62D9E95A4B7E0BF691C7839080FAF8FB0720393D57C66CE
1367158F779933221D89B126E62434459B42CE530E7BE0B89400B788BCB0EEBC
694D3C26129CB619B5075D38794549759D6526A068FE46365EDB9692747656E6
C1E56AA366FDB635B6D9CB10C67C883541B3FA94D3F16196B92A3EA129C8AEBB
58D6DCBBFA745CAF433C02725640696B370DBD9B7FA5373D1683FCB0B027DBE7
06CCE464ECC69088FFE70D0A43B6D089A231DDDF6EFD601220D02884656F5690
DE18A477F2DAD4417254F41494B34057C43BB038AFD7F129264576A8EE73246E
D62575CDCE914272A8F45203148893E5C273B10566ACD612A271BCF53B3071B2
A81EE764E92B5DBE0736FACE9A496C86706B8107F53BA5D6D7BF1BBF466B598C
B847579FCD08B107110F12B24B0BD4ED7C9E63DAA701DAC4FE7B9986F16E00DC
0454841956E4938C6DFA0E114FE592AC4E65D194E995D3321EFD189E7C0BC8DB
84C1619AECBBD05FB823FAC13F0A220054E262C4EAA12D2FB81DA10AA5668FD3
EAEF44FF4B019485623DD9F85E8CBE85DB16F4691EDD31135B78B78B02EC2E4D
012B4E92D24CEA54F2AFCC4C6BA39F26DB2B9BD0386D4FCE408F44482607441E
52A0F2B667CF75A4C82D73ABE483FCF896577B7D75C0AD49A9C5ADEB88721607
0D67A7AA24AD2414D4B4549909CA5DFAEBB6C3A0F0CD388ED13B7D0877AA4578
761465CC4776A6E2386E41F98DCB9DDA5B719EC05890EA64DE52599A65795A2C
560781C92EE14B5FE74E9D82947F1C6D1EA367589C59F314217D4DB571367080
3AB4D7450CAD98A4FCB699BA480002B95C916E5CF6B6A655DCBC122DF7404A6C
C3E5DBC1D6B74C353103925372454A70C8CC75EEE08AF87D3504DFDE35136EC2
7F22CBA45506CC27B03553FF62747E6A779E67699B92E5EDE49175B125A72BED
9A7EF7569D63DB60BD0115BAC018ECBA37555B89A0C578162E7D109AA7DF85DC
6D404D9BBB1090E9EE6E4C4CE247406B5A01B394B4C641F6022713C69BD00000
0C082671EBC2441DF1AF522D00978F06C2AA2F02F332FB941F443B8249225FBA
2293F8868A81AB02413C83933C7F2F997E9925C2AEA605AF5FD3CA14810C0F64
7798F5D67F361A73429F8CF7C108FEEEE50C825EF2714E97474F5EF32E4D5592
17B35786577ED3D55904915546163F0D95C371AA67319B6262F6BBFEC1043AA2
618DFD5284EFB59598C4280CA3E06D42F19E9EBFE7E8AF1747A7E72148D27945
597DCAACC5C78220CFA516293744BDA014E174A2A50B299341B09EF1630BB899
B09DF1E30215BCA408225A5538C726B4D5A7C95707AA754B523042C1A9C87161
59B63D45B3AF2FE2CDBC6E646E7ADC1CE27CEFCDE405A7ACDF296EC1A2542F41
DA47B93ADD4BFDC262A5DA8B635943558C3140F48BB4064EAEFC605F6CB21ADC
A3D5069A272613C152BAC3CC08586790CDE3CEC3BCCA32CB4A8E5C0598D29FA4
81503198947776D74FBA78921001F88822816594A29E0E16FBA1F40C1D211302
2BAF43D2FEA03D4E0C9C6B87548099AAAFDA263AAEF21B9D4995EDEF1F326A2D
A07DB8ABAEAE92E48804635C8FDEDD12F21B86FBFF4A5199B537A993827665CE
A33CD38AFB5B44EC19216CFAE0900E12C339FCEBDCBE9300AA2098D6F0B4A320
7812AB6A1C609C8D47E9117EDCFB416FA0B1FC626436B4D6BBD2AB5B247DE946
5BCA79D8F6EDECE0E8BD8F83E1ECD00776EF9597EA3C105FEC8DBF248095047A
E6358215D000893D9E8BCF2B5D89CE9F69E413BE8BEBD2B15A36C9B6C151139A
406FC1A28D9ACED8C5E9BAFE9E1DABD0FC1BCCDB90DA0450C8EE17EA56B73B38
434C62EF994DFA50F250768E98AC0BD7463D475DD07FC03ABBDBC42D55EAAE42
0BEED2538B4B135DE3C6C93CFF2DEABA293EEC30CA70455F4EB72AB4BCD07147
D6F8064C50B2FF6BDFC66E1E7122697E62E4081D5F30F3D9F89DE91A0E5BA8FE
D311C782B0D5998818302104F261D59B40CE1E87A9435178CDE03F5401A8A3C6
5B0B5B9387723E28A207EBD648B95EBC3327FD9DAEFFB95141488BE6A484AC5A
AB00996194B6C5AFCB26CEFA1D03ED4115C6DE1823882B73913840B2E22B4639
9022CFE1CA7E173E513BD9AC1AFD81C3BF9AA6A878764E455181F1B1B062DB08
4780235678B7C9ACDABBEEB17411034B760AEC9D937F510757C374B0F3967C4C
23D76B2880699096B9D8E6DED831F05972B66BE00E225048E5F1649AEFCAF7E2
28E08B3E315B0149ED06B645EE3FF46B759E769326BD1563B6B6DBC8BCA5DCCF
A45FB75C9AE52CACA71A502820ADFFF08BD037AD56A79978E00BEEABF209F12F
5898217F5D4DD3DE6462010B1C48A2E0593E472B57D59229151494DFF0DCB327
26CAA04C99BF3B30056CE313C829877CE90D91932D1F99D3E075AD3B89FECB4B
38C292590AF5861B20E778E704294E2DA6BD959A6822C8E94A33F9E19D403003
971F3AA3883640ABAF6B758A54C10D293C24C8EB4199C5CA3A43E3417334BC42
FECF3138E99D0932EBE77336902CF59359A8CBAD1B46F2247027EC2EC8DDA743
B9AAF187B985E0705E38E75618BCA0E00770018207A9CE111A32FCFBBD180959
86584795031C2883E274A3C1207D5DA20796171C0860C3347FA4A215E5077C13
9E3FF7ED7B041BE1AD132864876086D2C2D95FA21C6ECA3D2F062637B25AEF0E
CDF6D93DCF8B3C4A10FD40EE2F36CE7926F7BC36D0B9D074E4B63310DCBE9156
3855D38CC063B315E8DC8A1B569CD7BA510291D44E807E9FA1126DDD4B139659
2C1CC37BAD138D35583593E51B719F2E68204143BE17E8AEDA5C857C0A5BB1C3
D02380DC9576ECEAF1C9C4AE91FEB579BA6B27F01737DEB70C29FAA8A8669500
BC42B868A58E23553311D5DAB332940C54A15DF31F41428D15D6EF75E26BE7DB
68201B9239F28DA5CAFAEAEE1C86AC0C9B39F1E893972D782A86C04073D13A72
25762D6240CDED5DF14F9F0DA069B55C88844A68EC455EA8D0B88AC129EEFFA6
2245BB7065AA3F4AC00B0383F67832F8939840B03C8839056426116300894725
29D7F379140416FFCABA5DBEAAA5533F3FD574286673A087A308619900EC86DF
7EA7033F31180BB9D575DD98C868BAC45F7A35F82460033E014DC52E45926381
5459BA2D699B64E1234BA695A7B5175A93F3E804795EBB863FCA5FDC64BFD62B
0F62BC2E8025EFB02CFD5396A825EAF82A5C2C21962690F98D583D197EDBF72D
A5A636CA6E3410C34A1D836880FDD41D1658CC878BF7E6D5128B78A8D78A5BF0
4BAF5C2B942B72A752F4C5C7C97E81CE628F00BEBE27B55D753EE604A02B5BFD
2C068A7DAA4E6114A59F9150D97CBF070DEE08E0E61EB405766B7B739EAAF078
FE9812568A4CD5B21A988676F44BAB92659C17C7F508928DEC8CC04EDFBD0B5D
90A7976244C7CCA4AC8DCAB1EBB79CE97EFA36B510D78559A25DF19B17A7C122
F8F3D7E69F070357EF9F5845AB48A84A757BEDCD01038B8A15901A2BD2F718B8
0798D95D2F992B8F9EE38F2B3E7C6B6D81D18E9C3289A3011DE576C670961568
44D7CD0470F350DA865F3310B17221420768D115F62427531A54E4D601C11D16
65CC5AD1E87C8DDA445B918714769310D38B8C0B82852C0E40A45DDCD7D13475
8B28F18B78B7548EB4F8FDE0957174C9E9886B198B09B0FFFC95F561109C5324
DC470AE00C0DD5AFC45D88054B8988C1B305E94F64E4CAC866DB70CEB5E67393
BF57C7D8915555544B2F61A40FACAAD74537E36EA1F0D4BF4B07A65E0EF0CFB3
45D2973555CEA06B5E9322B1A6CA9DC9E2ED36004C54C358E25ABBBFDE2F2368
B6714DCEA3246F01BC415C188C0401435583581EF7FCE9A0C65B29FB256F0D7A
D9C42307E9F9B575FCCB27855526912643F7BA79E5A00F46B446CD50A71389E5
6B379116A14AF3F0BA07A97144B83E456B1005E1464BA146AA2C8DDA4C60AD2C
F91E2443F0B1AA4BE61D02E7EA72C25CF8C7E10810995360EA267047A66DE1B6
9E322BE58AD4B8224C70EAE10367AA9D9FB7F35B34A4C960053AD6CCE7E4F24E
F220FDB31E5318E97E0E6CE2CCE9324C352092F1768E499699BBAA32DCA2755F
684239ED3F7C74616B6C7782BF11CF37348DA3C65B7B737669EC0272C7BE8C84
4AF1F4CD7D5D7ED35867D5D2DA9E68A451D6CE00349524FDB6432A4E3240957A
1B58EB9B414842F86F70304CC79C44C9C6E095B0F6F9B409402083BC1AA31B3C
FA112EAEB66E2EDFECB5F6E45594299C65967C51E9F0776E65AB03689A919B5C
C3D6BAB0DA01231497C255A3D98AD42A23283407962BE31C87E3C5F8E51B6746
0F8002F3DEB82BFE1250E17D7DA82F5244AE0680FEE259DC090D4F034EBA3BA5
FD83B373964FF6314E7B22866EB381F93204922CB4FE1A396EC72426526D90FF
3C889FB0E7D8462F88BEE48AC24072E0091AACC7E4570CB3EF56B97380CDC3B4
AC2B9591F561256C049219FC028D0B2B190F233048751E98D67A1F3D5558C0E0
8EF7C108FEEEE50C825EF2714E97474A516B4E92ECACF64E79F0ACC2E5A57DA1
25508920C8EFC9C962547C6762FF88E616241FD06A19DCA457CA086CC0DF3A27
3E8CECE29E4EF9997B82D0E97974FC52EE48924BA6180EE055F4C8E804C409E0
8D5C0AD10510765284020E97B3CEB302886322215C3CDE217B70F75B85D5012A
0BDE436726C96B6C4F760DA43A7C67902B21E084E363C8B4E0B37F4ABA4B3278
44F4A7A2F82A8A628A2E05489C39508CD8DB77BC76E0908328E9C2CCB1CF575C
F4FC73C22B27A4CA38A6CBF0D94F73C8C840F9E5BC086DC5D6C0E5FD13C73D60
AB1DDA824DFEA1138F01FB47342EA700056C5FA29492AEF376A4A160238F0A84
91B4E5977445EC2EB0E47F3630C69D9A275A2A1DD613C7C6BCC3FA72DC1B3284
7FA84A31B3CDCC0E424CB1C2B4F825D7F6AC31F6AEDBB4670462BD7BBD55091B
92BBAC71593EF8AF91E71430702F73A1F6DF7ED49340833233EA063CA246FE2D
C3A9870C2B227BC16C2ADC5117F025EE75EF233DF713A10F8853617D0469AB4F
2695B5C8D5535205955898E74AE6DB67AD57D31056B9B71C15F9C48EB2ADF3F4
6BE339A32316087C7CECDC5E33E20D6995D97B207AAADF134C3FE7BBC78C3707
57815205BC216CBD42A8EEEAB31A398BEB36C88DFE356A3D2733F497A39CA821
26ACA57F6A836B08868BFC00C6BA52E133127578EDC635C7B5D3FB56EB460E04
4F3AAA5C9B1F2BAB2A1AD8F4364B815C5005345653A95F4A423E9E3863EEE35B
AA4A62F92A5FA17508876E6B63E503BA34336869B857FAE577672626C76849D3
31341C4B61F5B691F04E526C85C657D1C6E3F329A6A954D20B08B33C5D022E0D
5A8E53CB1FAA9FA6E75A8419B1269939BE70A2E7544AA0F62D7CB8E7B79405DE
BCC5AB0E3A290A630F4248ABB4FDA0EB69FD636A4A1AFB617F59E24F15194DE1
E3A7D35816E58565103C7943F254E06ACBEB75E343C61836F594EDA778541EED
65330423DE1F7C66FCE8C73BF852A657BBA19626F2B092305313294C37043E04
3A79D6658B2B3406153235F7A55608DE373E47F612AD0CCF5AFC45FCA25A7245
5ED72162C1F3E06D60881693C75E9D15874C12B7845A14B2D216F3551399335F
2DEE0AD0A6D1415BDCE7BC1EE0E3D3041D5A45C29872C8CDF6F0FC69B0F51A45
9C760935B61CAC1810F2A3F873B61D70DEB729723C1CAEF05E190C94E75BF465
34F66138FE574531ABE9F4BEE17EE8DA67D9BFF47211E8CB4A9D15DD5F56DF4F
FBF19FD301C27044DEFA0A889E7BC38E876DAECDAEE77D26281DD04FD6E8F38D
DCF804353D5A1194A4A8D5870507907507ED492B8DC2BB87F4EFE561C7CE3119
7EF488D6C101B6CC3E7066BC018EB404A859EC106657B45CB9EB849C91FF3FD1
323A50B646D5FEFDD4D176B4E58DC0B5EA705425D2DA4E030C606BE340A27ED3
77CB612A8339108F0636CB043DE8C82A9C9097E1CB4B57EF7E58F7B026947892
17B6CB521CF77281D2E07F6E5BD12E47B36BC7FFDA0F0E5454F8554CC7245135
958FC5A0DE3557923F75AB5E706E5EB68045A59384F0204E19F1B558FB4ECA83
F997FF5E5E1928BE1AFD2D7426EAB926A051D03BCB47C4C67051C091971CC5A9
F32DD53D0DCE1DB20B4ED10669B4BA30854D6D093B4FB5A179CBBC900DEB535A
10B6E3F94619C20CBAC2216C9D37589111F5425FEB05571409C9935843DB6DC3
B373E90FBC9681BEEDBBC78C370757815205BC216CBD42A8E3CF0BFFAF39D5E8
DA57C9C850205DBA7D1749F4A7261F2882C65F4EB9EE7E3C2D1A65184F6A2018
94BA2835EBE869CF3B0AF9BD470B7BD6D0648443478AB13A3E53D1F3698AC2FF
0833DCE808C46BF95B5ACFEF157264F7E34AECAB27A1A571B1D127B4AE7E531B
4C880E7ECC8A61D14B999234D302FBB53144EC48187A5E602EDFB5C56D031B08
B7316B9600A223D897157D11F8A9A4147F2898B63EFD8B5B7A290ABFB1F81EA3
BB772DB2E22D2FB6D7F4BE6D77E1529AAAA00A76241BF98AAE25EDCA6834DEA3
4758E0429AC6BF590F85CE86A6BFD43B4D084C96016C1DDA82514B97DE1F5679
C50162FB62D8318C6C7954C7BD374AF1A3F95705DAB0FAB96D1D86B8B387FE72
7FBE6AF19C0DF700A05FD72CBC5402E84472BB6D030888E2A4BE17E5AAC597C3
D514037CAF2D9B1753B5168B354174758CB15653B76F7D4D915663E0E4E39A28
59FAE9333A6C139E32A3C82A13C81762E94B1C1D7E8F460237CB8D25DB4A5C23
1F02630D51E061E0ECA256F6E83FB642BFA0F166A34B9CBD184F0E5C23806A47
83A1C3C830062D20036805A64A1AFA4999DF58022A5264E9B3D7F6E292731C73
7379FC2C05D442AEFDF0CD3A9186702A6828A118201018FE91AFD0B446441E0D
4C268DD689D64865AD4A8DEBD0E9FDB17142AF06D6009A0FFC7D9AB0235E424A
855CBD2A9E75E29AFAF476B100EF0997855F6102028B06CD3BFB0ADF7B0F237B
89F9EE021B2227DD1AACD68EDB5A267CCD5E540440EA91FF4EDCC0992AD79D47
D1445C591A1A14D96B2D46F7B40AA57199681B46868F4967109CC75EB661CA54
E95EB4454981FD0F07389288BFF3E51ED613BAA0A3A91F0CE66E21D1630FCFA4
2763CBB550451EC80B1DCD77F112FBE20479ED81767ADBA230CEA0F5B5092F4B
D9306713E605A7DB2DBC85D61ADA5CF7DF8EC7251451C64DDA18BD3256784F95
587481284A04229D58A68077CE35CF5730656B592A1E3A9AA448BC45EAFAD7F0
8E17781B13986F6D08D432DB6384862E6B822C8C88AEDD4D4583395FCC2E7C16
11FC07A49CF1EACF15E6A12D40212C4350A9746BCB8BE4147EFD3E0640868619
514F62BD91BD6AF93827C105700ED744635406CF60DC00C50860DB0081E375C8
475C0FF63C8A17619DE5FD780701C11A2D0FEBE3D8B586D52F8FCAC54D087A36
9327802DFF0A29945D6FCBF9A7DCD199E1ECCAB65C6E114259F9968F48F5CFC1
3278D0B9E952893E368B849347A5B576F5C3504545933BF01C0E31E1A6A51E1B
2F9F239D53E6DE2135CD1C89F2B6FE866C7D10901464A7DF71EF0634548E810A
130EE2DA127DE700092DC3A74B9A98907C604F5EFDE49FAE1826CE1209DD13BB
4A5BE698AB29AF8224D02FFAA39719AB32B2FDA199C610D5739BED2629572529
A19B0835315A4154634B26DA12C0C729EFB3AC2547F40C4B2C321A82F1DF1119
BE207736ACFE3607F08634BB8973F3632043A295E20E5BF5125A4535A09BFD12
5E71357666762FEA7FDFBE1D5A364A21361D9B6A7B9CFDC18B0AF1B45B2C4EAB
624E74440EFC9EAB6F3B2F0A8B5CF3CD6A0D8D912073F6457537A6544076E7A9
2A804349074AF8FA0D43DD93C222ABF599980B0E570796220FC2B93982773048
6DDAFE77492914514DAA2B91215F2486BD329594513D3B51EB39E1C7E54EBB50
AFA4C4C22FAFF18600AE33909142C0220F719827776D823DFF9B27253F9B5E40
BC7FA8D11E8AB5D0FFD6A165650BE118AD346937B17D6A6026A1F39941061598
C842383307F08634BB8973F3632043A295E20E58695F6BFC7B1A41B641BB1A50
6B03CA1D19CDA46CAFBB77243277ED8B54D4DE7D6A3A8448E24AED2400613EEF
F3CAC487959E495C42FBB229C405DAC95467ABF9FA73773576794B4CFD846EF6
0A2553E618FF54612BC5BB9D7CA119738ADC24D7AB7F99ADD096D4EE41CBB53D
533B337A1CCC9FFFBCC6B835C972FFB29E30B0FD443AEB91505FAD2B3F6DEDC1
47CECB18584053AEBAB9AD1EBC4A10FCA6AC127441BD7F65D06BE9AC803F9B08
5996B99730BD1B359883C98733903EE7475EC22B7815615603EFBBD39715F12A
08851718FD95B540A75DDCCA88D2BC7C27BC2F5A91404CF583B97F788A60AA13
D3537BDD9AE53236D4DD320B3EDD8FCDF7AC65C16BAFD8D4B2476BD89BE20D38
9037655E07CD202A35676C071F4EF3E84242BE3B51EB35136871F1151BE84B3A
F40166011A3A30FBF5EAD2922C81D19199B92E6E63BBBD90F2F142C2009DE079
C9B7D4980F2C2FFE2637293961F1AC4E279EEA4D1D24096F025B5C24DB390B13
DBE7D33AD85C6A57197DF3DDB27840C7B5E0D5B780C962D5D7BF4E5DF1DB74AE
E90AF8E242A3BD1FB35B43FA53878EFFE4E9664F00B562B0139409A34C1B1039
20420120F10414695EED42E02E40B51A4911173BEFB54022C02B552742134184
4B12AB3074A7418C47789ECECE1881FDE8971AED5C83E61A5ABF89EF17F259FF
84AD285667707177C3FF626663380089C1C45882A95B207006B9F7E5E0F993C4
CB313FEA2D98C932CD97D28D5FCAD3F3FE409BB96593DB6F81CD1BBC4A234FDF
FE499FF4128C0D0A3BA8943478FAB7895D90AC79CD2299E30D71DA4EFE6D0A51
37283F3A63DD10D19BA7DEA188BBE105A3B3334814C8AEB668A5DA9B6FBAD028
F92D0A7C89305D29378E3A730322B176195BA14C13C2C86745DA5197317C7F38
1777E4EBC7FE7488B912B53B37597B2A8076795A99800C7B103AFB7754DBEF71
A8D40AF42E62742567609F501274CD8D64AC7F49AD3F61B4078D6097D8F91960
72754C984644114E979F4CD9473FFA766D769B98209D5ED71560CA09E39E2BC7
24097E5F9DA482AFB2D1E1A0E9700363F3405226F4590AA858588A1F79CC9DA2
48CEDA13DC59B60614C2D7E72FFD2E71F2070927DD7A418B8298E0890B6E5D5B
346A7DCD15314E1F8DB67D7B0B8D90668ED326BBB1E287BC63797C966D5A4179
703CA2EA9C5AA795BCCDF91AA918766C82A978B73139295BE7D8CF52B808A455
033975C5EAFB93D80E70EC7D957DD11789AE917E61CDB10A418FC94DF87D954F
F40A24FA21A2EDC0D5B9FFDD05B8EB4B11D5406993E34805056296A762A672AB
1CD3AEF872961D50F182C5DC6AFAE0900E12C339FCEBDCBE9300AA2D297ECD59
65081E7628D93B1F575015DBE8F6ABEC13C1FE0A8BC3D2B8AE152EED246F0B9B
F25A6218DDCDFB1C5E2D089DEC3F2159EBC2E07D23C39ADEF64D071868A4CE3F
AD0D70EDB1D81423299432640745A0AB63A080A646B094F3FE802F09F5D42D77
3502E24BC287864341E914E2DC5FACEF493B0DA122F2DC296595E10415FDFDAD
E4CBA28D7357F4B8C82D4870FAFC5768D40CB8DBC834AA712B7BDD9CBF4684BE
C046257CAC1B8869DC7A42EF9D884F625072F22E721B88360285F864064C490C
10D34491C8A266242C7428945F0B5A45B42FB15C6F50C479AE378575D0DB29A9
1B4033B85057FADE224B4B019DA0A94847781D1505F0ED7FBE021F9733020818
0432BC91247F4BE8EA33D9960E802F1CE751D69461BD7A961AFC377DBC9B0829
82ED681E2C0D1FFFD1DB7157B21DDF61DBE1C6CE05136A481B2E0BFFD4778E7C
6E2AD0C3B36FB082DB96196652FBBD27B67D059220624721816549DEDF781D4A
95D9BE69771FB9C362E00FA60BDE73DFB8C4127D69EC42D82A3DD8A65E358F53
C5E1247C1630551E50DE50B9D00357C70ED2E46364DEDF5FB2BCC60DF226D68D
5B171B8A6BF466CF7EE1DC4DE736760F5CF3B47F7BA6BED645C18B7DA97314B5
BC3C7954B5C60C5CF3EE582D0048908980BB7419C397B0B162246831B0A322FD
7439737BD2D74C3C67FEDEFF16557D69AABEC7E1D1A3E63136680E8692939740
A3F382463BE906375A80C294664D0871D43F3AD23CAA6AC4AC771A7B5B159F3D
1DB228021ACD2D067C2EAB9873E482B0170EFEF25CD19CD4E37363330572B69A
C8853DCAFEDCE725943116D297C762DC69B1FC88D6424727F622FD72228AC15B
94F65A83395723CDD988E12AA417331E4FD863C8DF39C4E969E8BAEDE16F2068
73FC2B8CA7A1DC74D0311D3A273FAAC4DDBC99597247DD9C70F4A3DE364FBBE8
685F311F7FD0CAC857EF9039F08B2F2F1B0D49461009112E1FA09CD8D54D76AA
179CB516D72B805BAD5DB15A73B6C77622DB1BC66DBC4DEF9FEC4D3F80627C11
9AA2C480AD837EEBB0DA28D145BEA2494B3977235DCB849F9F24110F0D005E36
4D960F714FC31B8B2714E583FF297996C6637C885632132FBD3B8C30CE9AB586
869DBF470532E692C31077AA7AE8769C9F6FB84C87A5298E70D1CF6A46336ECD
44FD54961BA8A2C3E26184D68D5AF3521998DEB5E794057AF9AC654B29BE59C8
8ADEC2FD8D26CFE7882696273B951CE6C1A1B8D8B01ADDCCDF489CC6FCBE00A4
ED5CB8BA8EA1605589918EAD247D0D69510CD93D22C07698F5410F995D3E91C3
63CC75575DB661CA54E95EB4454981FD0F073895115CCEBC8B023514D37712FB
DC504BF7FCC3D234257FD3DC31B3320EDAD8CD3CB427ED5CFDFDD3AF8FB48513
5834E53F28C04C102BD812E1F06885DF20795F8CA81A98FE4CAE857B4DF7C38B
E9D03BBFC425440BE90759878EFFE4E9664F00B562B0139409A47C4EA0F8B29A
013A93C18E961663C6A194E2D51E9656BFC60CD543C96380CC5FD12B82B8DEA0
D5D1E699ED753593F2B6373BD745341F46088578E34678C78036B255BF4DE0CF
08FFB050674B58E05684E9A79FE1FA5151DBE8FC504FF0A5A04F8A95F165320B
8BFF904092A8B6845AA15A81595D04920296FC402463F7D6050CE676F06EE0CD
9712B37381590E126CED7225C94F55752CF0151755B14A8A977E2CE8FEC755CE
FDACC6BBF307AB4857B6B5B2AC21BF5252C84E8769E1392BB54DB565CD42DF90
DEC50559B82FC4E72973E9266C9D37589111F5425FEB03EB79461F63CEE3357E
6B66F8B04DB5CFFFA49D84ED7686663594976F9208C6B3C19B364B6FB13C9073
DFC883AF025004585BA5BBE19576ABFC52C4CABFC8B7D57D8AEB1D6B82C13720
5DEC4DEE9F20BDCCB31A8E2E080F977C5D57FCD85957A0D594AFF8C59B42D832
ED03DDA8E7A138C313575624E0B0D8DD8DE8E6B6EDCA297EE6D1ADFEE69973B3
7455698C10C8BC40A31881CF70EB9B4FF87E85E387A248F2EEB1814F28DE13B9
74FC72E1751382871876B0716DE6BC5E1030E68F282E0F6CF621B41C6DE0AD92
E4D5CF25CBAE9DDF9F4A9EB525633072B651C69EC737771805121F59D3E1603A
EE41404922DC42850474B126D19A9992FA11CE987CC9C96160C71893B1AF0F38
FCDCB573C959B949C40754E7168A791E952BC6768FF004AC3DBF1402BF0E6F39
861E93E8B4E0C28048609B61B4DA5B1CB833297A176E3E2D24DA548C28E164F7
20509CBABF8C4F0D045A0A84258138695DD51BE2A4223B75C7A15FBDEE6BB51B
B91BB31F7CD8462BDF509BEBF99CD2D91DD10CDEDDD570721F1070AC2FD4FE8F
4088A4DF07E63147981FA08A4088292E6364832CF39AE5C6C6F2DC4924F4833F
084FF7020D3828BD4FC31B479D9917E1CF34AFD40E399CF94995907AA2D58B28
357F174C64545F979282A54E58F149C2EEB29708992078FBCDB637E52AC2AB45
A419D2CC6D45AEB4318FDD9A16483BEB00217E5324FFDA9D49289F9FA56B907D
4E496BB4EC03B7828DF64EFC0A8C5A0EA608F8A12C4E658DA364FD3208DC56FF
5EB99B4A76DFBA122CA6707EC346530E9A0828FC2A6D8B6282684C01793262E8
20E813949115DB90A7C3546286ADC60FD3849394B958C5ED205EA1E202B6A004
DEAB37B26010BB2EC1D1392AAFC8B6B21A54214A5DDE0B23DFF34F9520B3CE47
B5C1D853203BB72EBB272DF7D1D427DAAB6C1D4B56ED6AB6814BB9E1AEE8FA81
C4427D1A4144463E839B7B61B0A7EB415CC8DDA616E5A6C2CFFDE0CC8C2F3ACB
06419F5A7FE71C5274F606E14399F08141D0EF22BAA768F5A9F93690EAAD13AC
D5A897BA7504ED5EE7042FDB41A84F8CF727A380768EF791C59BB8C7B93C0E77
B32B4863BA5A8CA490BF8F0D1678B01DB11E3005F3FF7D17B12139B35D0CF655
EEAB69381C9B2ED7484E3716B8EC002392BB80D58C28398C97DA2D35FCF22EEB
85D35E074527E26056B01FFE4CD94D8EE405956E3B9D418C4404521CCCAD6FCF
B635DC67B11FDE2AC1E48758D6DC4C9081AF95E28E33D1D5B53BF96FBF800169
C695FB6E74B714D43DEE9C4100CBFAD1CFC7725D52551BAF3D2187685FC5D964
1570522933714B300421612964B30CDA4027A8395FB38F1221ABCB6364E90F8D
1BB6773454E0721EA23394926FE5D82FE4CD1FD4F3BBC411293962605C451EDA
B35CBF3AE4164E6FD3873345D2F945E28E9C82B00DDCA492C687D5D093684980
219702064A30F3CD8B808C29E2537914886C7A670D6CCF94A3B451E6C0F87B4D
9CFE3440E6277DE878D448BB25079CA00FB20AD59BD545E1FAACF2DC45FD9A11
0CEADA4596B2AAEA2E533AFF147DD5A48D67C0D2737CE838627121BAA768F5A9
F93690EAAD13ACD5A897B8930070482597F92C1E61C861F9E8D0E64E2FD9BDAB
C027F4C52EBF08F6ED842CA3EF545B7F599345B53864DC27BD34EDDDE4A8ED2D
9B82790D00996A785B1E00A91B3EDEDB86FF98C40FA889A9183056C8FE000CF7
9D2A7B60645B1535CF943BF2862E7DA76FB776D74EF8C2B242AB5791B8989130
CC537A136FA03D799029CE01D0CC0E22DE169D7BF0F9FB94D4CB4C56B642917B
94466AE2969E4B1F89B9D759E533EE00260B500BBEE867E909CB1D5F114EF54C
9BCB476ADEB2AC0E6139754F3CE819A7C32CF3B245BB93DDFDC2FA2DABE2FA79
D170DE44B561BBC70573B3713F0BA12FDFFB63E0F9026E2D25FAD89C6D95DA08
A11B285ABD80A941E985E1A49836009D57A2A48E2077FDDCF0DCEE1463B50C23
D25D87FF1DDA05B8B2A0D6F6D4C155FF78D7982EAB0BA65C597DD3DBB3B08572
557BE9E9CAB7F5A3959D5419D9487B589795CB99776F2B290671E1ED55FF1E77
764DD340E78068A0660A6FDBB0B23FE7E142795ECB59AFCCC0E24285A33BC2AA
549F9275AA9AB337E0ED236C4AD7C698D46DFC711ADB30AF5F9D5784D0B66AA0
C3A41FD6659C451B722ECE9D1326C9D3A7343DB89FF61C28B4BA46BCEB1E9E04
36DA0F26DEC6D52D3F1182C98D47CD1410C601C409B9B5C861DD25B3FF6A82EA
F77EF6963815C530B2F2D8814677F046710E0E051ACBDCE57F21C5B4B0EE24E6
1250C5737A6818130BDFDE35136EC27F22CBA45506CC27B0360C0CEC83B2D157
46DC7C3A1162682A719BB7B2FA05C4AD68138531D6EF259737F27B3A81A56C61
9306C9DB8EED4E05E21ABCA579E29D2E3685D6350B12F94822CCEF7FB70C597C
44898FAC955380D2BAFE8EA3EF492858AC9372C9F19CF7584FD903EDE28808ED
E34634F086ED6593632B5ABCF9F440CDD24232825AD4DB8FE9CDDB588E6392FC
1CB22C29690B6E6DB809270BDC40CB9AB1679B6D6094D05338B92645C49F5B79
0895B0B9DB4EB2F6EBD9495E12E8F0EBA2C58BA5E1551636D6BE6EE9B793212D
4DA46741AEFAB2C348CC4C685CBB70D2E2CE7BBCBB7F504B446CF999E83FAE19
11146E3FAEDDBDDEE09F95B8BF5EBD8A35C72A1C95BF082BD14057DFBC3467DD
5C8E1A2E0BA23C6B24878630A7E3BD3171492D58D252E3FA2070B0DCAF2964D8
2D9AE27DC388167AFBB4B6BFA4ED0F1515BCE53148836C6E111EDC92D80ECBBB
D7FF7DD92DE311A9C1D285F15D9FB7DE056AC3DB71DE26382A9B2CECBD58FD43
7820F9B14CC64FDDC47DC8D7AD29DB7934118E926046C6A82ADAE5B52EB05F18
682892242981E9AD0588BFE9EE1C31949CCAB639F425F612E81F95247E153C35
4CF4A47143005A0C545A3CDA79AF22AF3C69EC48E824299F72C1DCA1F8776506
B2F15DBEC93E5BBB0C9016E84FD89D639CA2A26D5DE5665AB61DE47BECBAC431
1DBBC2F811A3C0E2046C3F84AAC35B02D4035E51371E4E059CA62ABA6EF34478
8245856108F8E1998E936A89DAA84D6628BEC6803796A28C51FEA223A38AEF35
39463C29BEF79EC524521A27AD95A88EE50963EEDF585D54BBF853D09A28F743
2AD54B62985977A4F2CA9A23DBE6DF2574CBBF7165183946BF0855A672384006
F37E3698DD216819E3C86A6D4BC32776E8902838DC3B4CA8F027AAC3DFA31C3D
94E8F31ACBC72DE8FDDC044F75DEA0EEDC9479BE910C946245DEB1F10DD24AB4
8C2A3A5BB61C805F2DDF3E221806D7B4826D4836891695920917664559BD8C8B
15B696B27B74946962DDD4272CCDA13608EFD1AB9CF99BEE432246585290E0B9
3D4C6BCD6E1FC7113E9E64339B783835D7A483FA0238C58C537B30E48F8FA7ED
8D22ADD6648E619D3A0DCEF5F96C90C57B48C91C1B998EC257081F069ADF47FB
988CE2308BCA2AFFC045E5974A7C56EAB8F3284CBF2E1158F056E446AC7E7241
3CD776F6C050E13EA4209B182B0A5B19785C8A5D4A41C1D2BC815E15362D0FA0
261898725424EE291F44280567A49FEB53706C8EE07835D4A69FE06471A569B8
3D1744B9588D8D8BF33FB94289E2A033C261ADE7D689A3882B77C772803943E9
D38B7F0A59491D87094363A61124EFAF34CB384D5F7F5C0316DBE50B606F08F4
25598C2BFE5FFC83C48EF8B883201544DC7A3E5F8D278370259E0D5674D8DBFE
C49C4BD2E22123887E435E17AD2E2315AD800EBEE4F2D21188521D971DF2414B
1899B0597C5EF83D6C3E57E1F2EEE114CE20C2ED8F04F604EE545AF1B4C5522B
15A07E9ECF4FE4005EA52371C3226F2E9E0D55F9289601D570E1B8C4A6C01F93
17BC4C9F63938E88CA35ED1DA6C3C5509C04A7DBE3175C82F28A512C02B8F643
2B57E55D5001B8E3306F74A768CD457B93119F2BC86EFA695A95B4313936E9D6
008DD9DEBC54EFD5548C48E8086B782988F59BF0193A648A1665E1D6872B1AE9
139C2A883F9169ACB97BB0F9A0AAE6AC02881F3CC3D23FE9A6732800C10C6DFF
0C974FF8AEDA1D0EF54BC676F41C5E45B3D9FD387AFCC84723B22E05955082E1
FB3C5E56397AFCC84723B22E05955082E1FB3C5E57FFBD4F650204C2A82D852C
8994B9C767156557046177B2AA27AA75650661A7B4AE113693E2A2EFEB3CDD57
CE9FF4E6F14E8394E32E2818087A03485AF5AE654BD6E43146CB020A9DA242BA
B1C3A23B5301D236482F3B90EE25CFCE43E7F7718BC35C7F5A28E20FE68EB5D4
1C502C9C098C71CBFE3F8F8A20369C250D5335FC05AFEA1B294EA5D5CB515BCD
C9B53F8AE0DFB44304A89475C66FC0F12D4B6E01BE3B55DE7FC1322BEF303827
05D5072107EEBAC269B4D125FC3B7A5EE6545DA9D2B311E6B39E6F4739DBD892
D328F0876B03D446EBA8C68A1C76B8A0E9A5FF03A437DD0B5F0F9D569A81F39E
ADA52203C96417EBB4ABB228BEE064F9EBB05B07D93E3E44A77EDA84A497BF49
EEA8A49F834B5601286712B4D3E7201D5FE90A001969EE58E826624B98A19C31
B9F51288987AAA50B06F85F072B966A6C68B85E07DE33CBC588367F403527669
BBA914BF6888BF503FCCCD62906508816366E7313E5C886A06C56C9B8E17B8EC
F398DF335F66E7F073AE547AD8B27B23BC422678791DA0888924F96DE45E2ACD
75AD98810B800086F09BCE54EA1BF630FFAC9E788A8C87311A129D4EB21A3311
8C0DC55E415833C72BF066D2865480391D61E30A73EEC8B21F3458DD227E660A
FB3B89C8725C77FFE71EE90CF70EF4A50D04AD9B5B45276BA04D2450D625FE73
C2D6F6FDDD16A04E2FBE9D22E5D39073FCD7EAF061EF9A517C3A4439C83E107F
0611BE019FE4331E22FB32A781EE08E5FB883C01806F2F8B55FDD9350F817457
13B5FD22FE7064682F3D9A7E7BFCAE7C793CC44311290CC3BCF7B574A75F2F6E
D58F26AE6BE96E23EB007F73A55F7A99286DD127CEA81A09EF3C1E8CABD37E56
1DCD7CEEF8BB47854FE60369E31463B6C4AB62E38C130564BF28B88C720F2C4F
AD37B6DC6D77D0BDB06C9E1EAB1348225C7190C4072082F3A7EBD9537A0357B1
A05586301AC07E7B68541A0311BB840AABA6921E161C6C6D4FC06E57BCEFF5FE
273C0431C569B3F12944E5D07AEBB4D4FA6EEB7BAEECE62F49BBB48F381A17E6
C85BD7FDDB8145CE371C46D33F56C836BE1A589519EB11906488BE56D364445E
210A930A114F57B5BA47D880AB95B617ED9383435FD2775B6A5D49A05253D634
7C27783BFE6EAD553A520F266681A4F37C75D26D3A9290871D0A39ABEDE3172F
A0A2127751E9C7F9FB888DE57A91560AB51E8A856D78790961562D652082AA55
647E9B8EA55A038EDE63B84E34BE6B0C5BA9E28FF2CDEAA9250D7CCCCFCAD28D
18DA6369EA5C4EECC58E02755EDA2D28D2F0F3E76FACE032D575B5DEA4F4DAF0
8E7CEBCC6FDC810CB54204E71240200DE1B5A315DC6BF47C1B4A3D172E167BC2
60ED0E596CD2FF09E7A787826AB5739F9630FCCCEA4A1FB209DC179AE59E29F2
715C50F0FCEB58755CBBC07BA24772547212AE8F78F039F76F11F6AC99820761
F2FFB623075EA030A59617F9FBA5684EEA1DC423F5D0F49EDC8C4C9C50A8B45C
55E1B949A31C6B51DC154EB69F3E4B9DFA8084C3B64BBD871CED84D38D33FC2C
A559E3D62166DDC0C83854D45F3E8C5168CABBE0117524130E13233A54EDA46E
5206D47649CBEFEAF28E70BD6566614811A944CCDCEF246D7CCAEA6F908A3A13
B4DFCCEEB0FA4D0BBD325CA8D8155EDD8881A363686169AC4686EB7B589510AD
571D4D9ECD9E12114C8E8C5A1097A468F428C0D3B196FC1A3F2A4495BE7BEC3C
39C3EA34872F08E9A65FF1BFDBEADE71D0DE7A9B79B2D8D9734FBBCAF55D25DA
55A04F01AB0414163E6740D4216764F53A9867FFD53B43FB97A6DF077449CCC3
AB71593EF8AF91E71430702F73A1F6DF7B4FA19B4CB1FC56BBA0151D42420673
401448E3B5803ABBECF27C0AAD52F75E9E3A65D61886BBAEA3D11AC0D12590B7
BB874D23B1D1FB3ED9CDB35BD6DAECF82A1D7750F557EC4A5C7CFF5E2A3E5E4E
6C7E26129B8BA271DD6F53F4CADF45B32EB9EA26AE7D8F1FB4AB0C31A5C4DCA6
3644E536EC77A07AE6DE9DF6E9B93882994FACAC7DD11E951009D901F6CADFE6
2C391F52BBEBC870F81144512F57576F20AE6097C7A4FBDB82C06FAB2C600699
FBF3B619141C27097569D813E8FB251B3742FA390353C15FAA6F7B4262F0BEE8
3A12A5C7BC12D5094ECD13F2577F697F2D17292A494759642B45FF3797354850
ACD876D6D23382FA83533015F91615ABFA5B59F589478F1FD41BD0532CCF2606
8CD1366535BB783D29DB92310C46CA1A20E91CB51D2B22607E1F31C019C17D22
DB84BC9D810779E16E88A263629C6C375ABA39B4980515BCE7B2A5437B074917
0D2945846911A3D8AB5534CA4C246F0C5FD3CD2015A561C8D435F445B370DBED
DD16AA297732D4524B34D8992186AF6EB6873AB0D27866E7E1911313205B214B
B42B6DD39C20CE46CDC17758C5E04F1751E4DD3D4F67EACD436D4422C2D317D1
7A9F1EA7D6553494EDAC87F279A7F71D1BD6B85B77E6274E9D40717B747B3BA1
0EDD037D5C3FE2BC9CD49F901FC524D48B9B1CFF5F6AA060CEA042816BA916DA
1540A9820E8FFFAA3A716151F6E7C7C7635C3C71C870E2F4D03570FE4972A46F
1CC11FFA7D72E763B487540BB51DAE9592F9DAF0C79AA804861B657B480F336F
7341E609CA5E27B13F886D3D05FB72DC6E795E51788BF418724AD7157613047E
AB436520A44289C3BABF5DA290E875D762DB6199478FDA11861AA567EA6E7474
4C42B434EAEF1C5C517FED084B76C9BB8BEF6EFE726C56ACCD4E1E4F262C883A
73543734596699171F47A4E9C47727CFE77B452D11BCF43C8E0548EAD28C23A8
EC8A07EFF9033BE9BEEE79793265EF75666FA57B02C9F5B7BB957CDC0967AC62
6BEAF721C36FA673DDEF25412CF0DEDE818F5E66CCE7C463F1E38A6EDCA1103A
24FA981C2512E5ED476AD160D15FF5603047B73BA735CFCD93112678869F9D11
CAF03145D0EBF96AD373B546D16B296C47521BBEDA0F7BAEAC2334609D8770C7
26DCF5D53FA252386B7E2B852D6CB5B19AF341755F6344D9A9FF3BB3987F7475
D676AA3870ED470C49370C4B7D4AF358F9286B8AA1F945BE7D8F7A6BEDA81594
8E5B5E23F62CE18536E2DF4A0A6826013AC84FE9650EBECE8AA00F269FDA81B7
004248C626E64E1389699879C32CCF86087143AD2D7FAC157A147A022585E100
F9B6B473BBAD86DE97EB2BD843A5DE853E772A42CE1DA35C764B8740B5D1C8EE
49DCFE3F00C5BB3A3420146DDDFB41685ED11480F436D632A3088724F73F732E
676EB53DEA1B1DFDA3ECF14AC1C9D83B5CB3832E9B0F0D22B1187C1B15A1B7FA
53C9ED4DA27A03FFF7F19AFFA9659B9A3D0E5D00FF194EE62150B4689FC0FF82
10FF10A562CB14D466671B2B788F5C9DDED4DB8C8DF8915A693361806B0A5F7A
74BFFD4F2AA8EB94830D4806C134D4B3BB4503B2F44E2FEF669D0FC89585BAD6
B23814F1E4259C208C0F8DCDEEB8775BBF59EA720E08A4CC58E599F5422BAD83
C62B6A88BD16F1E3B5330CC50C167FA28A7E650EB7B1D2944E7510DCF73DFEC9
4E00EF85C03F16964E53F7E809C8D5483D4E3E26FE504620F7379CD3E1190A40
B29A68FCE22E018CF122C09C7144DD96EF051617D051F75D4815B18114FCA4DB
C0A47E3ED6369B602A6820F21D21FFBF28963C9EBC60C66CC4FD5FC02C703AE2
C0BC3A2BCE2B7EE6223701D905200614142646423301F3FCA5D8EE7AE42C1ECE
7501BD1D55A00B7CBF4E119E30EB55207A02D81A19B6720ED005B16A244B6353
F8D6B0165CBA24069472DD6C19D08C25E591EE1AC1E2C208F2B1C584E64E6B66
BCB8909CEBE7390F15B82DBBF1DB46994341A3777E79E0171FF389EB30C3CBCD
6EA694886A5EC17966CDEA0744101471FE8C18DF4A3560F8EB27E9876B16F44C
81D5C2470207B7794A8807787BA056BB81F03F482C8C3736C5BF0A068F0ACA36
910F6C2E9DFC0045F0F920AA9476B3ECA0C85C9BCA9EA7CD06B4991A9DD76005
01B8FBE59C3473A98E06C047910ECBBAA02E25442FC4DB96C15B18477FE4BF6E
ED5220DD7DE1867D7C5CFDF28EDCD2378510A3404399954E790DA67887A5F48F
95DF296AD8069F97C924774D43991D2E543C32A0621D6F3D39D572DB969DB77B
391A7C87F0B8C20574A1FA2FEA685E88530EF0B955E59AF17B76D7B147AE0428
B2024E154AE60471A6341C6AF1D108A573F2DC8C72234D0D5100628B03A41590
FA30DD9563A21BDE7E037D4C437AEC69F92A890671A85AEF5068E7176101023E
68DD7980ED8B94A532F72FFB2F1957123E7A3A4728040D89F95DC7D42DA21757
1405F1C074D4F16F9D40984979F0389CC81875A3AFC7C565D67F4238952DC78C
E476336155A8FAFF09F4FFA93301C679A7A26B9116174EF8B94FD339567D7177
CA4358E2D206A01C1302C92BB352C87A77684AD0A9CA943E522342753FDBD1FF
4AE01BFD89560FDD34CDC2B76DF804EF632F4D54104FDDAAF375BE56AF47F35C
7EA2DEE688640F8866DF74733D744709585C2944C330B781F59B3CB401C9A267
139FAA07A331D22BC5865B762597372D77A74A919FD4A6A7CB72275E476AA4BB
9B272A59530BC1CE3F75D7B6653DA44C4875F78242D148D564C8D315AEB1EC28
05E1C5602F330A3D8FADAFA8673160EFA45FBE3BA44ACAE47119D79CB349BC5C
AE8DC7E5A8F8FA0CA9FF50D03EAFF3F55E0E94F3AEAF6C955B733EB5E7DF9922
2413CF9E1059BA3B82E877265F613554ECBFF3A058CF327A7A42EB9D3169F8C5
D6A158E9771E69BE9B771A6E022A1C3816C29255885DD337DE2F7E95FFCD6DB1
4B3B067FD41E3065AA548C78A017405E782356A94820B642421543DC775FA86B
D8EF7391E1599D5BC85D7A354BFFCAC8BC802747F5A501A02B13493C27EFAEDE
E584551583B6A1DC39C40FD37EBAAEA6E46A52F2353F195C6271DF3AFCC070EF
E54CA835E2738E444B9F0D0716928756FC9BE90C7260A8F82A580A026DFB8A0C
17BEC5F13B7570D856D3D6F9D10E1C74C825AFE8B96245A0F67A23728AF73EBE
FF8F7970CE55B51EF8B7C2226896D515C595A962D9927C175944CEC2AA1CD282
3D9C0B0D233256F8AC29563F7BBE4E9EE6368E570964C9054B9FF58344316BAF
B51F86F8A8217BDC85CB655D6B264F2F3C07D7961AD86A0F83CD9FC9E2E06D5F
77F5CEE8F998D4E68066D9B6F61691640BBE5DA16B92FA3C3BA89475C8CDCD58
ED622DD4740C0598FDF9E42A5F64EADD0129E5C06469D73E708BCCCC03EA003A
665B7E6530E301B4D300B1578B0EDD50667DA9784185BEE7B61303C2DE3216EC
2A8B5EDA5D7E7A765BC3B3004013C1C4FB96328599CD847F231C5152CE922ED9
879875EEECEC0DDE35C1C2D5B7F7EBE4C9A81AC805C53CB6EB81A52EDCB91E89
0D0E956FC4AA9523C029D5D7D8BF14474D60320FA0FE0A7063DD2800F965C62D
D4F4324B6D4F88E2E2EDC89F778A301FF0D080CDBA62F8B87EC994D3049706CB
5FF8EC37092ED0A9364B69D7F91F974FAC8F8ABE7271617DCA628632337E0705
092783D66F0F50B55270EDBD4324CB1843C18600E19ECF4626600B10AE46446D
7A6D63D71FE765F55923903208E98AB8ADAA01A26B89EDF3E36BEA6C080D5EB1
D04B6F0324CEF9A6A551C2DCEF712EA1FE8AB02E7F522ACBA51836956E4FC7F5
1C3999433888A3FFD76EF7C273DB1BE1CE60BD94F28D5EB1099C5F137BBEB30B
BE1B723B07205BAA3E15F3150FE4C2AE4B9E9356B10A08140D3D68089E3A80EE
80B36DFBB5638FEE26D3502D6A23A30E6E36968C8659D43098BBB94D811640B3
A83A36DBB8790BC43E8ABC7A0466873F1F7F8F93BB3B80C51FFE4B62F38F99A2
CF110FCCA88D299A5DDC48A269D832ADAC241FB11DA950F2D01614F69400BDC3
B12718A5980CCEFA92B5CDA65F2D855F2F475C5E9BB4C6F79EB00AB4A9B1B666
DAA85591806591E6FE5E5572568969CB812D659EEEA6993EE193DB060BDACFC7
83B9274F7486DBE7DF92D8C051516EE9EEF4CC55BB3ABB0E37660C7C103D4915
19B5F8BC9E9DDFDB255719DF0EDB778CE9186917E6488BF7469089612BC578D3
C85C4E3705BF0FE8BF5E1F9EE72760EFF229CA1816764464A7041799BDB336AC
4F5BA01053B6AEAECBFCE6C20A3291F4374CD9CD3E2CE0F6E7709ACD520B9B4C
47E0081BD0CAFF35F9640109250F66003E0D13665743834758576773BA8A9E2D
9A2FD55335982E51201CD0D3A0BB041ACB65B9E6E655AFEE782239AC0F45EDFB
E1B18612E3106460B1F79078144941369F39084CB266753A0AF5AB1F991B2009
B4DD28A460C862DD34E1AB8104C633D36E78832AE4A51C23B48A90EA766F86CB
3442AA05633D0482FA95447F8D8E94C47CB15EBB3D5B0DC37BC53AA53AC4E1B6
DBD31F593A04C0C7D6DA4920BD3F1F17406B45F007493B930E8999EF056F9643
2DA8F256A69DFAA5502AAA0FA2AF035F5D02F0766069A787F34A9479807A3A8E
8220C2FC0D7594847B364A3F36FEC0709D6C33FD5CECF193451B048ABD6CFA4E
591352831672486737AFD40B431C32FC363DB28AED7A009CF76B116F0162BF43
1ACACED6CCF86FFAB896CA118CAC320B4DD8293CE1579A0D53BF03CFB40C4E40
03B6887A21D5935B8F391B286B62DCAB5D46FD02DEC16E24B877FE8C3650EFF7
6222C6C82FC542FAAF93333E2A5D9AD29CDB1E64E737AF47A894E3332E598034
8E17FCAA33467C0DA4A116BFFDCB35E938E9F0CA2EBB1AC0992895B889381776
F5D4DDBDE65E84C51724F312EAE42157F9538D2842343C07B8B88ABB8D8D0833
BDF00393CB486780FF1EE62ACC3C66028556954D37C564B932A722EB0A766C68
94DA94874E501104AD024DB575F3504749FC7557982D90A468C040BFFB4C648A
9DBDBA6EA59CD863EB0E2578114C12F1BA77AE8EE703223258A771984C478BDC
2F40FF95B6849C0ECA39B970DB7C6032F887E36190E43B95DD4E14A49792B406
531B0A607197A8363156644E79D3210E34B853353B32E9328BCBEFD5428E480A
DAC6FBA4F43B8C4BB5D472691E9CE5D30FD8B30DD02E62A1BF8D1C2B596E3BC1
6C26476422CE54CB38A72DAD53E1CB3A828F887AE21B415FDE78634493E8C8F4
863ACA4DB3A5CF07C63F7EE74177B5B334108FD922C9F50F77B237D5781B1084
E18F47386DA5CB8F74B0F8CC6425C84D001A51C567103065EC661D783BF12587
691EE71F4570B9AF7CE0A277C180BB575BC83C568043D0E4A1F25D25149B2F24
EDED811766E7D2EB22BCFE8F1C5CEF74EC07CBDF9AF3BA4D6B84E9BE81F5020C
9C6D8A7112451652CB1620C06E7D94F74AA464E10D7832E446DEA5D0038ACB31
1863ACA97BBDC1FAB04FC879A6461BF85A440B9864E74D5BDB3CBB29F7E3952C
F89A1C96A427B9AE0CEDF07D263496EBD6E1643F070730D8EF78ACCB7A271898
24DF510F5722B50C78869A365632D473839A296DF31A11073D679AE2EFBB938D
93346EAF3AE8FB789C7531F06A114707BFF92CC8593C335061CE19C71790A23B
CA2D4D375C7BC1F22C796658293FB244CDE11DCE8C3778F91E373E5D5C3D596B
5B3ED60E4BFCCD31EC2AB0D7FAF7914A64429FB58327A3DFDAA4E3FBAC0CA1E1
F0B2373FB22E2EE1B5ED812CD2F3EC52CCA4635588E9B87E035EBD28B8F67585
A2281FF50DDA50D742B3DD3441DC391D2320340D2C653A150F13ED59C07E5FFD
3CF299956958D086FE17DD515FE0CB61A4A575AEB7DEF499C601F34DF1C5462D
FEA5984EAF9D220DF0CA73327ED6BE28336FB460063E42F96E4A01767AC5FF37
F848981ECC4C92B19D95A349D85E5803C606BECCC8E16ECDAC5F2B5785EB3E98
013BEACF50BBB915B41859638592C061C2BA0AEFF55BB315C6B061E77FDB3813
D91746FA73C30FD30332D05E62D11606380049DCC4561A17075F85976F9C212F
9A0E9B78FF583B35C8F097D8DCDA6E12B5218AD23D6DF16652BB836DB1017E96
CC1FFBE110527FEC24F662221378426488C60CE04719CB2385F7DEC39372DE57
6F582F60F9AC45D330511CC98469DFD4ED362706DC46F7FABC9A986B0541B0FF
DF54D1AAF7B0914CF416F9DC396C8E4BFC0B351AB04308D8BC9DAF29A1FBC5BE
AAA053BA8D3FAD28C3104E28F1BC96C18ACAD9F72CD90698E5C75D7DAEC7FF59
ABBFD2D464B6D59D491A75894FFA0388348F1DFF70265F613554ECBFF3A058CF
327A7A4B2E9D05A42D82FCF9F2A714388A9A15B7F77ACC390C1A217640C0ABE5
A6EEF665746752937A90D3113BA49498086E587B0EDF6AB622B94C04C501F5C6
ABEDC02D4EE27552546BC4F4C6710DD8191503E232DEB91F953343D5DB796F17
F976311A8CE50A8FA91F9B68A2AE149DBBE6ED5E289653FBB12BCC3BB2684EF8
27C0360E4B8EF9053116194E625020B56DA1BEA94D9AD5929FCAC7470D0BCEB4
36743766E3865D73AC6633379364171174FB24D77EDF67F5A853C2DFFDD6F839
0A07A94414987DB5FE6D07BC2122AE7DD3DE694AC27D5E787F70CFE71EC036D1
8D610387406EA4A91E28921CBC73CC6E3E70FA97FD6C2007076529679EF111D7
39015AC7EC6056EC396C478608FB060A2AD9BED5E8733BCB54E842C0753F4AB9
9755852FBEC783FD02FBFB3F45AF03F004B65B0209258731AA2248D1152AA9B3
AB8FFE856445ACA29FB263482196FCECAFBD4249D0EACD9C471932A272EFCF12
06AA29EAC385C9DEE25CBB8870CFF91C286B2FA680359E7C8FDCD0BAB32E309F
2B145BB8F9DDEA51D59DB2883387C755BE2384C822654CF5BC5D2D04709D3864
CA3B2B73BD9EF1768967EF8295F44F79BFB786246E9E3C0DCE037A31C0021332
427E3BF24E85C37669716F18A21411C420772BCDC438FD296B38FF4FDD4AE594
ECF1341EA72DEEE11D44C28E37BD09C34F638D8221772B3893392706CBA676F9
6633EB1DE8BCBFE2D67F9DA4FF1133CA0980633B6C4DFCE85F4129D3D220FA42
7CF2F59FA891E0B69EC4A3F43F4AABFBA3446B49843B508D7F77C8C341A1FB52
9EE12528BB63EC86E081B08C8EB80A3C8121C2D778E5F7DA6FC29C6327136471
DE571D13D190FAC5D193AD442198783BA82A9E82CB0863CA1DE9FAC564907833
47BE2C9DDA09FEDD4A7A8C42092FEE4A5EC0E39E0173DF34B06D7B9F5E1560AB
83F0A3BA4222F9AF72422123BE874F7DA7F9D28F3EB84C32883A8035B81C6191
E2BC7A7C1E4F3A9D5000616EA065EEC0DFD78D5C2303DC0A687F4A6CC3E5DBC1
D6B74C3531045FD8CE13A49F1701D24A4B780D475231DC7593B0D10847802356
78B7C9ACDABBEEB1741101EB11F38464FEEB562DCC8A4949A7BD674D7ADAB513
2EB14D5EADB9D52A6115E876426990C59461E86690C385E42C89D4B906997D55
3875FBE5E433C39BA9320CE6120060255F6E277C2607269B8992B8B0437D272D
B7C1C5F28F50845BF04BAF5C2B942B72A752F4C5C7C978D6EAE06B6836A688BD
4AD18D94622DD5DF4622240B172EF398AE19A7D029E70F1D17FE5B248B05F108
EC17C1F70B090C5C9AFBB02360A471201DCD4820D5272BEAC7FF68FBD047A342
4BD5C10D874401C5063DFD74AD771B5A222A8C80497067F457EDCA78244D0B32
FA2715FAC6F2BBCF76FAE1ABFBCD46925290932E879927877ABDD9EFC3CFFCFC
13A1628B63E234668688AEC87AF39D1D75D9E1072D4D4BC92F9748EA08E333B1
92B1CC0D45C7A4FE583F6A74C928BB9025796FA97B63F4B43B193A4D061FF970
6E24C0AF00B88701B58B320496C00FDEC0BBCAC66B5FCF26FBFE9495FCB31162
FD3E00818E1014EC40BCEF621BA2F39AF2ED590FCC5B0124F1CFF0FF1F0E3B0D
C0A67446B086D388322456A86C19EE0AF19746CB319EEA98C04049C4C74356DA
DEDC1B8FB3F8FA0096FBA0213C08F4E26D46FEF743C756A23824EBDDA50AA076
BF784B213539EE6135F0ADF709A33C84CE6F2E298B6B357AC2EBB31217124C2D
0D46E551364122199525D77F9DF706FA92C83D6E74162FFE244E145AC8D65486
384A4F127F45229B8B0E6F9B7ECC02A992E251526C07A15DA7B1A15B72133022
BFCE8A593AF3316DB69A67FDEC2E330C4C1E7B4BC36E956EE77FB70C3EE1A85A
A98C564B60FA5C65BF5A022AB2DE033268B0DBB7E4CAAD1F7D9D6AE30373FD06
D8336A7F8C638598DA8F2F8CEA8F24217AE93A114076A625AA7528E89D218F1F
6C46AEA234F6B3CA6255FD68AFC52B5A860769B2E06C60BCAA38656AE2BE8BEB
2B6E60053202A2C89D53C2F53F12EDC70FDA3EE2B1EDCD9C74D991BA34676B1A
70623D392CB0EE8C3C492955C22A3EF2179F32C24508EC7EFC0FA109B62820E4
0EB93E46EC19CA46D6A6DA0CA02CF272A68D3F963CC2CE742D00CB276097C6B0
1C9C280381E0223EA3D9F4C16E56A0329041EB85359EC625BE764127973AE601
0DE1C73EC40B2F44CB623A7F5B3021C71EF12B80A55129FC0CF8CF2D402149BF
7F3E93E768E65E9DA598EFC6A015BB3CDCF576A0689E9EA28EE3CAD249363173
03A859A14CA07A22105D5C6A8648E3CB947F083768C7254FC019CBDB6A19C278
DCFF052655B64DD2ABA272A94E1A850B8B862A716C42F071140254B72AC91B93
0C2B65DA5983291C3BF089602DD9ED792650672C45519DDAF6BEA9D87462EDDE
8B754984442E98414842F86F70304CC79C44C9C6E0967FEB9038838A5454CFF7
A7DDB93250698AA65E70DB3CEF27459CEC27D5F98FEA3576D091DC77FB0735B7
B7CF4529F6CEB3928163793A574820AF4E4785C25F3528E5F1CC96E65C46D591
718A9CA4B9A601761A5E224350C95D76FD21BBE305AD8213EF44204E8694612A
7793751E3821B95D1AE9332FA0D1D41114B05B40C3BC9CDC5089643986EB635B
3386E362EC7CB9A4007ABF12800B42CD21BBAAD7F22D53E867A5904361070A53
31C55EB5D0DB70D62671A5AC603A101F02000BE37CD874AD6CD39E4BBD805470
DD92832A23C34844BCBDB28A7FC7DE7066B675F1192BD43895723F609835D9DF
42975AC23916BEB031A7CF17FE688D3C21C5A5B719CEFE71042A0DD1879EB775
40A176CEB7756DCFCB0D7B07C6765B85F87A6A97405BC8ACF14F0AA747F7A038
1A7551DC366F76F81ED0D6CFE11B861C86EC5A1FE2F6E50D3580C54D8FC0AB4D
8F68C9BABC338BA19D607C517C35491E09E0E1DBBCE5C07FD0195D5E74DC1E7B
6151C3ADBCC2080B1EC5F49AF2051EBA0CF68295C1E09C6CDC28176D30DDDD0A
EB33DDD9400313850D70A0E7FC4DB10C6BF22F5D869970CD8CE3D80404F76916
47CE5A30AE47439E500D45388E67F0AE516B72E82AEFCCF76D487FFF7D42EC55
0438E7AC11EF30BF68A7B388149B35E97C70B11C523B8422A46CA54A7D71A238
66EEC0B930E8AED77C57E0A3DECA36B56E2EDFECB5F6E45594299C65967C51EA
BF6B67725A3BBBF30AFC5E0AED54074004E0F86AB49A84A934BD0AE37DBC2067
EC814CCC3D9F4E4903C267C70E1FF5FF01B6453F400A1A906F6B5A4DBDF58EC9
302CAF3A3585934692F20BEBA481CD267B46A847B5E077D703D392A084046891
3E65370FBF10DE1F1D17CAFE908202FD3F597C38189CFB31BD28018ABA71F716
A9513F8C0EC1AD99379847B0D88B53341C2F1BD111304A34AAAE285CEBD6ADE5
95BA59100B057B6789C3CA5FF9D0E0CD879B9C6F366EF869839BA984A38BAEF6
126D47E4E00E381CC3336236447471F3CD34554B7A51DDC7FCFC7E78807EEC57
8992C27127C310BB63F09DF48525FC03B9C4879345AD1FDCAFB91948802160FD
233A94697A3E65C61FCACDD36E447DA64E10FE9DED61B9C3B82FC671AF4B2C80
A52E0290A53BD4FF514FA2E7A04985FBAFC77F967B1E173A3F16ADA738C1E817
3B87B4ADBD5350DAF1E55A61A04D09719C82246C7F9AD687E5CE6882A07C54CB
74B523AA703FDE15479684B8DCB886F94D51A32B031775B8A303D88BA9EADEC0
8AD8B61695CBBE6677BEE12965FED7CDC6D14D39908498ABAD5470018A3C80A5
FD55EAAC33BC9D7F764E083BBA8A2D503563121427BA6B2531951A5833878A45
12DA72A6A92857E87B26F55C6A3A04D2F4FE43794FB6B7A57DCEA9747733BD3C
0DF71184DFFDC78AB2F471A38606AF8719646B114CA487BF7868D00A9A0760C9
7F9726FAF6C0C6A0354776E7148C4D4902A26A32E05F133710232F6AA1ADB8B3
53B1E67FA2CF4C383537BE246A952FB9025C340722028BCFF03101761D3A68F1
ED6A23661BF10004C4F14B992441257B0333812B2943FCB5796F576773E79224
88522C98DBC769F57859EC4E3E307C1B73D92B41C75E398D51D4B007151805E7
49745B4F1FA778D484AA4155586C1E40D07AFC78D88875305BA9278DF4E51B8A
DF515DDFBCCB55C9C030430302969B767AF62A5965A160BB04EB45943BF07996
3080A124D2D0BCE0834B7703A1ECE6EE3F4F91FFF12CAABF0D8DF26A74F7A8D5
A62C2EB14C11BB33FB7F0E042448478D3ED7AAE9A2F0A9FC55C277D66C85395D
5D88A2586DD2B4B06FB2D9428CCC53F77E4C73D4F6665C609FF0D5474A68FC6C
DFC9042320F0B5E22C16E703322277F70BE7A54E790A8A3FDBF8F1AF4E2857AE
1812A0FEA8F61429651F3CD4CB969E3303AD9C5FF9E675CCF64208D863BFC858
F6693DCF075358AFD573BDD19CA75A38253142C7AF30EF895CE4DD39B64ABD27
2128AC76197328E326BB4C311F8B056C72BAC8B8450C6E94664A741C6FE3A675
0526CFFF1A6C37F437C1E04A8D4C16FFFEEB22E19FE2512E9B8F894F77CD5D94
2000E392C915CA446B18BF03901F9F46AE10AE5316E328F75528C7FEE19A394F
6F70A09BE3536EE12E019A9D22859D17702F84B6576B342FD2F5A3EB68549F66
6DE791DFCF2711487E126103F76F44718A3573EAE69BA51D478BF53F4450824C
E858F76C4FCE705DF524F0D1B247355F1B5B8159AE6E498CDDB959B5D584BB69
86C40DE1FDE76C4A7E76F96C9F2FE3573D2416404428B95BB6A1F91E0CA66047
C7BD1D7C225DC0626663380089C3A83E71AFA009E64FB9F8600B9EDC74DFC883
AA9454CF99468E99CD518A27BDCD97679B95A95167EE0D8F09CFCB180ACD68E1
8C8694A3A60246C32CB14CDC13CE033E1E7EF980861D194A0A470DFFDC4A0ADB
476821803E88923DD2011627E030B0C06E669B098D551E75C9A390A53A4F9238
98B2DD348E217DE2197E5C951C7579C26121DFDF26942ED277F7AB2E72F981A3
DA345753FED57B69B8487502CDF96CD8F76EDD78BEDFD40049340F96DFDB7D27
79199791E55CD43BECBD46E339E95158DBA2BD4D3CAE8A55FE06C88BDD881581
D85A2B273D440E3BD010DF142AE4C02992B7D92D3BE4E77CEAC2194EC3FD8CA5
425EA40AE91080CAA7A049EDC710794EDA44CAA629955E779F2E9096720F84FE
61712FF47DEFB7424D672452A43EB1D57C897102852918FA0166D70429F89E45
7E5341A716200B83DBA7B83146B2914CA75B6CE47A8C036C5ED6740D79C03800
693DF0F4D9689C4CD4E02B3371186AA1ED2AC8374CF1A2BBD970F66929E3EBAE
54CB428D3B01E4775ABBB7EDD543214B6D978C379E33FFEBB1B84FDED3B64A87
34BAAD34C3C948C14D1650026EF84B6F1E4B622AFFE3B187395EF31619690E63
9977567D125E058B3DFDABD7F3AE4C922884CCD0C49863DDD54C0282E8BBDD90
AB83465D88DC5A851476E43C7F2A30B1C9EC2AAD35745FB14853F2FF4AE3376D
3D64D6510F71C5048D87E6C0B31EA0DBFED0EC4599BB37CCA633AB3F87415805
47B7B283718E0CF6AC68B3811AF02025DE5CA8D7F86B434C1FA9AFF1C53C5219
96E6A6DEECD51F1463A922E378F99D97E894BA973BEE103D4273815032AEDFF3
C852740AFCF7D7AD660B63578B3BDD77FCA1F3D3D32724A1E854267ECFD4F3DC
54D583F162298A018203A0A52A10E017E8C804239B220080A28E4CC7140A5DC5
6BEE34291027EBAAA1B9AFDBDA155FA928CDADF613405FD339E02F9050BEF869
2E25D439C9370803DE1A88EA7C4DE6A1352BA4A931725098C8238E7DC2D55C15
8F055E57C2FB2E1B43B981A9798BC43F1532226A093EF78B72B2DD013FB502F6
ADF34F6944D5721C6E1799FF16A319C717FB2DA43FF1DC66241BE5F59A1F791E
1D5319361C73EB57B5DBD0A6F7BB1BE59E92AA7CF9812FDABC7CC84C6BA39F26
DB2B9BD0386D4FCE408B0E47F261ED153BC696419E1D11682831293FBC9BA068
E64FB833A5974BBDFA70075A922C01FC5F3C850C326082CA134FBD216D3ECEB2
CE8579AFEFA311AEEE0C6F70D5653C091F958D6A793AF42492F76597DF80A236
0BD535256C6B9912568A4CD5B21A988676F44BAB9265998FE9F9EA8C3E161F52
85F9B4E47DECF583BE0BBC7B5AE87EEC9595E8C6E7BB26824CCDBF4688319EAC
27AA25982F10592D528354145DC324849BF24261A56029B79C1FDB4F47DF7340
5FD1ECCCAC3C218CCFC41002EDE3E49CBE77EDBB944443AEFE1D2A10A9C2B6D2
FEC5ED667870BAB628486C69CF794D2044E9B8D7EB08995859EB85EDB5830C65
15C93D445D436906385F791731B903825C54E7C8BA614F62BA698A282D58BF10
0A9A5818D5A1793EB143864767096D6F5B59E434833A89074E8EB7AC38AF435A
BE472E2278A1B9CBA4C6AC77CD312F83E889421C7862C6E11D3942089E218EF4
0492927B450B67A984F6CE6F529A894801EF367D4DDAFB5422E8B30AF9E01CEF
E0E56A3EF490EECF12416F2ECCE78AEE68E5C4E64CB9AB6BF39DF22D8C445494
FB879005788A5B01855B9D6681A6E7A48AC58C6E8ECE9BA632E3157E54C10E9F
E96B1D50D076574DE45CCD543BCFB6389EA863F330FE0B68B6DC10555D27819E
7E035F67269013F651AA2E5F8CAEC9D19CA6372323ED9B11671701020C817460
440DD369D7C7695583E6D0C95BB0B12D82ADEEF2556B5B5E7DD371B5F750F19F
31A6EA21B51DE2F1FBBA1DED5DFC6C27EF2CE1FB1F743CA203C0B264F08BDDD4
D8BD12CA7EF18181FF17C4F10AD848643AE861663188B50CBAD741FA6D68B392
BCCF21C753515F7C1D718777D5463D3398BE0486B820266EE3A74432266F9164
4A3EB6E2FAA2EA239719CACC875032E159EA0E1148836E5DF9E7510B788EC336
408011571EB5467799A4BAA23AB19D71CDAA96392891C4050F5F697821F77CCD
728F3C8414FFE9E42327B1AC99645B05468A28C650E3F6C38E05B017E34276E6
36C8145266F6BB6670615D8C77184D6B436BE8664AC023D2D84C85ABC9D3D79D
33F8E349888884BECF691191D88E3360EC92395385822D64823A847925921AFF
53D818CA55A6809E0920A9BF967E563B36DA5DAF3AA36F719D6327C04980B455
1B1630B8CC47D12050DCC8F21A26F197A309C26ABBC4C25E39D6EAEE232B1F2D
551B141D9CCFC489CCB68B99958C92A64133024A5D562ED72A737596B25941CE
D9F550F97AB844C09A02B08A41A3FD29CC91DEF8E61760E4CC4A71CE34FB84E5
EDA48700DE770D89174DE274188FB0A04FD6C74F3B16A7561A9B83305F80C561
9C8C6C5448669EBFAF9CB9E5ED2606CFE0333B4EFB05D0D0D3F3785A070EF917
80431A0419D9579DC5597195F63B242F6ABE5AE0F8C80B693FBAB69F160E1370
F9469B108A929E556034AFBF73342EC447163E8C083BDB0ECDC694C0A0B81096
16C722B233136F9989303481B529E3E5D08CFCA839E2DF940F9A074440DBA437
589607416E24C32EE20856CB731CEEDBC421CFAC4C1716535B736C8CA8A18A5A
3651EEF6D3280281F1DE7FBEED1A5D999CF279BF9451CBB3B3F87D747546AF0D
13DFA3FED671F7C74A3637FA904C04C34E976D3D474FCF52FFE8D10D57C19D01
6B4B9C30CC1B8E826C6FF5F775FB069269D38917CAF5511820BCB2E11A6248C7
D92DF2B6225EF59FC9C6BAFB9C39BC0C98153E48A8EB87BC773D2549D6D74DAB
538C280A854F78A5BD7CFB60A8D474B57D63DE37326120F738EB02EF8FFEC0C1
906134B72ECF116461541E78CBDD6989CA491CE3DD9459D56F7301D1F0D491CB
8468B6C238BF6BD40FF1476828DB542F240EEAE5FDC59B99FFC4C87D544B1508
B3C348199C474FAE6FE1A6F82933AE42B158729829883982A56CC8DA8D25CA51
15B12725A193640971F5CDCC254962C6CBB4895B20FCFE21FC072ED9057CD1A2
8412C0F1034DD075FB88CBE5C52D7C027C268E750230D5045A4EF844E016ABDB
A0325F3739665F4BF4162592179AD62E0EA3277CCC7B8AEBD9108BFED4499769
9142AA4684167F7E934AC46E268823FE273A25C120388FE755A702436488F71B
BBF5DC1293BB79E1E4098AE08783BC676807272C853E7DE4A13DF4416E288451
39790DAC9C4CFD3DB4C82103F3792FBB1BECDCB23458C7C47CB42A7623E77D6B
5C58DBDDFA806CCCDF25D2ECB1C5E8F40682585F2EA2AD093DD4462352AD92A6
3D02BB937F8A1FF01B63640A3A678E4D8BE2F47A4B463ED10F3C634AA476811D
8DACBFC4D14CBFE8D3A82A97CB2FFCE88AEBBD88388C055D3F67B2BF2CD0F166
D1AA1806FBAEC86DC3384607CBAB2B6031841EA02F1A37058CE6B0F1F95D2283
8FF7E92558E579ACE86A0F60B852324027FB4A2BDA70D7019BC896485ABFC8D0
125D2BB343B87D745018E522AB7D63A8F6FDBBAF7DD40307F715DB714478C46C
2F36B17A65A1D9FB77649DD784995ADEE16B256B9203056C95D8E25B3F3A1DF6
5E9DD79CFD073929F2AE9738D0AFE7D585F672B6A12EC36C936559914ADF426F
F193765CC7C6304B0AEBD538E86283945C11C41A69566CD6357573EDAF90A4DF
0884D5F63C4253C69BC38686D62A4632A6863A81CEFDBEEE625BB7435A305964
4C302D4B1F64E0EFF38357C8EE45DD09D72302B8F94264318FC0572F13A5A68E
A987AA05EEAA7B8EB78D614A1CE333DEF60693208242AD44FD99F5E412B4135A
0D6069D9B9C7238483363104927A2F5415357139734134CA4BBFAD0EC565F7DE
7F981A5F158B4FDC193F2EE94A90590C86B70758B295832B4DBEF9C71B227993
FF2207059DC0BD55AC360D2B2E63595D192A3B9F6ACCCF21A55CB96FC7A71494
BF90856AFFA8F6C779460A557DB6EC4AEFCF0754FEE7709ACDDE63ED535C2E41
6D0F1D4605357E9BCC8F1CD804893E9C27445B721AEA2C795616D69910AB1A97
F65091FEA261303E1981AAD3B978E2C0AB0B0A65E4328D81FDB9B671A28F6DB7
209ACCD4D22C6A6F2BF12CBA05AACF7D2C32D6F10C981A7635545098076EF766
C13039ADDC21D5EE7862E76CF5A255489B2592E477D6634E6B9F0F06C6A555F1
C21BB6D6B99D3E2B447A23E123BF4D3E90536E57A18718DF9DFD4A6D13DCAC95
00F8B2B215E354A1D87A49DAAC95108D6B63B8B4A18A9C90FD05105A1A8AB1C3
FC4B85A9846694D6B6A69D3035B3912E97EA51C2C1B0EF6C839129F2AF35C43A
3AA87DE0BDB259CA69C45D56DAE8CE6D41E81967AF8767F701D55400484180FB
9E12F037AD2B30217A66D551D5021E282D0860FFFFB4C568B80486A220C629A2
75B74994368ACC4D7AE1DB8412DA270B66C47A84007B7A4EF0E2D1ADDBA117E3
EA8BE808113ED0689AC1D77754750A4F594B127D49BD89F6756CC6C841A448DF
5E185FB0F002ECED7E0BD1D39190CAAE9924B6849FCCCDCD840D64775AAAC915
FD4C1E444CBEE0EF7DBD9BB4C2A534FAF673AD06B9D983B2EA29ADCE43B2BA63
7FFA077ABC4EC065A0C9E84525E5CF769FA9A0293AC2C5FEC52D8E888DA36ED8
6FDBC0995DB49B2D8310772502B35E205C9EA0BD83A5A3F2A8683926F8C7E319
BA71AA89A9BD6633EC2956845C05C64A8FDBE302700FE7071B0C48B56B838711
50F5F58B57DFFC69134B85A8A8E988D4E43663527EAD9C1968A6F5BBF649D828
D7F8E17181824B60E6E5D4FFAC1263FE9F613673E8F101DAE90A39CD0D95FCCD
91A6B1A9F41AAC14AE99BF03378EA63E2C176314EBC437285CCAEE5B5B0A256B
7342414CB424803BE630194F20A0E8D2C97109795ACF3012080E9EC29A69AE72
9E07B9277F56B2D7641057D2230A0224CC4B0050CD4E21D26044B98C62A22451
959E35531E550EEB8856EE084BB00E9A83CAC3BBB00519D578744BC861EC812E
65BC8D73691E3438B7C8E61CEFB631F0C35C684EF4F9A7A19E818134667C15FD
7AA5C6E2C2668BC449FC118D7707E99C8174A71679C40047341932066C07483D
2507273831E1F5CBC42BD4141C0196A1CDC1733F7CF013054557C46310C90A06
9B3693B05B275E7B9F64EA5ECE742BE97B0BEE400391893D655F8EE1FCD8E370
BEBEC0D8E8FB221870546C296B1D7EF2B86E5E50667648A3A877138F39D83822
B114BAEB638C5D7F420718374A05C6144F6E053B5192C8F7EDFE65B21C3B1717
C85ACF493DF4A9AD325E5BC89D7570114D83502E6C1AF70EE37DD3FA9698F16C
FDD6CE35B5515272EFD94426E718A707F43731B836815413AD8913B3B1434E43
C614F5EA015EB1FBC9450AE76ABD356F528CE460E93DB7F57A3ACD234AB3B380
21A71694A009E85A66097F5BB065568EFE7EF86A26AA7C6C331195CDEB89A27E
700A7ECB9A3A11CBB2DD68B2619209AC8270308BDA3611536E1118A7231A3051
D0868685B01F7619BD613BF47C496F2801ED0CD4AF6D0B4B37E46C52A97B5D92
F1CCD835BEA8EF619DB0537C47F4B59F801AA8781A9E85A98549217D0095D9B4
481CAA83E2AF3FD31F656207F7610BF5D12CBEDB4D2F9DD470CE7D3C484E3219
B2E0A931303F164FC805FABFDAE760011B15B2D1021981A81B8DD64B6132CD3E
8C922BE888F00E4AC38BBB883AA210E386D8B8FCB635C4F5DA51326014F80F0E
0F3E54FE3A81C7F231F71BCAB2029020D434B164C8A594694266E7D5364BCC13
4340363CE53822E34E77EC74D1657B331F1F96D4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /a75 put
dup 117 /a78 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE8BB95E205F459A9C71796F7532065689D8E3BEA
2AC08F7DC5F080949268A5F00EEEC1AB269125DA014937D4644553A544DBC0AC
E8215C539D1259975B2AF9CCEAAD7A9BFD90CD5628E9041A934E4E2433BD4808
AD716DEAFB7C4A296083357FC008FE4378961DE665ABEDA4DEE2CCC5EDFA7967
8493D27FB302423E10309E35AFF9B42262469BA38BEBF81C4128A78759248829
CEEF4A9B9704F956576C172765EA5609B80188C3DAA0417A8455A23D4B22C072
CD3AF145AC793FB658C9A4E17AA93AB2AF1BBF421BBA03C463B9D5267B015BC8
BC602002D5FDF27B2D0ECFB6F7F97B5665C01046E34621F5ABFE60EA46F22A1F
A93B6F775F02EAED6BEE56352F2E26FBB41B8B5105491B21
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (C6-act2.dvi)
@start /Fa 255[65{}1 83.022 /CMSY10 rf /Fb 205[35 35
35 48[{}3 66.4176 /CMR8 rf /Fc 154[42 41[25 25 58[{}3
90.9091 /CMMI10 rf /Fd 1[91 211[102 42[{ fa5free1 ReEncodeFont }2
90.9091 /FontAwesome5Free-Solid rf
%DVIPSBitmapFont: Fe ectt1095 10.95 11
/Fe 11 117 df<007FF000000003FFFE00000007FFFF8000000FFFFFC000001FFFFFE000
003FFFFFF000003FC01FF800003FC003FC00003FC001FC00003FC000FE00001F80007E00
000F00007F00000000003F00000000003F00000000003F00000000003F000000007FFF00
000007FFFF0000003FFFFF000001FFFFFF000007FFFFFF00000FFFF83F00001FFE003F00
003FF0003F00007FC0003F00007F00003F0000FE00003F0000FC00003F0000FC00003F00
00FC00003F0000FC00003F0000FC00007F0000FE00007F00007F0000FF00007F8003FF80
003FE01FFFFF003FFFFFFFFF801FFFFFFFFF800FFFFFDFFF8007FFFF0FFF8001FFFC01FF
00007FE0000000292A7BA82F>97 D<0003FE0000000FFF8000003FFFE00000FFFFF00001
FFFFF80003FFFFFC0007FE07FE000FF800FF000FF0007F001FC0003F803FC0001F803F80
001FC03F00000FC07F00000FC07E00000FC07E00000FE0FE000007E0FC000007E0FFFFFF
FFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFC0FC00000000FE000000
007E000000007E000000007F000000003F800003C03F800007E01FC00007E01FE0000FE0
0FF8001FC007FE003FC007FF80FF8003FFFFFF8001FFFFFF00007FFFFC00003FFFF80000
0FFFE0000001FF0000232A7BA82F>101 D<000001FF00000007FFC000001FFFE000007F
FFE00000FFFFF00000FFFFF00001FF0FF00003FC0FF00003F807E00007F001800007E000
000007E000000007E000000007E000000007E000000007E000000007E000000007E00000
7FFFFFFF80FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC07FFFFFFF800007E0000000
07E000000007E000000007E000000007E000000007E000000007E000000007E000000007
E000000007E000000007E000000007E000000007E000000007E000000007E000000007E0
00000007E000000007E000000007E000000007E000000007E000000007E000000007E000
000007E000000007E000000007E000000007E000003FFFFFFC007FFFFFFE007FFFFFFE00
7FFFFFFE007FFFFFFE003FFFFFFC0024397DB82F>I<0003800000000FE00000000FE000
00001FF00000001FF00000001FF00000000FE00000000FE0000000038000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000003FFFE000007FFFF000007FFFF000007FFFF000007FFFF000003FFFF000000003
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000003F000007FFFFFFF00FFFFFFFF00FF
FFFFFF80FFFFFFFF80FFFFFFFF007FFFFFFF00213979B82F>105
D<7FF000000000FFF800000000FFF800000000FFF800000000FFF8000000007FF8000000
0000F80000000000F80000000000F80000000000F80000000000F80000000000F8000000
0000F80000000000F80000000000F80000000000F80000000000F80000000000F807FFFF
0000F80FFFFF0000F80FFFFF8000F80FFFFF8000F80FFFFF0000F807FFFF0000F8003F80
0000F8007F000000F800FE000000F801FC000000F803F8000000F807F0000000F80FE000
0000F81FC0000000F83F80000000F87F00000000F8FF00000000F9FF80000000FBFF8000
0000FFFFC0000000FFE7E0000000FFC7F0000000FF83F0000000FF01F8000000FE00FC00
0000FC00FE000000F8007E000000F8003F000000F8001F800000F8001F800000F8000FC0
0000F80007E00000F80007F0007FFFF03FFFC0FFFFF87FFFC0FFFFF87FFFE0FFFFF87FFF
E0FFFFF87FFFC07FFFF03FFFC02B387EB72F>107 D<0001F801F8007F8FFC0FFC00FFDF
FE1FFE00FFFFFF3FFF00FFFFFFFFFF80FFFFFFFFFF807FFE1FFE1F8007FC0FFC0FC007F8
0FF80FC007F007F007C007E007E007C007E007E007C007E007E007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C07FFC3FFC3FFCFFFE3FFE3FFEFFFE7FFE7FFEFFFE7FFE7FFEFFFE
3FFE3FFE7FFC3FFC3FFC2F2880A72F>109 D<00000FF000007FF03FFC0000FFF8FFFE00
00FFFBFFFF0000FFFFFFFF8000FFFFFFFF80007FFFF03FC00001FFC01FC00001FF800FE0
0001FF000FE00001FE0007E00001FC0007E00001FC0007E00001FC0007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E0007FFFE07FFF80FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFF
C07FFFE07FFF802A287EA72F>I<0003FC0000001FFF8000003FFFC00000FFFFF00001FF
FFF80003FFFFFC0007FE07FE000FF801FF000FE0007F001FC0003F801F80001F803F8000
1FC03F00000FC07F00000FE07E000007E07E000007E0FC000003F0FC000003F0FC000003
F0FC000003F0FC000003F0FC000003F0FC000003F0FC000003F0FC000003F0FE000007F0
7E000007E07E000007E07F00000FE07F00000FE03F80001FC03F80001FC01FC0003F801F
E0007F800FF801FF0007FE07FE0003FFFFFC0001FFFFF80000FFFFF000007FFFE000001F
FF80000003FC0000242A7BA82F>I<0000000FF0007FFF007FFE007FFF81FFFF00FFFF87
FFFF00FFFF8FFFFF807FFF9FFFFF807FFFBFF87F80001FFFC07F80001FFF003F00001FFE
001E00001FFC000000001FF8000000001FF0000000001FF0000000001FE0000000001FC0
000000001FC0000000001FC0000000001FC0000000001F80000000001F80000000001F80
000000001F80000000001F80000000001F80000000001F80000000001F80000000001F80
000000001F80000000001F80000000001F80000000001F80000000001F80000000001F80
0000007FFFFFF800007FFFFFFC0000FFFFFFFC0000FFFFFFFC00007FFFFFFC00007FFFFF
F8000029287EA72F>114 D<001FFC0E0001FFFF9F0007FFFFFF000FFFFFFF001FFFFFFF
003FFFFFFF007FF007FF007F8000FF00FE00007F00FE00007F00FC00003F00FC00003F00
FC00003F00FE00003F007F00001E007FC00000003FFC0000001FFFF000000FFFFF800003
FFFFE00000FFFFF800001FFFFE0000007FFF00000001FF800000007F807800001FC0FC00
000FC0FC000007E0FC000007E0FE000007E0FE000007E0FF000007E0FF80000FE0FFC000
1FC0FFE0003FC0FFFC01FF80FFFFFFFF80FFFFFFFF00FFFFFFFE00F8FFFFF800F83FFFE0
007007FF0000232A7AA82F>I<000F000000001F800000001F800000001F800000001F80
0000001F800000001F800000001F800000001F800000001F800000001F8000007FFFFFFF
C0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE07FFFFFFFC0001F800000001F800000
001F800000001F800000001F800000001F800000001F800000001F800000001F80000000
1F800000001F800000001F800000001F800000001F800000001F800000001F800000001F
800000001F800000001F8000F0001F8001F8001F8001F8001F8001F8001F8001F8001F80
01F8001FC003F8001FC007F0000FE00FF0000FF81FE00007FFFFC00007FFFFC00003FFFF
800001FFFE0000007FF80000001FE00025337EB12F>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff ecrm1000 10 25
/Ff 25 118 df<0000600000E00001C0000380000700000E00001E00003C000078000078
0000F00001E00001E00003C00003C00007C0000780000F80000F00000F00001F00001E00
001E00003E00003E00003E00007C00007C00007C00007C00007C00007C0000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F800007C00007C00007C00007C00007C00007C00003E00003E00
003E00001E00001E00001F00000F00000F00000F800007800007C00003C00003C00001E0
0001E00000F000007800007800003C00001E00000E000007000003800001C00000E00000
60135278BD20>40 D<C00000E000007000003800001C00000E00000F000007800003C000
03C00001E00000F00000F000007800007800007C00003C00003E00001E00001E00001F00
000F00000F00000F80000F80000F800007C00007C00007C00007C00007C00007C00003E0
0003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E0
0003E00003E00003E00003E00003E00007C00007C00007C00007C00007C00007C0000F80
000F80000F80000F00000F00001F00001E00001E00003E00003C00007C00007800007800
00F00000F00001E00003C00003C0000780000F00000E00001C0000380000700000E00000
C0000013527CBD20>I<0000003000000000000030000000000000300000000000003000
000000000030000000000000300000000000003000000000000030000000000000300000
000000003000000000000030000000000000300000000000003000000000000030000000
000000300000000000003000000000000030000000000000300000000000003000000000
000030000000000000300000000000003000000000000030000000000000300000000000
003000000000000030000000FFFFFFFFFFFFFCFFFFFFFFFFFFFC00000030000000000000
300000000000003000000000000030000000000000300000000000003000000000000030
000000000000300000000000003000000000000030000000000000300000000000003000
000000000030000000000000300000000000003000000000000030000000000000300000
000000003000000000000030000000000000300000000000003000000000000030000000
0000003000000000000030000000000000300000000000003000000036367BAF41>43
D<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000C000C000C001C001800180038003
00070006000E001C003800700060000A19798817>I<0003F80000001FFF0000007E0FC0
0000F803E00001E000F00003C000780007C0007C000F80003E000F80003E001F00001F00
1F00001F003F00001F803F00001F803F00001F807E00000FC07E00000FC07E00000FC07E
00000FC07E00000FC0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00
000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE0000
0FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE07E00000F
C07E00000FC07E00000FC07E00000FC07F00001FC03F00001F803F00001F803F00001F80
1F00001F001F00001F000F80003E000F80003E0007C0007C0003E000F80003F001F80000
F803E000007E0FC000001FFF00000003F8000023397DB62A>48 D<0001C0000003C00000
07C000001FC00000FFC000FFFFC000FFFFC000FF1FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000003FE0007FFFFFF07FFFFFF07FFFFFF01C3779B62A
>I<1C007F00FF80FF80FF80FF80FF807F001C0000000000000000000000000000000000
00000000000000000000000000000000000000001C007F00FF80FF80FF80FF80FF807F00
1C00092479A317>58 D<000000000001C00000000000078000000000001E000000000000
F8000000000003E000000000000F0000000000003C000000000000F0000000000003C000
000000000F0000000000003C000000000001F0000000000007C000000000001E00000000
000078000000000001E00000000000078000000000001E000000000000F8000000000003
E000000000000F0000000000003C000000000000F0000000000000F00000000000003C00
00000000000F00000000000003E0000000000000F80000000000001E0000000000000780
000000000001E0000000000000780000000000001E00000000000007C0000000000001F0
0000000000003C0000000000000F00000000000003C0000000000000F00000000000003C
0000000000000F00000000000003E0000000000000F80000000000001E00000000000007
80000000000001C0322E79AB41>60 D<7FFFFFFFFFFFF8FFFFFFFFFFFFFC000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000FFFF
FFFFFFFFFC7FFFFFFFFFFFF836147B9E41>I<E0000000000000780000000000001E0000
0000000007C0000000000001F00000000000003C0000000000000F00000000000003C000
0000000000F00000000000003C0000000000000F00000000000003E0000000000000F800
00000000001E0000000000000780000000000001E0000000000000780000000000001E00
000000000007C0000000000001F00000000000003C0000000000000F00000000000003C0
000000000003C000000000000F0000000000003C000000000001F0000000000007C00000
0000001E00000000000078000000000001E00000000000078000000000001E0000000000
00F8000000000003E000000000000F0000000000003C000000000000F0000000000003C0
00000000000F0000000000003C000000000001F0000000000007C000000000001E000000
00000078000000000000E0000000000000322E79AB41>I<FFFCFFFCFC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FFFCFFFC0E5379BD17>91 D<FFFCFFFC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
FFFCFFFC0E537FBD17>93 D<0000000FC0000003FFC0000003FFC0000003FFC00000003F
C00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC0
0000000FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC000
00000FC00000000FC00003F80FC0001FFF0FC0007E078FC000F801EFC003F0007FC007E0
003FC00FC0001FC00FC0001FC01F80000FC03F80000FC03F00000FC07F00000FC07F0000
0FC07E00000FC0FE00000FC0FE00000FC0FE00000FC0FE00000FC0FE00000FC0FE00000F
C0FE00000FC0FE00000FC0FE00000FC0FE00000FC07E00000FC07F00000FC07F00000FC0
3F00000FC03F00000FC01F80001FC01F80001FC00FC0003FC007E0007FC003F000EFF001
F801CFFF007C078FFF001FFE0FFF0007F80FC0283B7DB92E>100
D<0007F800001FFF00007C0FC001F803E003F001F007E001F80FC000F81F80007C1F8000
7C3F00007E3F00003E7F00003E7F00003F7E00003FFE00003FFE00003FFE00003FFFFFFF
FFFFFFFFFFFE000000FE000000FE000000FE000000FE0000007E0000007E0000007F0000
007F0000003F0000033F8000031F8000070FC0000607C0000E07E0001C01F0003800F800
70007E03E0001FFF800003FC0020277EA525>I<0380000FE0001FF0001FF0001FF0001F
F0001FF0000FE00003800000000000000000000000000000000000000000000000000000
000000000003F000FFF000FFF000FFF00007F00003F00003F00003F00003F00003F00003
F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003
F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00007F800FF
FFC0FFFFC0FFFFC012387EB717>105 D<03F0000000FFF0000000FFF0000000FFF00000
000FF000000003F000000003F000000003F000000003F000000003F000000003F0000000
03F000000003F000000003F000000003F000000003F000000003F000000003F000000003
F000000003F000000003F000000003F000000003F001FFFC03F001FFFC03F001FFFC03F0
007FC003F0007F0003F0007C0003F000700003F000E00003F001C00003F003800003F007
000003F01E000003F038000003F078000003F0FC000003F1FC000003F3FE000003F73F00
0003FE3F800003F81F800003F00FC00003F00FE00003F007E00003F003F00003F001F800
03F001FC0003F000FC0003F0007E0003F0007F0003F0003F0003F0003F8003F0001FC007
F8003FF0FFFFC0FFFFFFFFC0FFFFFFFFC0FFFF283A7EB92C>107
D<03F000FFF000FFF000FFF0000FF00003F00003F00003F00003F00003F00003F00003F0
0003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F0
0003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F0
0003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F0
0003F00003F00003F00003F00003F00003F00007F800FFFFC0FFFFC0FFFFC0123A7EB917
>I<03F00FF0001FE000FFF03FFC007FF800FFF0F03F01E07E00FFF1C01F83803F000FF3
800FC7001F8003F7000FCE001F8003FE000FDC001F8003FC0007F8000FC003FC0007F800
0FC003F80007F0000FC003F80007F0000FC003F80007F0000FC003F00007E0000FC003F0
0007E0000FC003F00007E0000FC003F00007E0000FC003F00007E0000FC003F00007E000
0FC003F00007E0000FC003F00007E0000FC003F00007E0000FC003F00007E0000FC003F0
0007E0000FC003F00007E0000FC003F00007E0000FC003F00007E0000FC003F00007E000
0FC003F00007E0000FC003F00007E0000FC003F00007E0000FC003F00007E0000FC003F0
0007E0000FC003F00007E0000FC007F8000FF0001FE0FFFFC1FFFF83FFFFFFFFC1FFFF83
FFFFFFFFC1FFFF83FFFF40257EA445>I<03F00FF00000FFF03FFC0000FFF0F03F0000FF
F1C01F80000FF3800FC00003F7000FC00003FE000FC00003FC0007E00003FC0007E00003
F80007E00003F80007E00003F80007E00003F00007E00003F00007E00003F00007E00003
F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003
F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003
F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003F00007E00007
F8000FF000FFFFC1FFFF80FFFFC1FFFF80FFFFC1FFFF8029257EA42E>I<0003FE000000
0FFF8000003E03E00000F800F80001F0007C0003E0003E0007C0001F000F80000F801F80
000FC01F000007C03F000007E03F000007E07E000003F07E000003F07E000003F07E0000
03F0FE000003F8FE000003F8FE000003F8FE000003F8FE000003F8FE000003F8FE000003
F8FE000003F8FE000003F87E000003F07E000003F07F000007F03F000007E03F000007E0
1F80000FC00F80000F800FC0001F8007E0003F0003F0007E0000F800F800007E03F00000
1FFFC0000003FE000025277EA52A>I<03F01FE000FFF07FF800FFF1E07E00FFF3801F80
07F7000FC003FE0007E003FC0003F003F80003F803F00001F803F00001FC03F00000FC03
F00000FE03F00000FE03F00000FE03F000007F03F000007F03F000007F03F000007F03F0
00007F03F000007F03F000007F03F000007F03F000007F03F000007F03F00000FE03F000
00FE03F00000FE03F00001FC03F00001FC03F80003F803F80003F003FC0007F003FE000F
E003F6000FC003F7803F0003F1E07E0003F0FFF80003F01FC00003F000000003F0000000
03F000000003F000000003F000000003F000000003F000000003F000000003F000000003
F000000003F000000007F8000000FFFFC00000FFFFC00000FFFFC0000028357EA42E>I<
07E01F00FFE07FC0FFE1E3E0FFE387F00FE707F003E607F003EE07F003EC03E003FC0080
03F8000003F8000003F8000003F8000003F0000003F0000003F0000003F0000003F00000
03F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F00000
03F0000003F0000003F0000003F0000003F0000003F0000007F80000FFFFF000FFFFF000
FFFFF0001C257EA421>114 D<00FF030003FFE7000F80FF001E003F003C001F0078000F
0070000700F0000700F0000700F0000300F8000300F8000300FC000300FF0000007FE000
007FFF00003FFFE0001FFFF8000FFFFC0003FFFE0000FFFF000007FF8000007F8000001F
80C0000FC0C00007C0C00007C0E00003C0E00003C0E00003C0F00003C0F0000380F80007
80FC000780FC000F00FF001E00F3C07C00E1FFF000C03F80001A277DA521>I<00180000
001800000018000000180000001800000038000000380000003800000078000000780000
0078000000F8000001F8000003F8000007F800001FFFFF00FFFFFF00FFFFFF0001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800C0
01F800C001F800C001F800C001F800C001F800C001F800C001F800C001F800C000FC01C0
00FC0180007C0380007E0300003F0700000FFE000001F8001A347FB220>I<03F00007E0
00FFF001FFE000FFF001FFE000FFF001FFE0000FF0001FE00003F00007E00003F00007E0
0003F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003F00007E0
0003F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003F00007E0
0003F00007E00003F00007E00003F00007E00003F00007E00003F00007E00003F00007E0
0003F00007E00003F00007E00003F0000FE00003F0000FE00003F0000FE00003F0001FE0
0001F0001FE00001F8003FE00000F80077F80000FC00E7FF80003F03C7FF80001FFF87FF
800003FC07E00029267EA42E>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg ectt1000 10 14
/Fg 14 120 df<01FFF0000007FFFE00001FFFFF80001FFFFFE0003FFFFFF0003FC01FF8
003FC007F8003FC001FC001F8000FC00060000FE000000007E000000007E000000007E00
0000FFFE00001FFFFE0000FFFFFE0003FFFFFE000FFFFFFE001FFF807E003FF8007E007F
C0007E007F00007E00FE00007E00FC00007E00FC00007E00FC00007E00FC00007E00FE00
007E007F0000FE007F8003FE003FE01FFE001FFFFFFFFC0FFFFFFFFE07FFFFBFFE01FFFE
1FFE003FF007FC27247CA32C>97 D<00000FFE0000001FFF0000001FFF0000001FFF0000
000FFF000000003F000000003F000000003F000000003F000000003F000000003F000000
003F000000003F000000003F000000003F000007F83F00003FFE3F0000FFFFBF0001FFFF
FF0003FFFFFF0007FC0FFF000FF003FF001FE001FF001FC000FF003F80007F003F00007F
007E00003F007E00003F00FE00003F00FC00003F00FC00003F00FC00003F00FC00003F00
FC00003F00FC00003F00FC00003F00FC00003F00FE00003F007E00007F007E00007F007F
0000FF003F8000FF003F8001FF001FC003FF000FF007FF0007FC1FFF0003FFFFFFFC01FF
FFBFFE00FFFF3FFE003FFC3FFE000FF01FFC27337DB22C>100 D<0003FE0000001FFFC0
00007FFFF00001FFFFF80003FFFFFC0007FE03FE000FF800FF001FE0003F801FC0003F80
3F80001FC03F00000FC07F00000FC07E00000FE07E000007E0FC000007E0FFFFFFFFE0FF
FFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFC0FC00000000FE000000007E000000007E00
0000007F000000003F000003C03F800007E01FC00007E00FF0000FE007F8003FC007FF00
FFC001FFFFFF8000FFFFFF00003FFFFC00000FFFF0000001FF800023247CA32C>I<0000
0FF80000003FFE000000FFFF000001FFFF800003FFFF800007FC7F800007F07F80000FE0
3F00000FC03F00000FC00000000FC00000000FC00000000FC00000000FC00000000FC000
007FFFFFFE00FFFFFFFF00FFFFFFFF00FFFFFFFF007FFFFFFE00000FC00000000FC00000
000FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC0000000
0FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000F
C00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC0
0000000FC00000000FC000003FFFFFF0007FFFFFF8007FFFFFF8007FFFFFF8003FFFFFF0
0021337DB22C>I<00000003F80007F80FFC001FFE3FFE007FFFFFFF01FFFFFFFF03FFFF
FE7F03FC0FF87F07F003F83E0FE001FC1C0FC000FC001FC000FE001F80007E001F80007E
001F80007E001F80007E001F80007E001F80007E001FC000FE000FC000FC000FE001FC00
07F003F80003FC0FF00007FFFFF00007FFFFE0000FFFFF80000F9FFE00000F87F800000F
800000000F800000000F800000000FC000000007E000000007FFFFF00003FFFFFE0007FF
FFFF800FFFFFFFE01FFFFFFFF03FC0001FF87F000003FC7E000000FC7C0000007CFC0000
007EF80000003EF80000003EF80000003EF80000003EFC0000007E7E000000FC7F800003
FC3FE0000FF81FFC007FF00FFFFFFFE003FFFFFF8001FFFFFF00003FFFF8000007FFC000
28387EA42C>I<7FF000000000FFF800000000FFF800000000FFF8000000007FF8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F81FE0000001F87FFC00
0001F9FFFE000001FBFFFF000001FFFFFF000001FFF03F800001FFC01F800001FF801FC0
0001FF000FC00001FE000FC00001FC000FC00001FC000FC00001F8000FC00001F8000FC0
0001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC0
0001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC0
0001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC0007FFFE0FFFF
00FFFFF1FFFF80FFFFF1FFFF80FFFFF1FFFF807FFFE0FFFF0029337FB22C>I<00070000
001FC000001FC000003FE000003FE000003FE000001FC000001FC0000007000000000000
0000000000000000000000000000000000000000000000007FFFC0007FFFE000FFFFE000
7FFFE0007FFFE0000007E0000007E0000007E0000007E0000007E0000007E0000007E000
0007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E000
0007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E0000007E000
0007E0007FFFFFFCFFFFFFFEFFFFFFFEFFFFFFFE7FFFFFFC1F3479B32C>I<7FFFE00000
FFFFF00000FFFFF00000FFFFF000007FFFF000000003F000000003F000000003F0000000
03F000000003F000000003F000000003F000000003F000000003F000000003F000000003
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000003F000000003F000000003F0000000
03F000000003F000007FFFFFFF80FFFFFFFFC0FFFFFFFFC0FFFFFFFFC07FFFFFFF802233
7BB22C>108 D<7FF01FE00000FFF87FFC0000FFF9FFFE0000FFFBFFFF00007FFFFFFF00
0001FFF03F800001FFC01F800001FF801FC00001FF000FC00001FE000FC00001FC000FC0
0001FC000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC0
0001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC0
0001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC0
0001F8000FC00001F8000FC0007FFFE0FFFF00FFFFF1FFFF80FFFFF1FFFF80FFFFF1FFFF
807FFFE0FFFF0029247FA32C>110 D<0007FC0000001FFF0000007FFFC00001FFFFF000
03FFFFF80007FC07FC000FF001FE001FE000FF001F80003F003F80003F803F00001F807E
00000FC07E00000FC07E00000FC0FC000007E0FC000007E0FC000007E0FC000007E0FC00
0007E0FC000007E0FC000007E0FE00000FE07E00000FC07E00000FC07F00001FC03F0000
1F803F80003F801FC0007F001FE000FF000FF001FE0007FC07FC0003FFFFF80001FFFFF0
00007FFFC000001FFF00000007FC000023247CA32C>I<7FFE003FC0FFFF01FFF0FFFF07
FFF8FFFF1FFFFC7FFF3FFFFC003F7FE1FC003FFF01FC003FFC00F8003FF80070003FF000
00003FE00000003FE00000003FC00000003F800000003F800000003F800000003F000000
003F000000003F000000003F000000003F000000003F000000003F000000003F00000000
3F000000003F000000003F000000003F000000003F000000003F000000003F0000007FFF
FFE000FFFFFFF000FFFFFFF000FFFFFFF0007FFFFFE00026247EA32C>114
D<001E000000003F000000003F000000003F000000003F000000003F000000003F000000
003F000000003F000000003F0000007FFFFFFF00FFFFFFFF80FFFFFFFF80FFFFFFFF807F
FFFFFF00003F000000003F000000003F000000003F000000003F000000003F000000003F
000000003F000000003F000000003F000000003F000000003F000000003F000000003F00
0000003F000000003F000000003F000000003F0003C0003F0007E0003F0007E0003F0007
E0003F0007E0003F0007E0003F800FE0001F801FC0001FE07FC0000FFFFF80000FFFFF00
0003FFFE000001FFF80000003FE000232E7EAD2C>116 D<7FF003FF8000FFF807FFC000
FFF807FFC000FFF807FFC0007FF803FFC00001F8000FC00001F8000FC00001F8000FC000
01F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC000
01F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC000
01F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC00001F8000FC000
01F8001FC00001F8001FC00001F8003FC00001FC007FC00000FE03FFC00000FFFFFFFF00
007FFFFFFF80003FFFFFFF80001FFFCFFF800003FE07FF0029247FA32C>I<7FFF007FFF
007FFF80FFFF00FFFF80FFFF807FFF80FFFF007FFF007FFF0007C00001F00007C00001F0
0007C00001F00007C00001F00007C00001F00007C00001F00003E00003E00003E00003E0
0003E00003E00003E03E03E00003E07F03E00003E07F03E00001F07F07C00001F0FF87C0
0001F0FF87C00001F0F787C00001F0F787C00001F1F7C7C00000F1F7C7800000F9E3CF80
0000F9E3CF800000FBE3EF800000FBE3EF800000FBE3EF8000007BC1EF0000007FC1FF00
00007FC1FF0000007F80FF0000007F80FF0000003F80FE0000001F007C000029247FA32C
>119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh ectt0800 6 7
/Fh 7 56 df<00E00000E00001E00003E00003E0000FE0007FE000FFE000FFE00079E000
01E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E000
01E00001E00001E00001E00001E0007FFF807FFF807FFF807FFF80111F7C9E1A>49
D<03FC000FFF001FFF803FFFC07E0FE07803F0F800F0F800F8F80078F800787000780000
780000780000F80000F00001F00003E00007C0000F80001F00007E0000FC0001F80007E0
000FC0001F80783E00787FFFF8FFFFF8FFFFF87FFFF8151F7E9E1A>I<03FC000FFF001F
FFC03FFFE07E07E07C01F07C00F07C00F03800F00001F00001F00003E0000FC003FFC003
FF8003FF8003FFC00007E00001F00000F00000F8000078700078F80078F800F8F800F8F8
01F07E07E07FFFE03FFFC00FFF0003FC0015207E9E1A>I<001F80003F80003F80007B80
007B8000F38001F38001E38003C38007C3800783800F03801F03801E03803C03803C0380
780380F80380FFFFFEFFFFFEFFFFFEFFFFFE000380000380000380000380000380003FF8
007FFC007FFC003FF8171F7F9E1A>I<3FFFE03FFFE03FFFE03FFFE03C00003C00003C00
003C00003C00003C00003CFE003FFF003FFFC03FFFE03F87E03E01F03C00F03800F80000
78000078000078700078F80078F800F8F800F0F803F07E0FE03FFFC01FFF800FFF0003FC
00151F7E9D1A>I<003F0000FFC003FFE007FFF00FE1F01F81F01F01F03E00E07C00007C
0000781000F9FF00F7FF80FFFFC0FFFFE0FE03F0FC01F0F800F8F800F8F00078F80078F8
00787800787800787C00F87C00F03E01F01F87E01FFFC00FFF8007FF0001FC0015207E9E
1A>I<F00000FFFFF8FFFFF8FFFFF8FFFFF8F001F0F003E00007C0000780000F00001F00
001E00003E00003C00007C0000780000F80000F00000F00001F00001E00001E00001E000
01E00003C00003C00003C00003C00003C00003C00003C00001800015207E9E1A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi ecti1095 10.95 18
/Fi 18 118 df<01E007F00FF80FF80FF80FF80FF80FF807B80030003000300070006000
E000C001C00180038007000E000C001C0038007000E000C0000D1B6CBE1C>39
D<00000000FF8001C00000000FFFE001C00000003FFFF80380000000FF807C0780000003
FC001E0F8000000FF0000F1F8000003FC000079F0000007F000003FF000000FE000001FF
000001FC000001FF000003F8000000FE000007F0000000FE00000FE0000000FE00001FC0
0000007E00003F800000007C00007F800000007C0000FF000000007C0000FE000000007C
0001FE00000000780003FC00000000780003F800000000780007F800000000780007F800
00000070000FF00000000070000FF00000000070001FE00000000070001FE00000000000
003FE00000000000003FC00000000000003FC00000000000007FC00000000000007F8000
00000000007F800000000000007F80000000000000FF80000000000000FF000000000000
00FF00000000000000FF00000000000000FF00000000000000FF00000000000000FE0000
0000000000FE000000000F0000FE000000000F0000FE000000000E0000FE000000000E00
00FE000000001E0000FE000000001C0000FE000000003C0000FE00000000380000FE0000
00007800007F000000007000007F00000000F000007F00000001E000003F00000001C000
003F80000003C000001F800000078000001FC000000F0000000FE000001E00000007E000
003C00000007F00000F800000003FC0001E000000000FE0007C0000000007FC03F000000
00001FFFFE000000000007FFF0000000000000FF80000000003A4272BF41>67
D<01FFFFFFFFFFFF01FFFFFFFFFFFF01FFFFFFFFFFFF03FF001FE001FF03F8001FE0007F
07E0001FC0003F07C0001FC0001F0780001FC0001E0F80003FC0001E0F00003F80001E0F
00003F80001E1E00003F80001E1E00007F80001E1C00007F00001E3C00007F00001C3800
007F00001C380000FF00001C780000FE00001C700000FE00001C700000FE00003CF00001
FE000038000001FC000000000001FC000000000001FC000000000003FC000000000003F8
000000000003F8000000000003F8000000000007F8000000000007F0000000000007F000
0000000007F000000000000FF000000000000FE000000000000FE000000000000FE00000
0000001FE000000000001FC000000000001FC000000000001FC000000000003FC0000000
00003F8000000000003F8000000000003F8000000000007F8000000000007F0000000000
007F0000000000007F000000000000FF000000000000FE000000000000FE000000000000
FE000000000001FE000000000001FC000000000001FC000000000003FC000000000003FC
000000000003F800000000000FFC000000003FFFFFFF0000003FFFFFFF0000003FFFFFFF
000000383E71BD41>84 D<00007E00000001FF80000007C1C380001F80EFC0003F00FFC0
007E007FC000FC007F8001F8003F8003F0003F8003F0003F8007E0003F000FE0003F000F
C0003F001FC0007F001FC0007E003F80007E003F80007E003F8000FE007F8000FC007F00
00FC007F0000FC007F0001FC00FF0001F800FE0001F800FE0001F800FE0003F800FE0003
F038FC0003F038FC0003F038FC0007F038FC0007E078FC000FE0707C000FE0707C001FE0
F07E003FE0E03E007FE0E03E00F3E1E01F01E3E1C00F8781E38003FF00FF0000FC003E00
252977A72E>97 D<00001FC00000FFF00003F07C000FC01E001F000E003E000F007C001F
00FC007F01F8007F03F0007F07F0007E07E0007E0FE000381FC000001FC000003F800000
3F8000003F8000007F8000007F0000007F0000007F000000FF000000FE000000FE000000
FE000000FE000000FE000000FC000000FC000006FC00000E7E00001E7E00003C7E000078
3E0000F03F0001E01F0007C00F800F0007C07E0001FFF000007F8000202977A729>99
D<000000003F800000001FFF800000001FFF000000001FFF00000000007F00000000007F
00000000007E00000000007E0000000000FE0000000000FE0000000000FC0000000000FC
0000000001FC0000000001FC0000000001F80000000001F80000000003F80000000003F8
0000000003F00000000003F00000000007F00000000007F00000000007E00000007E07E0
000001FF8FE0000007C1CFE000001F80EFC000003F00FFC000007E007FC00000FC007FC0
0001F8003F800003F0003F800003F0003F800007E0003F80000FE0003F00000FC0003F00
001FC0007F00001FC0007F00003F80007E00003F80007E00003F8000FE00007F8000FE00
007F0000FC00007F0000FC00007F0001FC0000FF0001FC0000FE0001F80000FE0001F800
00FE0003F80000FE0003F83800FC0003F03800FC0003F03800FC0007F03800FC0007F078
00FC000FE070007C000FE070007C001FE0F0007E003FE0E0003E007FE0E0003E00F3E1E0
001F01E3E1C0000F8781E3800003FF00FF000000FC003E0000294077BE2E>I<00003F00
0001FFE00007C0F0001F0078007E007800FC003C01F8003C03F0003C07F0003C0FE0007C
0FC000781FC000783F8000F83F8001F07F8007E07F001FC07F01FF007FFFF800FFFF8000
FE000000FE000000FE000000FE000000FC000000FC000000FC000000FC000000FC000000
FC000000FC00000CFC00001CFC00003C7C0000787C0000F07E0001E03E0003C01F000F80
0F001E000780FC0003FFE00000FF00001E2976A729>I<000003E00000001FF80000003E
1E380000F80EFC0001F007FC0003E007FC0007E003FC000FC003F8001F8003F8003F8003
F8003F0003F8007F0003F0007E0003F000FE0007F000FE0007F001FC0007E001FC0007E0
01FC000FE003FC000FE003F8000FC003F8000FC003F8001FC007F8001FC007F0001F8007
F0001F8007F0003F8007F0003F8007E0003F0007E0003F0007E0007F0007E0007F0003E0
00FE0003E001FE0003F001FE0001F003FE0001F007FC0000F80EFC00007C3DFC00001FF1
FC000007C1F800000001F800000003F800000003F800000003F000000003F000000007F0
00000007F000000007E00000000FE0003C000FC0007E000FC000FE001F8000FE003F0000
FE007E0000FC00FC0000F001F800007C03E000003FFF80000007FE000000263B7CA729>
103 D<0001FC000000FFFC000000FFF8000000FFF800000003F800000003F800000003F0
00000003F000000007F000000007F000000007E000000007E00000000FE00000000FE000
00000FC00000000FC00000001FC00000001FC00000001F800000001F800000003F800000
003F800000003F000000003F03F800007F0FFE00007F3E0F80007E780FC0007EE007C000
FFC007E000FF8007E000FF0007E000FF0007E001FE0007E001FC0007E001FC0007E001F8
0007E003F8000FE003F8000FC003F0000FC003F0000FC007F0001FC007F0001F8007E000
1F8007E0001F800FE0003F800FE0003F000FC0003F000FC0007F001FC0007E001FC000FE
071F8000FC071F8000FC073F8001FC0F3F8001F80E3F0001F80E3F0001F81E7F0001F01C
7F0001F01C7E0001F0387E0001F038FE0001F070FE0000F0E0FC00007FC03800001F0028
407ABE2E>I<0000700001FC0001FC0001FC0001F80001F80000E0000000000000000000
000000000000000000000000000000000000000000000000000000000000007C0001FF00
038F800707800E07C01E07C01C07C03C0FC0380FC0380FC0781FC0701F80701F80F03F80
F03F00003F00007F00007E0000FE0000FC0000FC0001FC0001F80001F80003F80003F000
03F03807F03807E0380FE0780FC0700FC0700FC0F00F80E00F80E00F81C00F83C00F8380
07870003FE0000F800163D79BB1C>I<0007F003FFF003FFE003FFE0000FE0000FE0000F
C0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F00007E
00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F0
0003F00007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80
001F80003F80003F80003F00003F00007F00007F07007E07007E0700FE0F00FE0E00FC0E
00FC0E00FC1E00FC1C00FC1C007C38007C78003C70001FE000078000144079BE17>108
D<01F0003F80007F000007FC01FFE003FFC0000F3E07C1F80F83F0000E1F0F00FC1E01F8
001E1F1C007C3800F8001C1F38007E7000FC003C1FF0007EE000FC00381FF0007FE000FC
00381FE0007FC000FC00783FC0007F8000FC00703FC0007F8000FC00703F80007F0000FC
00703F00007E0000FC00F03F0000FE0001FC00F07F0000FC0001F800007E0000FC0001F8
00007E0000FC0001F800007E0001FC0003F80000FE0001FC0003F00000FC0001F80003F0
0000FC0001F80003F00000FC0003F80007F00001FC0003F80007E00001F80003F00007E0
0001F80003F0000FE00001F80007F0000FC00003F80007F0001FC0E003F00007E0001F80
E003F00007E0001F80E003F0000FE0003F81E007F0000FE0003F01C007E0000FC0003F01
C007E0000FC0003F01C007E0001FC0003E03800FE0001FC0003E03800FC0001F80003E07
000FC0001F80003E07000FC0003F80003E0E001FC0003F80001E1C001F80003F00000FF8
000700000E000003E000432979A74A>I<01F0003F800007FC01FFE0000F3E07C1F8000E
1F0F00FC001E1F1C007C001C1F38007E003C1FF0007E00381FF0007E00381FE0007E0078
3FC0007E00703FC0007E00703F80007E00703F00007E00F03F0000FE00F07F0000FC0000
7E0000FC00007E0000FC00007E0001FC0000FE0001F80000FC0001F80000FC0001F80000
FC0003F80001FC0003F00001F80003F00001F80007F00001F80007E00003F8000FE07003
F0000FC07003F0000FC07003F0001FC0F007F0001F80E007E0001F80E007E0001F81E007
E0001F01C00FE0001F01C00FC0001F03800FC0001F03800FC0001F07001FC0000F0E001F
800007FC0007000001F0002C2979A733>I<00001FC0000000FFF8000003F07C00000FC0
1F00001F801F00003F000F80007E000FC000FC0007C001F80007E003F00007E007F00007
E007E00007E00FE00007F01FC00007F01FC00007F03F800007F03F800007F03F80000FE0
7F80000FE07F00000FE07F00000FE07F00001FE0FF00001FC0FE00001FC0FE00001FC0FE
00003F80FE00003F80FE00007F00FE00007F00FC00007E007C0000FC007E0001FC007E00
01F8007E0003F0003E0007E0001F000FC0001F001F80000F803E000007C0FC000001FFF0
0000003F800000242977A72E>I<01F000FE0007FC03FF800F3E0F03E00E1F1C01E01E1F
3807E01C1F7007F03C1FF00FE0381FE00FE0381FC00FE0783FC00380703F800000703F80
0000703F000000F03F000000F07F000000007E000000007E000000007E00000000FE0000
0000FC00000000FC00000000FC00000001FC00000001F800000001F800000001F8000000
03F800000003F000000003F000000003F000000007F000000007E000000007E000000007
E00000000FE00000000FC00000000FC00000000FC00000001FC00000001F800000000700
000000242979A726>114 D<00007F800001FFE00007C0F8001E003C003C001C003C001E
0078000E00F0003E00F0007E00F0007E01F0007C01F0007C01F0001001F8000001FC0000
01FF800001FFF80000FFFF0000FFFF80007FFFC0001FFFE00007FFE000007FF000000FF0
000003F0000003F0000001F03E0001F07E0000F07F0001F0FE0001E0FE0001E0FC0001E0
F80003C0F00007807000078078000F003C003C001F00F80007FFE00000FF00001F297AA7
25>I<0001C0000003F0000007F0000007F0000007E0000007E000000FE000000FE00000
0FC000000FC000001FC000001FC000001F8000001F8000003F8000003F8000003F000000
3F00007FFFFF80FFFFFF80FFFFFF00007E000000FE000000FE000000FC000000FC000001
FC000001FC000001F8000001F8000003F8000003F8000003F0000003F0000007F0000007
F0000007E0000007E000000FE000000FE000000FC000000FC000001FC000001FC01C001F
801C001F801C003F803C003F8038003F0078003F0070003F00F0003F00E0003F01C0001F
03C0001F0780000F0F000007FC000001F00000193A78B81E>I<007C0000000001FF0000
3800038F8000FC0007078000FC000E07C000FC001E07C001FC001C07C001FC003C0FC001
F800380FC001F800380FC003F800781FC003F800701F8003F000701F8003F000F03F8007
F000F03F0007F000003F0007E000007F0007E000007E000FE000007E000FE00000FE000F
C00000FC000FC00000FC001FC00001FC001FC00001F8001F800001F8001F800001F8003F
800003F8003F838003F0003F038003F0003F038003F0007F038003F0007F078003F0007E
070003F0007E070003F000FE0F0003F000FE0E0001F001FE0E0001F803BE1C0000F8073E
1C00007C1E1E3800003FF80FF0000007E003E000292979A730>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj ecsx1095 10.95 8
/Fj 8 234 df<0003FF0000001FFFE000007FFFFC0001FFFFFE0003FFFFFF8007FFFFFF
C00FFFFFFFE01FFFFFFFF03FFFFFFFF83FFC07FFF87FF000FFFCFFE0007FFCFFC0003FFE
FFC0001FFE7F80001FFE3F00000FFF1F00000FFF1F00000FFF0E00000FFF06000007FF00
000007FF0000000FFF0000000FFF0000000FFF0000000FFE0000001FFE0000001FFE0000
003FFC0000003FFC0000007FF80000007FF0000000FFE0000001FFC0000003FF80000007
FF0000000FFE0000001FFC0000003FF80000007FF0000000FFC0000001FF80000003FF00
000007FE0000000FFC0000001FF00000003FE00000007FC0000000FF80000001FF000000
03FE00000007FC0000000FF00000001FFFFFFFFE3FFFFFFFFF7FFFFFFFFF7FFFFFFFFF7F
FFFFFFFF7FFFFFFFFF7FFFFFFFFF3FFFFFFFFF1FFFFFFFFE283D7CBC32>50
D<0001FFC00000001FFFF80000007FFFFE000001FFFFFF800003FFFFFFC0000FFFFFFFE0
001FFFFFFFF0003FFFFFFFF0007FFF01FFF8007FF8007FF8003FE0003FFC001FC0003FFC
001F80003FFC000F00001FFC000600001FFC000000001FFC000000003FFC000000003FFC
000000003FFC000000003FF8000000007FF8000000007FF800000000FFF000000001FFE0
00000003FFC00000001FFF8000000FFFFF0000000FFFFE0000000FFFF80000000FFFFE00
00000FFFFF8000000FFFFFE000000000FFF8000000003FFC000000001FFC000000001FFE
000000000FFF000000000FFF0000000007FF0000000007FF8000000007FF8000000007FF
8000000007FF8000000007FF8000000007FF8000000007FF8000000007FF8000000007FF
806000000FFF807000000FFF007C00001FFF007F00001FFF00FFC0003FFE00FFFC00FFFE
00FFFFFFFFFC00FFFFFFFFFC00FFFFFFFFF8007FFFFFFFF0001FFFFFFFE00007FFFFFFC0
0001FFFFFF0000003FFFF800000003FFC00000293F7CBC32>I<000003FFE00000000000
07FFF000000000000FFFF800000000000FFFF800000000001FFFFC00000000001FFFFC00
000000001FFFFC00000000003FFFFE00000000003FFFFE00000000003FFFFE0000000000
7FFFFF00000000007FEFFF00000000007FE7FF0000000000FFE7FF8000000000FFC7FF80
00000001FFC7FFC000000001FFC3FFC000000001FF83FFC000000003FF83FFE000000003
FF81FFE000000003FF01FFE000000007FF01FFF000000007FF00FFF000000007FE00FFF0
0000000FFE00FFF80000000FFE007FF80000000FFC007FF80000001FFC007FFC0000001F
FC003FFC0000001FF8003FFC0000003FF8003FFE0000003FF8001FFE0000007FF0001FFF
0000007FF0001FFF0000007FF0000FFF000000FFE0000FFF800000FFE0000FFF800000FF
E00007FF800001FFC00007FFC00001FFC00003FFC00001FFC00003FFC00003FFFFFFFFFF
E00003FFFFFFFFFFE00003FFFFFFFFFFE00007FFFFFFFFFFF00007FFFFFFFFFFF00007FF
FFFFFFFFF0000FFFFFFFFFFFF8000FFE0000007FF8001FFC0000007FFC001FFC0000007F
FC001FFC0000003FFC003FF80000003FFE003FF80000003FFE003FF80000001FFE007FF0
0000001FFF007FF00000001FFF007FF00000000FFF00FFE00000000FFF80FFE000000007
FF80FFE000000007FF80FFC000000003FF80FF8000000001FF80393F7CBE42>65
D<0000FFF800000FFFFF00003FFFFFC000FFFFFFF001FFFFFFFC03FFFFFFFC07FFC01FFC
0FFF0003FC1FFE0000F81FFC0000783FF80000383FF80000187FF00000007FF00000007F
F00000007FF0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0
000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE000
0000FFE00000007FF00000007FF00000007FF00000003FF80000183FF80000383FFC0000
781FFE0001F80FFF0003FC0FFFC03FFC07FFFFFFFC01FFFFFFFC00FFFFFFF0003FFFFFC0
000FFFFE000000FFF000262D7DAB2D>99 D<3FE07FF0FFF0FFF0FFF0FFF0FFF0FFF0FFF0
FFF0FFF07FE00000000000000000000000000000000000000000000000001FE03FF07FF0
7FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF0
7FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF0
7FF03FF01FE00C427BC118>105 D<00FF000001FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF80003FFFFFF07FFFFFF8FF
FFFFF8FFFFFFF8FFFFFFF87FFFFFF003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FFC00C03FFC01C01FFE0FE01FFFFFE01
FFFFFE00FFFFFE007FFFF0003FFFC0000FF8001F377EB524>116
D<7F8000007F00FFC00001FF80FFC00001FF807FE00003FF007FE00003FF007FF00003FF
003FF00007FE003FF00007FE003FF80007FE001FF8000FFC001FF8000FFC001FFC000FFC
000FFC001FF8000FFC001FF8000FFE001FF80007FE003FF00007FE003FF00007FF003FF0
0003FF007FE00003FF007FE00003FF807FE00001FF80FFC00001FF80FFC00001FFC0FFC0
0000FFC1FF800000FFC1FF800000FFE1FF8000007FE3FF0000007FE3FF0000007FF3FF00
00003FF7FE0000003FF7FE0000003FFFFE0000001FFFFC0000001FFFFC0000001FFFFC00
00000FFFF80000000FFFF80000000FFFF800000007FFF000000007FFF000000001FFC000
00292A7EA92E>118 D<00003FF80000007FF8000000FFF0000001FFE0000001FF800000
03FF00000007FE0000000FFC0000001FF00000003FE00000003FC00000007F80000000FE
00000000FC00000000000000000000000000000000000000000000000001FFC000000FFF
F800003FFFFE0000FFFFFF0001FFFFFF8003FFFFFFC007FFC0FFE00FFE003FF01FFC001F
F01FF8000FF83FF0000FF83FF00007FC7FF00007FC7FE00007FC7FE00007FC7FE00003FE
FFE00003FEFFE00003FEFFC00003FEFFC00003FEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFF
FFFFFFFEFFFFFFFFFEFFFFFFFFFCFFE0000000FFE0000000FFE00000007FE00000007FE0
0000007FE00000003FF00000003FF000000C3FF800001C1FF800003C0FFC0000FC0FFF00
03FE07FFE01FFE03FFFFFFFE01FFFFFFFE007FFFFFF8003FFFFFE00007FFFF000000FFF0
00273F7DBD2E>233 D E
%EndDVIPSBitmapFont
/Fk 138[72 3[69 113[{}2 90.9091 /Dingbats rf
%DVIPSBitmapFont: Fl ecbx0800 8 1
/Fl 1 102 df<000FFC00007FFF8001FFFFE007FC0FF00FF003F81FE001FC1FE000FC3F
C000FE7FC0007E7F80007E7F80007FFF80007FFF80007FFFFFFFFFFFFFFFFFFFFFFFFFFF
800000FF800000FF8000007F8000007FC000007FC000003FC0000F1FE0000F0FF0001F07
F8007E03FE01FC01FFFFF8007FFFE00007FF00201E7E9D25>101
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm ecbx1095 10.95 11
/Fm 11 117 df<0F803FE07FF07FF8FFFCFFFCFFFCFFFEFFFEFFFE7FFE7FFE3FFE0FCE00
0E000E001E001C001C003C00380078007800F000F001E003C007C00F801F001E000C000F
2079BE1D>39 D<00000F000000001F000000007F00000001FF0000000FFF000001FFFF00
00FFFFFF0000FFFFFF0000FFF7FF0000FE07FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007
FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF
00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00
000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00003F
FFFFFFF83FFFFFFFF83FFFFFFFF83FFFFFFFF8253C79BB34>49 D<00007FF0000003FFFF
00001FFFFFC0007FE01FE000FF8003F001FF000FF803FE000FFC07FE001FFC0FFC001FFC
1FFC001FFC1FF8001FFC3FF8001FFC3FF8000FF87FF80007F07FF00001C07FF0000000FF
F0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0
000000FFF0000000FFF0000000FFF00000007FF00000007FF00000007FF80000007FF800
00003FF800001E3FFC00001E1FFC00003E0FFC00003C0FFE00007C07FF0000F803FF8001
F000FFC003E0007FF00FC0001FFFFF000007FFFC0000007FE000272B7DA92E>99
D<0000FFE0000007FFFC00003FFFFF00007FE0FF8001FF803FC003FF001FE007FE000FF0
0FFC000FF80FFC0007FC1FF80007FC3FF80003FE3FF80003FE3FF80003FE7FF00003FE7F
F00003FF7FF00003FFFFF00001FFFFF00001FFFFF00001FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF0000000FFF0000000FFF0000000FFF0000000FFF00000007FF00000007FF000
00007FF00000003FF80000003FF800000F1FF800000F1FFC00001F0FFC00001E07FE0000
3E03FE00007C01FF0000F800FFC003F0007FF01FE0001FFFFFC00007FFFE0000007FF000
282B7DA92F>101 D<01F80003FC0007FE000FFF001FFF801FFF801FFF801FFF801FFF80
1FFF800FFF0007FE0003FC0001F800000000000000000000000000000000000000000000
00000000000000FF00FFFF00FFFF00FFFF00FFFF0007FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF00FFFFF8FFFFF8FFFFF8FFFFF815407CBF1D>105
D<01FE003FF00001FF8000FFFE00FFFE0007FFF000FFFE03FFFF801FFFFC00FFFE0FC0FF
C07E07FE00FFFE1E007FE0F003FF0007FE3C003FF1E001FF8003FE78003FF3C001FF8003
FEF0003FF78001FF8003FFE0001FFF0000FFC003FFC0001FFE0000FFC003FFC0001FFE00
00FFC003FF80001FFC0000FFC003FF80001FFC0000FFC003FF80001FFC0000FFC003FF00
001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FF
C003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001F
F80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003
FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF800
00FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00
001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FF
C003FF00001FF80000FFC0FFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FF
FFE03FFFFFFFFFFC07FFFFE03FFFFF50297CA857>109 D<01FE003FF00000FFFE00FFFE
0000FFFE03FFFF8000FFFE0FC0FFC000FFFE1E007FE00007FE3C003FF00003FE78003FF0
0003FEF0003FF00003FFE0001FF80003FFC0001FF80003FFC0001FF80003FF80001FF800
03FF80001FF80003FF80001FF80003FF00001FF80003FF00001FF80003FF00001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF
00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00
001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF0000
1FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF800FFFFFC07FF
FFE0FFFFFC07FFFFE0FFFFFC07FFFFE0FFFFFC07FFFFE033297CA83A>I<00007FF00000
0003FFFE0000001FFFFFC000007FE03FF00000FF800FF80001FF0007FC0003FE0003FE00
07FC0001FF000FF80000FF801FF80000FFC01FF80000FFC03FF80000FFE03FF000007FE0
7FF000007FF07FF000007FF07FF000007FF07FF000007FF0FFF000007FF8FFF000007FF8
FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8
FFF000007FF8FFF000007FF87FF000007FF07FF000007FF07FF000007FF07FF000007FF0
3FF80000FFE03FF80000FFE01FF80000FFC00FF80000FF800FFC0001FF8007FE0003FF00
03FF0007FE0001FF800FFC00007FE03FF000001FFFFFC0000007FFFF000000007FF00000
2D2B7DA934>I<00FF007FE00000FFFF07FFFC0000FFFF1FFFFF0000FFFF7F01FFC000FF
FFF8007FF00007FFF0003FF80003FFE0001FFC0003FF80000FFE0003FF80000FFF0003FF
000007FF0003FF000007FF8003FF000003FF8003FF000003FFC003FF000003FFC003FF00
0003FFC003FF000001FFC003FF000001FFE003FF000001FFE003FF000001FFE003FF0000
01FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001
FFE003FF000001FFE003FF000001FFC003FF000003FFC003FF000003FFC003FF000003FF
C003FF000007FF8003FF000007FF8003FF000007FF0003FF80000FFE0003FFC0001FFE00
03FFE0001FFC0003FFF0003FF80003FFF800FFE00003FF7F03FFC00003FF1FFFFF000003
FF07FFF8000003FF00FFC0000003FF000000000003FF000000000003FF000000000003FF
000000000003FF000000000003FF000000000003FF000000000003FF000000000003FF00
0000000003FF000000000003FF000000000003FF000000000003FF0000000000FFFFFC00
000000FFFFFC00000000FFFFFC00000000FFFFFC00000000333B7DA83A>I<01FE01FC00
FFFE07FF80FFFE0FFFE0FFFE3F1FF0FFFE3C1FF007FE783FF803FEF03FF803FEE03FF803
FFE03FF803FFC03FF803FFC01FF003FF800FE003FF80038003FF80000003FF80000003FF
00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00
000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF0000
0003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF000000
FFFFFF0000FFFFFF0000FFFFFF0000FFFFFF000025297DA82B>114
D<0007800000078000000780000007800000078000000F8000000F8000000F8000000F80
00001F8000001F8000001F8000003F8000007F8000007F800000FF800001FF800007FF80
001FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC01FF800001FF800001FF800001FF800001FF80
0001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF80
0001FF800001FF800001FF800001FF800001FF800001FF800001FF801E01FF801E01FF80
1E01FF801E01FF801E01FF801E01FF801E01FF801E01FF801E00FF803C00FFC03C00FFC0
3C007FE078003FF0F0001FFFE00007FFC00000FF001F3B7EB928>116
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn ecrm1095 10.95 57
/Fn 57 239 df<00006000C000006000C00000E001C00000C001800001C0038000038007
0000038007000007800F000007000E00000F001E00001E003C00003C007800003C007800
007800F00000F801F00001F003E00003E007C00007C00F80000FC01F80001F803F00007F
00FE0000FE01FC0000FE01FC00007F00FE00001F803F00000FC01F800007C00F800003E0
07C00001F003E00000F801F000007800F000003C007800003C007800001E003C00000F00
1E000007000E000007800F00000380070000038007000001C003800000C001800000E001
C000006000C000006000C0222C76AB32>19 D<C001800000C001800000E001C000006000
C000007000E00000380070000038007000003C007800001C003800001E003C00000F001E
000007800F000007800F000003C007800003E007C00001F003E00000F801F000007C00F8
00007E00FC00003F007E00001FC03F80000FE01FC0000FE01FC0001FC03F80003F007E00
007E00FC00007C00F80000F801F00001F003E00003E007C00003C007800007800F000007
800F00000F001E00001E003C00001C003800003C00780000380070000038007000007000
E000006000C00000E001C00000C001800000C001800000222C7BAB32>I<FFFFFFFFFFF0
FFFFFFFFFFF02C0280982D>I<FFFFFFFFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFFFFFFFF
80590280985A>I<000003FF000FE000001FFFC07FF80000FE00F1F81C0001F8003BE07E
0007E0007FC0FF000FC001FFC0FF001F8001FF80FF003F0001FF00FF007F0001FF00FF00
7E0001FF007E00FE0000FE000000FC00007E000000FC00007E000000FC00007E000000FC
00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00
007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC0000
7E0000FFFFFFFFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF8000FC00007E000000FC00007E
000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E00
0000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E0000
00FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000
FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC
00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00
007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000001FE0000
FF00007FFFF83FFFFF007FFFF83FFFFF007FFFF83FFFFF0038407FBF35>27
D<000003FF000000001FFFEE000000FE00FE000001F800FE000007E001FE00000FC001FE
00001F8001FE00003F0001FE00007F0001FE00007E0000FE0000FE00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E00FFFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0001FE0000FF007FFFF83FFFFC7FFFF83FFFFC7FFFF83FFFFC2E407FBF32>29
D<000003FE0001FF000000001FFF800FFFE0000000FE01E07F00F0000001F80078FC003C
000007E0001BF0000E00000FC0007FE0003E00001F8001FFC0007F00003F0001FF8000FF
00007F0001FF8000FF00007E0001FF0000FF0000FE0001FF0000FF0000FC0001FE00007E
0000FC00007E00003C0000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E00003F00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF
0000FC00007E0000FF0000FC00007E00007F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0001FE0000FF00007F807FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFF
FE47407FBF4B>I<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000C000C000C000C0
01C00180018003800300070006000E000C001C003800700060000A1B78BE19>39
D<C00000E000007000003800001C00000E00000F000007800003C00003C00001E00000F0
0000F000007800007800003C00003C00003E00001E00001F00001F00000F00000F80000F
800007800007C00007C00007C00003C00003E00003E00003E00003E00003E00003E00001
E00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001
F00001F00001F00001F00001F00001F00001F00001E00003E00003E00003E00003E00003
E00003E00003C00007C00007C00007C0000780000F80000F80000F00001F00001F00001E
00003E00003C00003C0000780000780000F00000F00001E00003C00003C0000780000F00
000E00001C0000380000700000E00000C00000145A7BC323>41 D<1C007F00FF80FF80FF
C0FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C
001C003800700060000A1B788819>44 D<FFFFFEFFFFFEFFFFFEFFFFFEFFFFFE17057F95
1E>I<1C007F00FF80FF80FF80FF80FF807F001C000909788819>I<0000C0000003C00000
07C000001FC000007FC00007FFC000FFFFC000FF9FC000F81FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D78BC2D>49 D<0007FC0000003FFF80
0000FFFFE00001F00FF800078003FC000F0001FE000E0000FF001C00007F803800003FC0
3000003FC07000001FE06000001FE06000001FE0FE00000FF0FF00000FF0FF80000FF0FF
80000FF0FF80000FF0FF80000FF0FF80000FF07F00000FF01C00000FF00000000FE00000
001FE00000001FE00000001FC00000003FC00000003F800000007F800000007F00000000
FE00000001FC00000001FC00000003F800000007F00000000FE00000000FC00000001F80
0000003E000000007C00000000F800000001F000000003E000000003C000000007800000
000F000030001E000030003C000030007800003000F000006001E000006003C000006007
8000006007000000E00FFFFFFFE01FFFFFFFE03FFFFFFFE07FFFFFFFC0FFFFFFFFC0FFFF
FFFFC0FFFFFFFFC0243D7CBC2D>I<0007FC0000003FFF800000FFFFE00001F807F80007
C003FC000F0001FE000E0000FF001C00007F801F80007F803FC0003FC03FE0003FC03FE0
003FC03FE0003FC03FE0003FC03FE0003FC01FC0003FC00700003FC00000003F80000000
7F800000007F800000007F00000000FF00000000FE00000001FC00000003F800000003F0
0000000FC00000003F0000001FFC0000001FFF800000000FE000000003F800000001FC00
000000FE000000007F000000007F800000003FC00000003FC00000003FE00000003FE000
00001FE00000001FF00000001FF00C00001FF03F00001FF07F80001FF0FFC0001FF0FFC0
001FF0FFC0001FF0FFC0001FF0FFC0003FE0FF80003FE07F00003FC07000003FC0700000
7F803800007F801C0000FF000F0001FE0007C003FC0003F80FF00000FFFFE000003FFF80
000007FC0000243F7CBC2D>I<1C007F00FF80FF80FF80FF80FF807F001C000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
001C007F00FF80FF80FF80FF80FF807F001C00092778A619>58 D<003FF80000FFFF0003
C01FC00F0007F01C0001F8380001FC700000FE600000FE7C00007FFE00007FFF00007FFF
00007FFF00007FFF00007F7E00007F3C0000FF000000FE000000FE000001FC000003F800
0007F000000FE000000F8000001F0000003E0000003C00000078000000F8000000F00000
00E0000001E0000001C00000018000000380000003800000030000000300000003000000
030000000300000003000000030000000300000003000000030000000300000000000000
000000000000000000000000000000000000000000000000000000000000000007000000
1FC000003FE000003FE000003FE000003FE000003FE000001FC0000007000020407BBF2B
>63 D<0000000700000000000000070000000000000007000000000000000F8000000000
00000F800000000000001FC00000000000001FC00000000000001FC00000000000003FE0
0000000000003FE00000000000003FE00000000000007FF00000000000006FF000000000
00006FF0000000000000CFF8000000000000C7F8000000000000C7F800000000000187FC
00000000000183FC00000000000183FC00000000000301FE00000000000301FE00000000
000301FE00000000000600FF00000000000600FF00000000000E00FF80000000000C007F
80000000000C007F80000000001C007FC00000000018003FC00000000018003FC0000000
0030003FE00000000030001FE00000000030001FE00000000060001FF00000000060000F
F00000000060000FF000000000C00007F800000000C00007F800000000C00007F8000000
01800003FC00000001FFFFFFFC00000003FFFFFFFE00000003FFFFFFFE00000003000001
FE00000007000001FF00000006000000FF00000006000000FF0000000C000000FF800000
0C0000007F8000000C0000007F800000180000007FC00000180000003FC0000018000000
3FC00000300000001FE00000300000001FE00000700000001FE00000700000000FF00000
F00000000FF00001F00000000FF80003F80000000FF8000FFE0000003FFE00FFFFC00007
FFFFF8FFFFC00007FFFFF8FFFFC00007FFFFF83D417DC044>65 D<0000003FF0000C0000
03FFFE001C00001FFFFF801C00007FE00FC03C0000FF0001F07C0003FC0000787C0007F0
00003CFC001FE000000FFC003FC0000007FC007F80000003FC00FF00000003FC01FE0000
0001FC01FC00000000FC03FC00000000FC07F8000000007C07F8000000007C0FF0000000
003C0FF0000000003C1FE0000000001C1FE0000000001C3FE0000000001C3FC000000000
1C3FC0000000000C7FC0000000000C7FC0000000000C7FC0000000000C7F800000000000
FF800000000000FF800000000000FF800000000000FF800000000000FF800000000000FF
800000000000FF800000000000FF800000000000FF800000000000FF800000000000FF80
0000000000FF8000000000007F8000000000007FC000000000007FC0000000000C7FC000
0000000C3FC0000000000C3FC0000000000C3FE0000000000C1FE0000000001C1FE00000
0000180FF000000000180FF0000000001807F8000000003807F8000000003003FC000000
007001FC000000006001FE00000000E000FF00000001C0007F8000000380003FC0000007
80001FE000000F000007F000001E000003FC00003C000000FF0000F00000007FE007E000
00001FFFFF8000000003FFFE00000000003FF0000036427BBF41>67
D<FFFFFFFFFC000000FFFFFFFFFF800000FFFFFFFFFFE0000000FFC0001FF80000007F80
0003FE0000007F800000FF0000007F8000003F8000007F8000001FC000007F8000000FE0
00007F80000007F000007F80000003F800007F80000001FC00007F80000001FC00007F80
000000FE00007F80000000FF00007F800000007F00007F800000007F80007F800000003F
80007F800000003FC0007F800000003FC0007F800000003FC0007F800000003FE0007F80
0000001FE0007F800000001FE0007F800000001FE0007F800000001FE0007F800000001F
F0007F800000001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F80
0000001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F800000001F
F0007F800000001FF0007F800000001FE0007F800000001FE0007F800000001FE0007F80
0000001FE0007F800000003FE0007F800000003FC0007F800000003FC0007F800000003F
80007F800000007F80007F800000007F80007F800000007F00007F80000000FE00007F80
000000FE00007F80000001FC00007F80000003F800007F80000007F800007F8000000FF0
00007F8000001FE000007F8000003FC000007F800000FF0000007F800003FE000000FFC0
001FF80000FFFFFFFFFFF00000FFFFFFFFFF800000FFFFFFFFFC0000003C3E7DBD45>I<
FFFFFFFFFFFFC0FFFFFFFFFFFFC0FFFFFFFFFFFFC000FFC00001FFC0007F8000001FC000
7F8000000FE0007F80000003E0007F80000003E0007F80000001E0007F80000000E0007F
80000000E0007F80000000E0007F8000000060007F8000000060007F8000000060007F80
00000060007F8000000030007F8000300030007F8000300030007F8000300030007F8000
300030007F8000300000007F8000300000007F8000700000007F8000700000007F8000F0
0000007F8001F00000007F8007F00000007FFFFFF00000007FFFFFF00000007FFFFFF000
00007F8007F00000007F8001F00000007F8000F00000007F8000700000007F8000700000
007F8000300000007F8000300000007F8000300006007F8000300006007F800030000600
7F800030000C007F800000000C007F800000000C007F800000000C007F800000000C007F
800000001C007F8000000018007F8000000018007F8000000038007F8000000038007F80
00000078007F8000000078007F80000000F0007F80000001F0007F80000003F0007F8000
0007F0007F8000001FF000FFC00001FFF0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFF
FFE0373E7DBD3D>I<FFFFFFFFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF8000FFC00003FF
80007F8000003F80007F8000001FC0007F80000007C0007F80000003C0007F80000003C0
007F80000001C0007F80000001C0007F80000001C0007F80000000C0007F80000000C000
7F80000000C0007F80000000C0007F8000000060007F8000000060007F8000300060007F
8000300060007F8000300060007F8000300000007F8000300000007F8000300000007F80
00700000007F8000700000007F8000F00000007F8001F00000007F8007F00000007FFFFF
F00000007FFFFFF00000007FFFFFF00000007F8007F00000007F8001F00000007F8000F0
0000007F8000700000007F8000700000007F8000300000007F8000300000007F80003000
00007F8000300000007F8000300000007F8000300000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F800000000000FFE000000000FFFFFFF0000000FFFFFF
F0000000FFFFFFF0000000333E7DBD3B>I<FFFFFFF00000FFFFFFF00000FFFFFFF00000
00FFE0000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000003
007F80000003007F80000003007F80000003007F80000003007F80000007007F80000006
007F80000006007F80000006007F80000006007F8000000E007F8000000E007F8000000E
007F8000001E007F8000001E007F8000003E007F8000007E007F800000FE007F800001FC
007F800007FC00FFC0003FFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFC303E7DBD38>
76 D<FFFF80000000001FFFF0FFFFC0000000003FFFF0FFFFC0000000003FFFF000FFC0
000000003FF000006FE0000000006FE000006FE0000000006FE0000067F000000000CFE0
000067F000000000CFE0000067F000000000CFE0000063F8000000018FE0000063F80000
00018FE0000061FC000000030FE0000061FC000000030FE0000061FC000000030FE00000
60FE000000060FE0000060FE000000060FE00000607F0000000C0FE00000607F0000000C
0FE00000607F0000000C0FE00000603F800000180FE00000603F800000180FE00000603F
800000180FE00000601FC00000300FE00000601FC00000300FE00000600FE00000600FE0
0000600FE00000600FE00000600FE00000600FE000006007F00000C00FE000006007F000
00C00FE000006003F80001800FE000006003F80001800FE000006003F80001800FE00000
6001FC0003000FE000006001FC0003000FE000006000FE0006000FE000006000FE000600
0FE000006000FE0006000FE0000060007F000C000FE0000060007F000C000FE000006000
3F8018000FE0000060003F8018000FE0000060003F8018000FE0000060001FC030000FE0
000060001FC030000FE0000060000FE060000FE0000060000FE060000FE0000060000FE0
60000FE00000600007F0C0000FE00000600007F0C0000FE00000600003F980000FE00000
600003F980000FE00000600003F980000FE00000600001FF00000FE00000600001FF0000
0FE00000600000FE00000FE00000600000FE00000FE00000F00000FE00000FE00001F800
007C00000FE00007FE00007C00001FF000FFFFF00038001FFFFFF0FFFFF00038001FFFFF
F0FFFFF00038001FFFFFF04C3E7DBD53>I<000000FFE0000000000007FFFC0000000000
3FC07F8000000000FE000FE000000001F80003F000000007E00000FC0000000FC000007E
0000001F8000003F0000003F0000001F8000007E0000000FC00000FE0000000FE00001FC
00000007F00003F800000003F80003F800000003F80007F000000001FC0007F000000001
FC000FE000000000FE001FE000000000FF001FE000000000FF001FC0000000007F003FC0
000000007F803FC0000000007F803FC0000000007F807FC0000000007FC07F8000000000
3FC07F80000000003FC07F80000000003FC0FF80000000003FE0FF80000000003FE0FF80
000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF8000000000
3FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80
000000003FE07F80000000003FC07FC0000000007FC07FC0000000007FC07FC000000000
7FC07FC0000000007FC03FC0000000007F803FE000000000FF801FE000000000FF001FE0
00000000FF001FE000000000FF000FF000000001FE000FF000000001FE0007F800000003
FC0003F800000003F80003FC00000007F80001FC00000007F00000FE0000000FE000007F
0000001FC000003F8000003F8000001F8000003F0000000FE00000FE00000007F00001FC
00000001F80003F000000000FE000FE0000000003FC07F800000000007FFFC0000000000
00FFE00000003B427BBF46>79 D<FFFFFFFFF00000FFFFFFFFFF0000FFFFFFFFFFC00000
FFC0003FF000007F800007F800007F800001FE00007F800000FF00007F8000007F00007F
8000007F80007F8000003FC0007F8000003FC0007F8000001FE0007F8000001FE0007F80
00001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000
001FF0007F8000001FF0007F8000001FF0007F8000001FE0007F8000001FE0007F800000
3FC0007F8000003FC0007F8000007F80007F8000007F00007F800000FE00007F800003FC
00007F800007F800007F80003FE000007FFFFFFF8000007FFFFFFC0000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F8000000000007F800000000000FFC000000000FFFFFFC000
0000FFFFFFC0000000FFFFFFC0000000343E7DBD3D>I<000000FFE0000000000007FFFC
00000000003FC07F8000000000FE000FE000000001F80003F000000007F00001FC000000
0FC000007E0000001F8000003F0000003F0000001F8000007F0000001FC00000FE000000
0FE00001FC00000007F00003FC00000007F80003F800000003F80007F800000003FC0007
F000000001FC000FF000000001FE001FE000000000FF001FE000000000FF001FE0000000
00FF003FC0000000007F803FC0000000007F803FC0000000007F807FC0000000007FC07F
C0000000007FC07F80000000003FC07F80000000003FC0FF80000000003FE0FF80000000
003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF
80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000
003FE0FF80000000003FE07F80000000003FC07F80000000003FC07FC0000000007FC07F
C0000000007FC07FC0000000007FC03FC0000000007F803FC0000000007F801FE0000000
00FF001FE000000000FF001FE000000000FF000FF000000001FE000FF000000001FE0007
F0001F0001FC0003F8007FC003F80003F800E07003F80001FC01C03807F00000FE038018
0FE000007E03001C0FC000003F03000C1F8000001F83000E3F0000000FC300067E000000
07F30007FC00000001FB8007F000000000FFC00FE0000000003FE07F800060000007FFFF
800060000000FFE38000600000000003C000600000000003C000E00000000003E000E000
00000003E001E00000000001F003E00000000001F807C00000000001FC0FC00000000001
FFFFC00000000001FFFFC00000000000FFFF800000000000FFFF8000000000007FFF0000
000000007FFE0000000000003FFE0000000000001FF800000000000007E0003B527BBF46
>I<0007FC0018003FFF803800FFFFE03801FC03F87803F0007C7807C0001EF80F80000F
F81F000007F83F000003F83E000001F87E000000F87E000000F87C00000078FC00000078
FC00000078FC00000038FC00000038FC00000038FE00000018FE00000018FF00000018FF
000000187F800000007FC00000007FE00000003FF80000003FFF0000001FFFF000000FFF
FF00000FFFFFF00007FFFFFC0001FFFFFE0000FFFFFF80003FFFFFC00007FFFFE000007F
FFE0000007FFF00000007FF80000001FF80000000FFC00000007FC00000003FC00000001
FE00000001FEC0000000FEC0000000FEC0000000FEC00000007EC00000007EE00000007E
E00000007EE00000007EE00000007CF00000007CF0000000FCF8000000F8FC000001F8FE
000001F0FF000003F0FF800007E0FBE0000FC0F1F8001F80F07F007F00E01FFFFC00E007
FFF000C0007FC00027427BBF32>83 D<3FFFFFFFFFFFFF003FFFFFFFFFFFFF003FFFFFFF
FFFFFF003FE000FFC001FF003F00007F80003F007E00007F80001F807C00007F80000F80
7800007F800007807000007F800003807000007F800003807000007F800003806000007F
800001806000007F800001806000007F800001806000007F800001806000007F80000180
C000007F800000C0C000007F800000C0C000007F800000C0C000007F800000C0C000007F
800000C00000007F800000000000007F800000000000007F800000000000007F80000000
0000007F800000000000007F800000000000007F800000000000007F800000000000007F
800000000000007F800000000000007F800000000000007F800000000000007F80000000
0000007F800000000000007F800000000000007F800000000000007F800000000000007F
800000000000007F800000000000007F800000000000007F800000000000007F80000000
0000007F800000000000007F800000000000007F800000000000007F800000000000007F
800000000000007F800000000000007F800000000000007F800000000000007F80000000
0000007F800000000000007F800000000000007F800000000000007F800000000000007F
80000000000000FFC0000000000001FFE00000000007FFFFFFF800000007FFFFFFF80000
0007FFFFFFF800003A3E7DBD41>I<001FF0000000FFFC000003E03F00000F000FC0001C
0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC003FC0007E001F80
007E000F00007E000000007E000000007E000000007E000000007E0000001FFE000003FF
FE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E001FC0007E003F80007E
007F80007E007F00007E007F00007E03FE00007E03FE00007E03FE00007E03FE0000FE03
FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E1F8E0FF03C0FFC03
FFF007F8003FC003E0282A7CA82D>97 D<01F800000000FFF800000000FFF800000000FF
F80000000007F80000000003F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F807F8000001F81FFF000001F8780FC00001F9E003F00001
FB8001F80001FF0000FC0001FE00007E0001FC00003F0001FC00001F8001F800001F8001
F800001FC001F800000FC001F800000FE001F800000FE001F8000007E001F8000007F001
F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001
F8000007F001F8000007F001F8000007F001F8000007E001F800000FE001F800000FE001
F800000FE001F800000FC001F800001FC001F800001F8001FC00003F0001FE00003F0001
F600007E0001F70000FC0001E38001F80001C1C003E00001C0F81F800001803FFE000000
0007F000002C407EBE32>I<0001FF0000000FFFE000003F00F800007C001E0001F80007
0003F0001F0007E0003F800FC0007F800FC0007F801F80007F801F80007F803F00003F00
3F00001E007F000000007F000000007E00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
0000007F000000007F000000007F000000003F000000C03F800000C01F800001C01FC000
01800FC000038007E000070003F000060001F8001E0000FC003800003F01F000000FFFC0
000001FE0000222A7DA828>I<00000001F800000000FFF800000000FFF800000000FFF8
0000000007F80000000003F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F8000000FF01F8000007FFC1F800001F80F1F800007C0039F80001F8001DF8
0003F0000FF80007E00007F8000FC00003F8000FC00003F8001F800001F8003F800001F8
003F000001F8007F000001F8007F000001F8007F000001F8007E000001F800FE000001F8
00FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F8
00FE000001F800FE000001F800FE000001F8007E000001F8007F000001F8007F000001F8
003F000001F8003F800001F8001F800003F8001F800003F8000FC00007F80007E0000FF8
0003F0000DFC0001F8003DFE0000FC0071FFF0003F01E1FFF0000FFF81FFF00001FE01F8
002C407DBE32>I<0003FC0000001FFF8000007E07E00000F801F00001F000F80003E000
7C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F
807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0
FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F
000000007F000000007F000000003F000000C03F800000C01F800001C00FC00001800FC0
00038007E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE
0000222A7DA828>I<00001FC00000FFF00003F0380007C0FC000F81FE001F81FE003F01
FE003E01FE007E01FE007E00FC00FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
00FFFFFF00FFFFFF00FFFFFF0000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000001FE00
007FFFFE007FFFFE007FFFFE001F407FBF1C>I<000000007E000003FC01FF00000FFF07
8780003E07CE0F8000FC03FC0F8001F801F80F8003F000FC070003E0007C000007E0007E
000007E0007E00000FC0003F00000FC0003F00000FC0003F00000FC0003F00000FC0003F
00000FC0003F00000FC0003F00000FC0003F000007E0007E000007E0007E000003E0007C
000003F000FC000001F801F8000001FC03F0000001BE07C00000038FFF0000000303FC00
000007000000000007000000000007000000000007000000000007800000000007800000
000007C00000000003E00000000003FFFFF0000001FFFFFE000001FFFFFF8000007FFFFF
E00001FFFFFFF80007C0001FF8001F800003FC003F000000FE003E0000007E007C000000
3E007C0000003F00F80000001F00F80000001F00F80000001F00F80000001F00F8000000
1F00FC0000003F007C0000003E007E0000007E003F000000FC001F800001F8000FC00003
F00003F0000FC00000FE007F0000003FFFFC00000003FFC00000293D7EA82D>I<01F800
000000FFF800000000FFF800000000FFF80000000007F80000000003F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F803FC000001F80F
FF800001F83C0FC00001F8F003E00001F9C003F00001FB8001F80001FB0001F80001FF00
00FC0001FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF0
7FFFF8FFFFF07FFFF8FFFFF07FFFF82D3F7EBE32>I<01C00007F0000FF8000FF8000FF8
000FF8000FF80007F00001C0000000000000000000000000000000000000000000000000
0000000000000000000000000001F8007FF8007FF8007FF80007F80003F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80003FC00FFFFE0FFFFE0FFFFE0133D7EBC19>I<00007000
01FC0003FE0003FE0003FE0003FE0003FE0001FC00007000000000000000000000000000
00000000000000000000000000000000000000000000000000FE003FFE003FFE003FFE00
01FE0000FE00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00
007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00
007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00
007E00007E00007E00007E00007E00007E00007E00007E3C007E7E007CFF00FCFF00FCFF
00F8FF01F8FE01F07803E03E07C00FFF0001FC00175084BC1C>I<01F800FFF800FFF800
FFF80007F80003F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0
143F7EBE19>108 D<01F803FC0001FE0000FFF80FFF8007FFC000FFF83C0FC01E07E000
FFF8F003E07801F00007F9C003F0E001F80003FB8001F9C000FC0001FB0001F98000FC00
01FF0000FF80007E0001FE0000FF00007E0001FE0000FF00007E0001FC0000FE00007E00
01FC0000FE00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0003FC0001FE0000FF00FFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFC
FFFFF07FFFF83FFFFC46287EA74B>I<01F803FC0000FFF80FFF8000FFF83C0FC000FFF8
F003E00007F9C003F00003FB8001F80001FB0001F80001FF0000FC0001FE0000FC0001FE
0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFF
F07FFFF82D287EA732>I<0001FE0000000FFFC000003F03F000007C00F80001F0003E00
03E0001F0007C0000F8007C0000F800F800007C01F800007E01F000003E03F000003F03F
000003F07E000001F87E000001F87E000001F87E000001F8FE000001FCFE000001FCFE00
0001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FC7E0000
01F87E000001F87E000001F87F000003F83F000003F03F000003F01F800007E00F800007
C00FC0000FC007C0000F8003E0001F0001F0003E0000FC00FC00003F03F000000FFFC000
0001FE0000262A7DA82D>I<01F807F80000FFF81FFF0000FFF8780FC000FFF9E003F000
03FB8001F80001FF0000FC0001FE00007E0001FC00007F0001FC00003F8001F800001F80
01F800001FC001F800001FC001F800000FE001F800000FE001F800000FE001F800000FF0
01F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F0
01F8000007F001F8000007F001F8000007F001F800000FE001F800000FE001F800000FE0
01F800000FE001F800001FC001F800001FC001F800003F8001FC00003F0001FE00007F00
01FE0000FE0001FF0001FC0001FB8003F80001F9C007E00001F8F81F800001F83FFE0000
01F807F0000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000003FC00000000FFFFF0000000FFFFF0000000FFFFF0000000
2C3A7EA732>I<0000FF000C000007FFC01C00001F80F01C00007E00381C0000FC001C3C
0003F8000E3C0007F000077C0007E000037C000FC00003FC001FC00001FC003F800001FC
003F800000FC007F000000FC007F000000FC007F000000FC007F000000FC00FE000000FC
00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC
00FE000000FC00FE000000FC00FF000000FC007F000000FC007F000000FC007F000000FC
003F800000FC003F800001FC001FC00001FC000FC00003FC000FE00003FC0007E00007FC
0003F0000EFC0001F8001CFC00007E0078FC00003F01E0FC00000FFFC0FC000001FE00FC
0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC
0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC
0000000000FC0000000001FE000000007FFFF80000007FFFF80000007FFFF82D3A7DA730
>I<03F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183FC03F383FC01F703FC01F603FC01F6
01F801FE006001FC000001FC000001FC000001FC000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000003FC0000FFFFF800FFFFF800FFFFF8001E287EA723>I<007FC06003FFF8E007C03D
E01E000FE03C0003E0780001E0780001E0700000E0F00000E0F0000060F0000060F80000
60F8000060FC000060FF0000007FC000007FFE00003FFFE0001FFFFC0007FFFE0003FFFF
80007FFFC00007FFE000003FE000000FF0C00003F0C00001F8C00000F8E00000F8E00000
78E0000078F0000078F0000078F8000078F80000F0FC0000F0FC0001E0FE0001C0F78007
80F1E01F00E0FFFC00C01FE0001D2A7DA824>I<00180000001800000018000000180000
001800000018000000380000003800000038000000380000007800000078000000F80000
00F8000001F8000003F8000007F800001FFFFFC0FFFFFFC0FFFFFFC001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8006001F8006001F8006001F8006001F8006001F8006001F8006001F8006001F80060
00FC00E000FC00C000FC00C0007E01C0003F0380001F87000007FE000001F8001B397EB7
23>I<01F80000FC00FFF8007FFC00FFF8007FFC00FFF8007FFC0007F80003FC0003F800
01FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
01FC0001F80001FC0001F80001FC0001F80003FC0000F80003FC0000FC0007FC0000FC00
0EFE00007C001CFF00003E0038FFF8001F80F0FFF80007FFE0FFF80000FF00FC002D297E
A732>I<FFFFC007FFE0FFFFC007FFE0FFFFC007FFE007FC0001FF0003F800007C0003F8
0000780001F80000700001FC0000700000FC0000600000FC00006000007E0000C000007E
0000C000007F0001C000003F00018000003F00018000001F80030000001F80030000001F
C0070000000FC0060000000FC00600000007E00C00000007E00C00000007F01C00000003
F01800000003F01800000001F83000000001F83000000001FC7000000000FC6000000000
FC60000000007EC0000000007EC0000000007FC0000000003F80000000003F8000000000
1F00000000001F00000000001F00000000000E00000000000E0000002B287EA630>I<7F
FFC00FFFE07FFFC00FFFE07FFFC00FFFE003FF0007FE0000FF0003F800007F0003E00000
3F0003C000003F80038000001FC0070000000FC00E00000007E00C00000007F018000000
03F83800000001F87000000000FCE000000000FEC0000000007F80000000003F80000000
001F80000000000FC0000000000FE0000000001FE0000000003BF00000000071F8000000
00E1FC00000000C0FE00000001807E00000003803F00000007003F8000000E001FC00000
0C000FC000001C0007E00000380007F00000F80003F80001F80003FC000FFC0007FE00FF
FF001FFFF8FFFF001FFFF8FFFF001FFFF82D277FA630>120 D<FFFFC007FFE0FFFFC007
FFE0FFFFC007FFE007FC0001FF0003F800007C0001F80000780001F80000700001FC0000
700000FC0000600000FE00006000007E0000C000007E0000C000003F00018000003F0001
8000003F80038000001F80030000001F80030000000FC0060000000FC0060000000FE00E
00000007E00C00000007E00C00000003F01800000003F01800000003F83800000001F830
00000001FC3000000000FC6000000000FC60000000007EC0000000007EC0000000007FC0
000000003F80000000003F80000000001F00000000001F00000000001F00000000000E00
000000000E00000000000C00000000000C00000000001C00000000001800000000001800
00000000300000000000300000000000600000003800600000007C00E0000000FE00C000
0000FE01C0000000FE0180000000FE03000000007C0700000000700E00000000383C0000
00001FF80000000007E0000000002B3A7EA630>I<001C000000003E000000003F000000
003F800000003FC00000001FE00000000FF000000003F800000000FC000000007E000000
001F0000000007800000000380000000008000000000000000000000000000000000001F
F0000000FFFC000003E03F00000F000FC0001C0007E0001F0003F0003F8001F8003FC000
FC003FC000FC003FC000FC003FC0007E001F80007E000F00007E000000007E000000007E
000000007E000000007E0000001FFE000003FFFE00001FF87E00007F807E0001FC007E00
07F0007E000FE0007E001FC0007E003F80007E007F80007E007F00007E007F00007E03FE
00007E03FE00007E03FE00007E03FE0000FE03FE0000FE03FE0001FE037F0001BE037F00
03BE033F80071F061FC00E1F8E0FF03C0FFC03FFF007F8003FC003E0283B7CB92D>224
D<000E000000001F000000001F800000001FC00000001FE00000000FF000000007F80000
0001FC000000007E000000003F000000000F8000000003C000000001C000000000400000
00000000000000000000000000000003FC0000001FFF8000007E07E00000F801F00001F0
00F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F0000
0F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFF
C0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
7E000000007F000000007F000000007F000000003F000000C03F800000C01F800001C00F
C00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F01F000000F
FFC0000001FE0000223B7DB928>232 D<00000E000000001F000000003F000000007F00
000000FF00000001FE00000003FC00000007F00000000FC00000001F800000003E000000
0078000000007000000000400000000000000000000000000000000000000003FC000000
1FFF8000007E07E00000F801F00001F000F80003E0007C0007C0003E000FC0003F001F80
001F001F80001F803F00001F803F00000F807F00000F807F00000FC07E00000FC07E0000
0FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00000000FE00000000FE000000
00FE00000000FE00000000FE000000007E000000007F000000007F000000007F00000000
3F000000C03F800000C01F800001C00FC00001800FC000038007E000070003F0000E0001
F8001C0000FC003800003F01F000000FFFC0000001FE0000223B7DB928>I<0000C00000
0001E000000003F000000007F80000000F3C0000001E1E0000001C0E0000003807000000
7003800000E001C00001C000E00003800070000700003800020000100000000000000000
00000000000000000003FC0000001FFF8000007E07E00000F801F00001F000F80003E000
7C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F
807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0
FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F
000000007F000000007F000000003F000000C03F800000C01F800001C00FC00001800FC0
00038007E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE
0000223B7DB928>I<00300000780000FC0001FE0003CF000787800703800E01C01C00E0
380070700038E0001CC0000C80000400000000000000000000000000FC003FFC003FFC00
3FFC0003FC0001FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0001FE007FFFF07FFFF0
7FFFF0163A7FB919>238 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo eccc1095 10.95 21
/Fo 21 118 df<FFFFFFFFFFFEFFFFFFFFFFFE2F027F9832>21 D<1C007F00FF80FF80FF
C0FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C
001C003800700060000A1B76BE1D>39 D<00000FF80000007FFF000001FFFF800007F807
E0000FE000F0001F800070003F0001F8007E0003F800FC0007F801F80007F803F00007F8
07F00007F807E00003F00FE00001E00FC00000001FC00000001FC00000003F800000003F
800000003F800000007F800000007F800000007F007F80007F03FFE0007F0780F800FF1E
007E00FF18001F00FF38001F80FF70000FC0FF600007E0FFE00007F0FFC00003F0FFC000
03F8FF800003F8FF800001FCFF800001FCFF800001FCFF000001FEFF000001FEFF000001
FEFF000001FE7F000001FE7F000001FE7F000001FE7F000001FE7F800001FE3F800001FE
3F800001FE3F800001FC3F800001FC1F800003FC1FC00003F80FC00003F80FC00007F007
E00007E007F0000FE003F0001FC001F8001F8000FC007F00007F01FC00001FFFF8000007
FFE0000000FF0000273F7BBC32>54 D<1C007F00FF80FF80FF80FF80FF807F001C000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000001C007F00FF80FF80FF80FF80FF807F001C00092776A61D>58
D<0000000FFC0000C0000000FFFF8001C0000007FFFFE001C000001FF801F803C000007F
C0003E07C00001FE00000F07C00007FC0000038FC0000FF0000001DFC0001FE0000000FF
C0003FC00000007FC0007F800000003FC000FF000000001FC001FE000000001FC003FC00
0000000FC003FC0000000007C007F80000000007C00FF80000000003C00FF00000000003
C01FF00000000003C01FE00000000001C03FE00000000001C03FE00000000001C03FC000
00000000C07FC00000000000C07FC00000000000C07FC00000000000C07F800000000000
00FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF8000
0000000000FF80000000000000FF80000000000000FF80000000000000FF800000000000
00FF80000000000000FF80000000000000FF800000000000007F800000000000007FC000
00000000007FC00000000000C07FC00000000000C03FC00000000000C03FE00000000000
C03FE00000000000C01FE00000000001C01FF00000000001800FF00000000001800FF800
000000038007F800000000038003FC00000000030003FC00000000070001FE000000000E
0000FF000000000E00007F800000001C00003FC00000003800001FE00000007000000FF0
000000E0000007FC000003C0000001FE000007800000007FC0001F000000001FF801FC00
00000007FFFFF00000000000FFFFC000000000000FFC0000003A427ABF47>67
D<FFFF8000003FFFFCFFFFC000003FFFFCFFFFE000003FFFFC007FF0000001FF80007FF0
0000007E00006FF80000003C00006FFC00000018000067FC00000018000063FE00000018
000061FF00000018000061FF00000018000060FF800000180000607FC00000180000607F
E00000180000603FE00000180000601FF00000180000601FF80000180000600FF8000018
00006007FC00001800006003FE00001800006003FE00001800006001FF00001800006000
FF80001800006000FFC00018000060007FC00018000060003FE00018000060003FF00018
000060001FF00018000060000FF800180000600007FC00180000600007FC001800006000
03FE00180000600001FF00180000600001FF80180000600000FF801800006000007FC018
00006000007FE01800006000003FE01800006000001FF01800006000000FF81800006000
000FF818000060000007FC18000060000003FE18000060000003FF18000060000001FF18
000060000000FF98000060000000FFD80000600000007FD80000600000003FF800006000
00001FF80000600000001FF80000600000000FF800006000000007F800006000000007F8
00006000000003F800006000000001F80000F000000001F80001F800000000F80007FE00
0000007800FFFFF00000003800FFFFF00000003800FFFFF000000018003E3E7BBD49>78
D<000000C0000000000001E0000000000001E0000000000001E0000000000003F0000000
000003F0000000000007F8000000000007F8000000000007F800000000000CFC00000000
000CFC00000000001CFE0000000000187E0000000000187E0000000000303F0000000000
303F0000000000703F8000000000601F8000000000601F8000000000C00FC000000000C0
0FC000000001C00FE0000000018007E0000000018007E0000000030003F0000000030003
F0000000070003F8000000060001F8000000060001F80000000C0000FC0000000FFFFFFC
0000001FFFFFFE0000001800007E0000001800007E0000003000003F0000003000003F00
00007000003F8000006000001F8000006000001F800000E000000FC00000C000000FC000
01C000000FE00001C0000007E00003C0000007F00007E0000007F0001FF000000FF800FF
F80000FFFFC0FFF80000FFFFC032307DAF38>97 D<FFFFFFF80000FFFFFFFF800007F800
1FE00003F00003F00003F00000FC0003F000007E0003F000001F0003F000000F8003F000
000FC003F0000007E003F0000003E003F0000003F003F0000001F003F0000001F803F000
0001F803F0000001FC03F0000000FC03F0000000FC03F0000000FC03F0000000FE03F000
0000FE03F0000000FE03F0000000FE03F0000000FE03F0000000FE03F0000000FE03F000
0000FE03F0000000FE03F0000000FE03F0000000FC03F0000000FC03F0000000FC03F000
0001F803F0000001F803F0000001F803F0000003F003F0000003E003F0000007E003F000
0007C003F000000F8003F000001F0003F000003E0003F00000FC0003F00003F80007F800
1FE000FFFFFFFF8000FFFFFFFC00002F2F7BAE39>100 D<FFFFFFFFFE00FFFFFFFFFE00
07F80001FE0003F000007E0003F000001F0003F000000F0003F00000070003F000000700
03F00000030003F00000030003F00000030003F00000030003F00000018003F000000180
03F00030018003F00030018003F00030000003F00030000003F00030000003F000700000
03F000F0000003F001F0000003FFFFF0000003FFFFF0000003F001F0000003F000F00000
03F00070000003F00030000003F00030000003F00030006003F00030006003F000300060
03F0000000C003F0000000C003F0000000C003F0000000C003F0000001C003F0000001C0
03F00000018003F00000038003F00000038003F00000078003F000000F8003F000003F80
07F80001FF00FFFFFFFFFF00FFFFFFFFFF002B2F7BAE33>I<00000FF800300000007FFF
0070000003F807C07000000FC000F0F000001F000039F000007E00001FF00000FC00000F
F00001F8000007F00003F0000003F00007E0000001F0000FE0000001F0000FC0000000F0
001F80000000F0001F8000000070003F8000000070003F0000000070007F000000003000
7F0000000030007F000000003000FE000000000000FE000000000000FE000000000000FE
000000000000FE000000000000FE000000000000FE000000000000FE000000000000FE00
0000000000FE000007FFFF80FE000007FFFF807F0000000FF8007F00000007F0007F0000
0003F0003F00000003F0003F80000003F0001F80000003F0001F80000003F0000FC00000
03F0000FE0000003F00007E0000003F00003F0000003F00001F8000003F00000FC000007
F000007E00000FF000001F00001DF000000FC00038F0000003F803F0700000007FFFC030
0000000FFC00000031317BAF3B>103 D<FFFFC00FFFFCFFFFC00FFFFC07F800007F8003
F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003
F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003
F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003
F000003F0003FFFFFFFF0003FFFFFFFF0003F000003F0003F000003F0003F000003F0003
F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003
F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003F000003F0003
F000003F0003F000003F0003F000003F0003F000003F0003F000003F0007F800007F80FF
FFC00FFFFCFFFFC00FFFFC2E2F7BAE38>I<FFFFC0FFFFC007F80003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00007F800FFFFC0FFFFC0122F7BAE1C>I<FFFFF00000FFFFF0000007FC0000
0003F000000003F000000003F000000003F000000003F000000003F000000003F0000000
03F000000003F000000003F000000003F000000003F000000003F000000003F000000003
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000C03F000000C03F000
000C03F000000C03F000001C03F000001803F000001803F000001803F000003803F00000
3803F000007803F000007803F00000F803F00001F803F00007F007F8003FF0FFFFFFFFF0
FFFFFFFFF0262F7BAE2F>108 D<FFF000000007FF80FFF80000000FFF8007F80000000F
F00003F80000000FE000037C0000001BE000037C0000001BE000033E00000033E000033E
00000033E000033E00000033E000031F00000063E000031F00000063E000030F800000C3
E000030F800000C3E000030F800000C3E0000307C0000183E0000307C0000183E0000303
E0000303E0000303E0000303E0000303E0000303E0000301F0000603E0000301F0000603
E0000300F8000C03E0000300F8000C03E00003007C001803E00003007C001803E0000300
7C001803E00003003E003003E00003003E003003E00003001F006003E00003001F006003
E00003001F006003E00003000F80C003E00003000F80C003E000030007C18003E0000300
07C18003E000030007C18003E000030003E30003E000030003E30003E000030001F60003
E000030001F60003E000030001F60003E000030000FC0003E000078000FC0003E0000FC0
00780003E0001FE000780007F000FFFC007800FFFF80FFFC003000FFFF80392F7AAE45>
I<FFF00000FFFCFFF80000FFFC07F800001FE003FC00000FC003FE00000780037F000003
00033F00000300033F80000300031FC0000300030FC0000300030FE00003000307F00003
000303F80003000301F80003000301FC0003000300FE00030003007E00030003007F0003
0003003F80030003001FC0030003000FC0030003000FE00300030007F00300030003F003
00030003F80300030001FC0300030000FE0300030000FE03000300007F03000300003F83
000300001F83000300001FC3000300000FE30003000007F30003000007F30003000003FB
0003000001FF0003000000FF0003000000FF00030000007F00030000003F00030000003F
00078000001F000FC000000F001FE000000700FFFC00000700FFFC000003002E2F7BAE38
>I<00001FF800000000FFFF00000007F00FE000000F8001F000003F0000FC00007C0000
3E0000F800001F0001F000000F8003E0000007C007E0000007E00FC0000003F00FC00000
03F01F80000001F81F80000001F83F00000000FC3F00000000FC7F00000000FE7F000000
00FE7E000000007E7E000000007EFE000000007FFE000000007FFE000000007FFE000000
007FFE000000007FFE000000007FFE000000007FFE000000007FFE000000007FFE000000
007F7F00000000FE7F00000000FE7F00000000FE3F00000000FC3F80000001FC3F800000
01FC1F80000001F80FC0000003F00FC0000003F007E0000007E003F000000FC001F80000
1F8000F800001F00007E00007E00003F0000FC00000FC003F0000007F00FE0000000FFFF
000000001FF8000030317BAF3A>I<00001FF800000000FFFF00000007F00FE000000FC0
03F000003F0000FC00007C00003E0000F800001F0001F000000F8003F000000FC007E000
0007E00FC0000003F00FC0000003F01F80000001F81F80000001F83F00000000FC3F0000
0000FC7F00000000FE7F00000000FE7E000000007E7E000000007EFE000000007FFE0000
00007FFE000000007FFE000000007FFE000000007FFE000000007FFE000000007FFE0000
00007FFE000000007FFE000000007F7E000000007E7F00000000FE7F00000000FE3F0000
0000FC3F00000000FC3F80000001FC1F80000001F80FC0000003F00FC003C003F007E00F
F007E003E01C3C07C001F0380C0F8000F8300E1F00007C30073E00003F3007FC00000FF8
03F0000007FC0FE0000000FFFF800300001FFBC00300000001C00300000001E007000000
01E00700000001F00F00000001F83E00000000FFFE00000000FFFE000000007FFC000000
007FFC000000003FF8000000001FF00000000007C0303D7BAF3A>113
D<FFFFFFE0000000FFFFFFFC00000007F8007F80000003F0000FC0000003F00003F00000
03F00001F8000003F00000FC000003F00000FE000003F000007E000003F000007F000003
F000007F000003F000007F000003F000007F000003F000007F000003F000007F000003F0
00007E000003F00000FE000003F00000FC000003F00001F8000003F00003F0000003F000
0FC0000003F0007F80000003FFFFFC00000003FFFFF800000003F000FE00000003F0003F
00000003F0001F80000003F0000FC0000003F00007E0000003F00007E0000003F00003F0
000003F00003F0000003F00003F0000003F00003F0000003F00003F0000003F00003F800
0003F00003F8000003F00003F8000003F00003F8000003F00003F8018003F00003FC0180
03F00003FC018003F00001FC038003F00001FC030007F80000FE0700FFFFC0007F0E00FF
FFC0001FFC000000000003F00031307BAE37>I<003FC00C00FFF81C03E03E1C0F0007BC
1E0001FC3C0000FC3800007C7800007C7000003CF000003CF000001CF000001CF000001C
F800000CF800000CFC00000CFE0000007F0000007F8000003FF800003FFF80001FFFF800
0FFFFF0003FFFFC000FFFFE0003FFFF00001FFF800001FFC000003FC000000FE0000007E
0000003F0000001FC000001FC000001FC000000FC000000FE000000FE000000FE000000E
F000001EF000001EF800003CFC000038FF000070F38001E0E1F807C0E07FFF00C007FC00
20317BAF2A>I<7FFFFFFFFFF87FFFFFFFFFF87F001FE003F87C000FC000F878000FC000
7870000FC0003860000FC0001860000FC00018E0000FC0001CE0000FC0001CC0000FC000
0CC0000FC0000CC0000FC0000CC0000FC0000CC0000FC0000CC0000FC0000C00000FC000
0000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000
0000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000
0000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000
0000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000
0000000FC0000000000FC0000000001FE0000000003FF00000001FFFFFE000001FFFFFE0
002E2F7CAE36>I<FFFFC000FFFCFFFFC000FFFC07F800001FE003F000000FC003F00000
078003F00000030003F00000030003F00000030003F00000030003F00000030003F00000
030003F00000030003F00000030003F00000030003F00000030003F00000030003F00000
030003F00000030003F00000030003F00000030003F00000030003F00000030003F00000
030003F00000030003F00000030003F00000030003F00000030003F00000030003F00000
030003F00000030003F00000030003F00000030003F00000030003F00000030003F00000
030003F00000070001F80000060001F80000060000F800000E0000FC00001C00007C0000
1800003E00003800001F00007000000F8000E0000007C003C0000001F80F000000007FFC
000000000FF000002E307BAE38>I E
%EndDVIPSBitmapFont
/Fp 46[114 209[{ fa5free0 ReEncodeFont }1 90.9091
/FontAwesome5Free-Solid rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -396
a
SDict begin H.S end
 -136 -396 a -136 -396 a
SDict begin H.R end
 -136 -396 a -136 -396 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-396 a 0 TeXcolorgray -128 -297 a Fp(\321)61 b Fo(\025)34
b(C6)f(:)43 b(Notions)36 b(d'algorithmique)1892 b Fn(A)m(ctivit\351s)31
b(\025)f Fo(nsi)35 b Fm(1)4083 -330 y Fl(e)p -128 -260
4252 4 v Black 0 TeXcolorgray -128 -180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -180 a
-128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -180 a -128
-180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -180 a -128 -180
a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -180 a -128 -180 a
SDict begin H.S end
 -128 -180 a -128 -180 a
SDict begin 13.6 H.A end
 -128
-180 a -128 -180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -180 a 91 x Fk(q)c Fj(A)m(ctivit\351)h(2)e
Fn(:)g Fi(Corr)-5 b(e)g(ction)34 b(d'un)e(algorithme)-128
-71 y
SDict begin H.S end
 -128 -71 a -128 -71 a
SDict begin 13.6 H.A end
 -128 -71 a -128 -71 a
SDict begin [/View [/XYZ H.V]/Dest (Question.2.1) cvn /DEST pdfmark
end
 -128
-71 a 0 TeXcolorgray 13 47 a Fn(1.)p 0 TeXcolorgray 61
w(F)-8 b(onction)32 b(de)e(rec)m(herc)m(he)j(du)d(minim)m(um)144
160 y(On)g(consid\350re)i(la)e(fonction)h(suiv)-5 b(an)m(te)31
b(:)-128 210 y
SDict begin H.S end
 -128 210 a -128 210 a
SDict begin 13.6 H.A end
 -128 210 a -128
210 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-1) cvn /DEST pdfmark
end
 -128 210 a 0.95 TeXcolorgray 399 246 3754 29 v
0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray 399 246
4 29 v 399 221 29 4 v 427 221 3698 4 v 4125 221 29 4
v 4149 246 4 29 v 0.95 TeXcolorgray 402 346 25 100 v
0 TeXcolorgray 0.95 TeXcolorgray 399 346 4 100 v 0 TeXcolorgray
399 346 V 0.95 TeXcolorgray 427 346 3698 100 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 346 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 346 4 100 v 0 TeXcolorgray 4149 346
V 427 316 a
SDict begin H.S end
 427 316 a 427 316 a
SDict begin 12 H.A end
 427 316 a 427 316 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 427
316 a -109 w Fh(1)88 b Fg(d)5 b(e)g(f)53 b Ff(minimum)12
b(\()26 b(l)16 b(i)h(s)g(t)g(e)25 b(\))e(:)p 0.95 TeXcolorgray
402 445 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 399
445 4 100 v 0 TeXcolorgray 399 445 V 0.95 TeXcolorgray
427 445 3698 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
445 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 445
4 100 v 0 TeXcolorgray 4149 445 V 427 416 a
SDict begin H.S end
 427 416 a
427 416 a
SDict begin 12 H.A end
 427 416 a 427 416 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 427 416 a -109 w Fh(2)290
b Ff(m)8 b(i)g(n)g(i)49 b(=)59 b(l)17 b(i)g(s)f(t)h(e)32
b([)16 b(0)f(])p 0.95 TeXcolorgray 402 545 25 100 v 0
TeXcolorgray 0.95 TeXcolorgray 399 545 4 100 v 0 TeXcolorgray
399 545 V 0.95 TeXcolorgray 427 545 3698 100 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 545 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 545 4 100 v 0 TeXcolorgray 4149 545
V 427 515 a
SDict begin H.S end
 427 515 a 427 515 a
SDict begin 12 H.A end
 427 515 a 427 515 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 427
515 a -109 w Fh(3)287 b Fg(f)5 b(o)g(r)55 b Ff(k)i Fg(i)t(n)i(r)5
b(a)g(n)g(g)g(e)14 b Ff(\()d(1)20 b(,)c Fg(l)5 b(e)g(n)11
b Ff(\()26 b(l)17 b(i)g(s)f(t)h(e)26 b(\))18 b(\))k(:)p
0.95 TeXcolorgray 402 645 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 399 645 4 100 v 0 TeXcolorgray 399 645 V
0.95 TeXcolorgray 427 645 3698 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4124 645 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray
4149 645 4 100 v 0 TeXcolorgray 4149 645 V 427 615 a
SDict begin H.S end

427 615 a 427 615 a
SDict begin 12 H.A end
 427 615 a 427 615 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 427 615 a -109
w Fh(4)486 b Fg(i)t(f)70 b Ff(l)17 b(i)g(s)f(t)h(e)30
b([)17 b(k)6 b(])g(<)k(m)e(i)g(n)g(i)20 b(:)p 0.95 TeXcolorgray
402 744 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 399
744 4 100 v 0 TeXcolorgray 399 744 V 0.95 TeXcolorgray
427 744 3698 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
744 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 744
4 100 v 0 TeXcolorgray 4149 744 V 427 714 a
SDict begin H.S end
 427 714 a
427 714 a
SDict begin 12 H.A end
 427 714 a 427 714 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.5) cvn /DEST pdfmark
end
 427 714 a -109 w Fh(5)688
b Ff(m)8 b(i)g(n)g(i=)h(l)16 b(i)h(s)g(t)g(e)30 b([)17
b(k)f(])p 0.95 TeXcolorgray 402 844 25 100 v 0 TeXcolorgray
0.95 TeXcolorgray 399 844 4 100 v 0 TeXcolorgray 399
844 V 0.95 TeXcolorgray 427 844 3698 100 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 844 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 844 4 100 v 0 TeXcolorgray 4149 844
V 427 814 a
SDict begin H.S end
 427 814 a 427 814 a
SDict begin 12 H.A end
 427 814 a 427 814 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.6) cvn /DEST pdfmark
end
 427
814 a -109 w Fh(6)288 b Fg(r)5 b(e)g(t)g(u)g(r)g(n)61
b Ff(m)8 b(i)g(n)g(i)p 0.95 TeXcolorgray 399 872 3754
29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
399 872 4 29 v 400 872 29 4 v 427 872 3698 4 v 4125 872
29 4 v 4149 872 4 29 v 0 TeXcolorgray 0 TeXcolorgray
-128 922 a
SDict begin H.S end
 -128 922 a -128 922 a
SDict begin 13.6 H.A end
 -128 922 a -128 922
a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 922 a 0 TeXcolorgray 214 1007 a Fn(a\))p 0 TeXcolorgray
30 w(Que)31 b(fait)f(cette)h(fonction)15 b(?)1306 1007
y
SDict begin H.S end
 1306 1007 a 1306 1007 a
SDict begin 13.6 H.A end
 1306 1007 a 1306 1007 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 1306
1007 a 0 TeXcolorgray 209 1120 a Fn(b\))p 0 TeXcolorgray
30 w(Ecrire)32 b(une)f(c)m(ha\356ne)g(de)g(do)s(cumen)m(tation)i(p)s
(our)d(cette)h(fonction.)2588 1120 y
SDict begin H.S end
 2588 1120 a 2588
1120 a
SDict begin 13.6 H.A end
 2588 1120 a 2588 1120 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 2588 1120 a 0 TeXcolorgray
219 1232 a Fn(c\))p 0 TeXcolorgray 30 w(Ajouter)26 b(les)g
(pr\351conditions)h(suiv)-5 b(an)m(tes)27 b(sous)e(forme)h
(d'instructions)h Fe(assert)f Fn(:)g(la)g(liste)f(pass\351e)h(en)g
(argumen)m(t)324 1345 y(est)31 b(non)f(vide)h(et)f(ne)h(con)m(tien)m(t)
h(que)e(des)h(v)-5 b(aleurs)30 b(de)h(t)m(yp)s(e)f(en)m(tier)i(ou)e
(\035ottan)m(t.)3088 1345 y
SDict begin H.S end
 3088 1345 a 3088 1345 a
SDict begin 13.6 H.A end
 3088
1345 a 3088 1345 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 3088 1345 a 0 TeXcolorgray 209 1458
a Fn(d\))p 0 TeXcolorgray 30 w(Prop)s(oser)h(un)g(jeu)f(de)h(tests)f
(sous)f(forme)i(d'instruction)h Fe(assert)e Fn(p)s(our)g(cette)h
(fonction.)-128 1481 y
SDict begin H.S end
 -128 1481 a -128 1481 a
SDict begin 13.6 H.A end
 -128 1481
a -128 1481 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 1481 a 0 TeXcolorgray 13 1594 a Fn(2.)p
0 TeXcolorgray 61 w(Probl\350me)h(de)e(la)h(correction)144
1707 y Fd(*)49 b Fn(Le)25 b(terme)g(\023)20 b(correction)h(\024)50
b(ne)25 b(d\351signe)g(pas)f(ici)h(l'action)g(de)g(corriger,)h(on)e
(dit)h(qu'un)g(algorithme)h(est)e Fm(correct)144 1820
y Fn(lorsqu'il)30 b(fournit)h(bien)g(la)f(r\351p)s(onse)h(attendue)g
(\340)g(un)f(probl\350me)i(dans)f(tous)f(les)g(cas.)-128
1837 y
SDict begin H.S end
 -128 1837 a -128 1837 a
SDict begin 13.6 H.A end
 -128 1837 a -128 1837
a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 1837 a 0 TeXcolorgray 214 1933 a Fn(a\))p 0 TeXcolorgray
30 w(On)k(note)g Fc(e)724 1947 y Fb(0)763 1933 y Fc(;)15
b(e)845 1947 y Fb(1)886 1933 y Fc(;)g(e)968 1947 y Fb(2)1008
1933 y Fc(;)g(:::)34 b Fn(les)f(\351l\351men)m(ts)i(de)e(la)g(liste)h
(pass\351e)f(en)g(param\350tre.)i(Que)f(con)m(tien)m(t)h(la)f(v)-5
b(ariable)34 b Fe(mini)324 2045 y Fn(a)m(v)-5 b(an)m(t)30
b(d'en)m(trer)g(dans)f(la)g(b)s(oucle)g Fe(for)15 b Fn(?)28
b(Le)h(donner)g(sous)f(la)h(forme)g(du)g(minim)m(um)h(d'une)f(liste)g
(d'\351l\351men)m(ts.)4124 2045 y
SDict begin H.S end
 4124 2045 a 4124 2045
a
SDict begin 13.6 H.A end
 4124 2045 a 4124 2045 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 4124 2045 a 0 TeXcolorgray
209 2158 a Fn(b\))p 0 TeXcolorgray 30 w(Donner)36 b(sous)f(la)g(forme)g
(du)g(minim)m(um)i(d'une)f(liste)f(d'\351l\351men)m(ts,)i(le)e(con)m
(ten)m(u)i(de)e(la)h(v)-5 b(ariable)35 b Fe(mini)g Fn(apr\350s)324
2271 y(un)c(passage)f(dans)h(la)f(b)s(oucle.)1403 2271
y
SDict begin H.S end
 1403 2271 a 1403 2271 a
SDict begin 13.6 H.A end
 1403 2271 a 1403 2271 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 1403
2271 a 0 TeXcolorgray 219 2384 a Fn(c\))p 0 TeXcolorgray
30 w(On)k(c)m(herc)m(he)g(\340)f(prouv)m(er)h(que)f(notre)h(fonction)f
(est)g Fi(c)-5 b(orr)g(e)g(cte)43 b Fn(c'est)32 b(\340)h(dire)h
(qu'elle)f(ren)m(v)m(oie)h(le)f(minim)m(um)i(de)324 2497
y Fm(n'imp)s(orte)29 b Fn(quelle)i(liste)f(pass\351e)h(en)f
(param\350tre.)i(Les)f(tests)f(e\033ectu\351s)g(su\036sen)m(t-ils)15
b(?)3367 2497 y
SDict begin H.S end
 3367 2497 a 3367 2497 a
SDict begin 13.6 H.A end
 3367 2497 a 3367
2497 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 3367 2497 a 0 TeXcolorgray 209 2610 a Fn(d\))p
0 TeXcolorgray 30 w(M\352me)31 b(question)g(apr\350s)f(deux)h
(passages,)f(apr\350s)g(trois)h(passages.)2627 2610 y
SDict begin H.S end

2627 2610 a 2627 2610 a
SDict begin 13.6 H.A end
 2627 2610 a 2627 2610 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 2627
2610 a 0 TeXcolorgray 219 2723 a Fn(e\))p 0 TeXcolorgray
30 w(Prop)s(oser)42 b(une)g(propri\351t\351)g(p)s(ortan)m(t)h(sur)e(la)
g(v)-5 b(ariable)42 b Fe(mini)f Fn(et)h(qui)f(reste)g(vraie)g(a)m(v)-5
b(an)m(t)43 b(d'en)m(trer)g(dans)e(la)324 2836 y(b)s(oucle)31
b(et)g(\340)f(c)m(haque)h(it\351ration)h(dans)e(la)h(b)s(oucle.)2078
2836 y
SDict begin H.S end
 2078 2836 a 2078 2836 a
SDict begin 13.6 H.A end
 2078 2836 a 2078 2836
a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 2078 2836 a 0 TeXcolorgray 225 2949 a Fn(f)7 b(\))p
0 TeXcolorgray 29 w(Mon)m(trer)32 b(que)e(cette)h(propri\351t\351)h
(est)e(vraie.)324 3062 y Fd(\376)56 b Fn(On)30 b(prouv)m(era)i
(successiv)m(emen)m(t)g(que)e(:)p 0 TeXcolorgray 374
3206 a(\026)p 0 TeXcolorgray 30 w(La)h(propri\351t\351)h(est)e(vraie)h
(a)m(v)-5 b(an)m(t)31 b(d'en)m(trer)h(dans)f(la)f(b)s(oucle.)p
0 TeXcolorgray 374 3350 a(\026)p 0 TeXcolorgray 30 w(Si)h(la)f
(propri\351t\351)i(est)e(vraie)h(lors)f(d'une)h(it\351ration)h(alors)e
(elle)h(reste)f(vraie)h(\340)f(l'it\351ration)i(suiv)-5
b(an)m(te.)-128 3399 y
SDict begin H.S end
 -128 3399 a -128 3399 a
SDict begin 13.6 H.A end
 -128 3399
a -128 3399 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -128 3399 a 0 TeXcolorgray 13 3517 a Fn(3.)p
0 TeXcolorgray 61 w(Conclure)31 b(sur)f(la)h(correction)h(de)e(la)h
(fonction.)p 0 TeXcolorgray 0 TeXcolorgray 1593 3652
355 5 v 1948 3677 a Fk(u)p 2019 3652 V -128 3839 a
SDict begin H.S end
 -128
3839 a -128 3839 a
SDict begin 13.6 H.A end
 -128 3839 a -128 3839 a
SDict begin [/View [/XYZ H.V]/Dest (Exercise.3) cvn /DEST pdfmark end
 -128 3839
a 65 x Fk(q)g Fj(A)m(ctivit\351)h(3)e Fn(:)g Fi(T)-7
b(erminaison)31 b(d'un)i(algorithme)-128 3921 y
SDict begin H.S end
 -128
3921 a -128 3921 a
SDict begin 13.6 H.A end
 -128 3921 a -128 3921 a
SDict begin [/View [/XYZ H.V]/Dest (Question.3.1) cvn /DEST pdfmark
end
 -128 3921
a 0 TeXcolorgray 13 4039 a Fn(1.)p 0 TeXcolorgray 61
w(Multiplier)e(deux)f(en)m(tiers)i(en)e(faisan)m(t)h(des)f(additions)
144 4152 y(On)g(consid\350re)i(la)e(fonction)h(suiv)-5
b(an)m(te)31 b(:)-128 4202 y
SDict begin H.S end
 -128 4202 a -128 4202 a
SDict begin 13.6 H.A end

-128 4202 a -128 4202 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-2) cvn /DEST pdfmark
end
 -128 4202 a 0.95 TeXcolorgray
399 4238 3754 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0
TeXcolorgray 399 4238 4 29 v 399 4214 29 4 v 427 4214
3698 4 v 4125 4214 29 4 v 4149 4238 4 29 v 0.95 TeXcolorgray
402 4338 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 399
4338 4 100 v 0 TeXcolorgray 399 4338 V 0.95 TeXcolorgray
427 4338 3698 100 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 4338 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
4338 4 100 v 0 TeXcolorgray 4149 4338 V 427 4308 a
SDict begin H.S end
 427
4308 a 427 4308 a
SDict begin 12 H.A end
 427 4308 a 427 4308 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 427 4308 a -109
w Fh(1)88 b Fg(d)5 b(e)g(f)58 b Ff(m)6 b(u)g(l)g(t)14
b(\()d(n)k(,)h(p)10 b(\))23 b(:)p 0.95 TeXcolorgray 402
4438 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 399 4438
4 100 v 0 TeXcolorgray 399 4438 V 0.95 TeXcolorgray 427
4438 3698 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
4438 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 4438
4 100 v 0 TeXcolorgray 4149 4438 V 427 4408 a
SDict begin H.S end
 427 4408
a 427 4408 a
SDict begin 12 H.A end
 427 4408 a 427 4408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.2) cvn /DEST pdfmark
end
 427 4408 a -109 w
Fh(2)292 b Ff(p)10 b(r)g(o)g(d)g(u)g(i)g(t)53 b(=)46
b(0)p 0.95 TeXcolorgray 402 4537 25 100 v 0 TeXcolorgray
0.95 TeXcolorgray 399 4537 4 100 v 0 TeXcolorgray 399
4537 V 0.95 TeXcolorgray 427 4537 3698 100 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 4537 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 4537 4 100 v 0 TeXcolorgray 4149 4537
V 427 4507 a
SDict begin H.S end
 427 4507 a 427 4507 a
SDict begin 12 H.A end
 427 4507 a 427 4507
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.3) cvn /DEST pdfmark
end
 427 4507 a -109 w Fh(3)285 b Ff(k)46 b(=)d(p)p 0.95
TeXcolorgray 402 4637 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray
399 4637 4 100 v 0 TeXcolorgray 399 4637 V 0.95 TeXcolorgray
427 4637 3698 100 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 4637 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
4637 4 100 v 0 TeXcolorgray 4149 4637 V 427 4607 a
SDict begin H.S end
 427
4607 a 427 4607 a
SDict begin 12 H.A end
 427 4607 a 427 4607 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.4) cvn /DEST pdfmark
end
 427 4607 a -109
w Fh(4)287 b Fg(w)5 b(h)g(i)g(l)g(e)56 b Ff(k)9 b(>)c(0)g(:)p
0.95 TeXcolorgray 402 4737 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 399 4737 4 100 v 0 TeXcolorgray 399 4737
V 0.95 TeXcolorgray 427 4737 3698 100 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 4737 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 4737 4 100 v 0 TeXcolorgray 4149 4737
V 427 4707 a
SDict begin H.S end
 427 4707 a 427 4707 a
SDict begin 12 H.A end
 427 4707 a 427 4707
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.5) cvn /DEST pdfmark
end
 427 4707 a -109 w Fh(5)484 b Ff(k)l(=)-6 b(k)r Fa(\000)n
Ff(1)p 0.95 TeXcolorgray 402 4836 25 100 v 0 TeXcolorgray
0.95 TeXcolorgray 399 4836 4 100 v 0 TeXcolorgray 399
4836 V 0.95 TeXcolorgray 427 4836 3698 100 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 4836 25 100 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 4836 4 100 v 0 TeXcolorgray 4149 4836
V 427 4806 a
SDict begin H.S end
 427 4806 a 427 4806 a
SDict begin 12 H.A end
 427 4806 a 427 4806
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.6) cvn /DEST pdfmark
end
 427 4806 a -109 w Fh(6)492 b Ff(p)10 b(r)g(o)g(d)g(u)g(i)g(t)53
b(=)f(p)10 b(r)g(o)g(d)g(u)g(i)g(t)s(+)-6 b(n)p 0.95
TeXcolorgray 402 4936 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray
399 4936 4 100 v 0 TeXcolorgray 399 4936 V 0.95 TeXcolorgray
427 4936 3698 100 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 4936 25 100 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
4936 4 100 v 0 TeXcolorgray 4149 4936 V 427 4906 a
SDict begin H.S end
 427
4906 a 427 4906 a
SDict begin 12 H.A end
 427 4906 a 427 4906 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.7) cvn /DEST pdfmark
end
 427 4906 a -109
w Fh(7)288 b Fg(r)5 b(e)g(t)g(u)g(r)g(n)64 b Ff(p)10
b(r)g(o)g(d)g(u)g(i)g(t)p 0.95 TeXcolorgray 399 4964
3754 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
399 4964 4 29 v 400 4964 29 4 v 427 4964 3698 4 v 4125
4964 29 4 v 4149 4964 4 29 v 0 TeXcolorgray 0 TeXcolorgray
-128 5014 a
SDict begin H.S end
 -128 5014 a -128 5014 a
SDict begin 13.6 H.A end
 -128 5014 a -128
5014 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -128 5014 a 0 TeXcolorgray 214 5099 a Fn(a\))p
0 TeXcolorgray 30 w(Que)31 b(fait)f(cette)h(fonction)15
b(?)1306 5099 y
SDict begin H.S end
 1306 5099 a 1306 5099 a
SDict begin 13.6 H.A end
 1306 5099 a 1306
5099 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 1306 5099 a 0 TeXcolorgray 209 5212 a Fn(b\))p
0 TeXcolorgray 30 w(Ecrire)32 b(une)f(c)m(ha\356ne)g(de)g(do)s(cumen)m
(tation)i(p)s(our)d(cette)h(fonction.)2588 5212 y
SDict begin H.S end
 2588
5212 a 2588 5212 a
SDict begin 13.6 H.A end
 2588 5212 a 2588 5212 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 2588 5212
a 0 TeXcolorgray 219 5324 a Fn(c\))p 0 TeXcolorgray 30
w(Ajouter)40 b(les)g(pr\351conditions)i(suiv)-5 b(an)m(tes)40
b(sous)f(forme)h(d'instructions)h Fe(assert)f Fn(:)g(les)f(argumen)m
(ts)j(son)m(t)e(des)324 5437 y(en)m(tiers)32 b(p)s(ositifs.)951
5437 y
SDict begin H.S end
 951 5437 a 951 5437 a
SDict begin 13.6 H.A end
 951 5437 a 951 5437 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 951
5437 a 0 TeXcolorgray 209 5550 a Fn(d\))p 0 TeXcolorgray
30 w(Prop)s(oser)f(un)g(jeu)f(de)h(tests)f(sous)f(forme)i
(d'instruction)h Fe(assert)e Fn(p)s(our)g(cette)h(fonction.)-128
5573 y
SDict begin H.S end
 -128 5573 a -128 5573 a
SDict begin 13.6 H.A end
 -128 5573 a -128 5573
a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -128 5573 a 0 TeXcolorgray 13 5686 a Fn(2.)p 0 TeXcolorgray
61 w(T)-8 b(erminaison)32 b(de)e(cet)h(algorithme)-128
5703 y
SDict begin H.S end
 -128 5703 a -128 5703 a
SDict begin 13.6 H.A end
 -128 5703 a -128 5703
a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -128 5703 a 0 TeXcolorgray 214 5799 a Fn(a\))p 0 TeXcolorgray
30 w(Quels)e(son)m(t)f(les)g(v)-5 b(aleurs)28 b(successiv)m(es)g
(prises)g(par)g(la)h(v)-5 b(ariable)28 b Fe(k)g Fn(lors)g(de)h(c)m
(haque)g(passage)f(dans)g(la)g(b)s(oucle)15 b(?)4124
5799 y
SDict begin H.S end
 4124 5799 a 4124 5799 a
SDict begin 13.6 H.A end
 4124 5799 a 4124 5799
a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 4124 5799 a 0 TeXcolorgray 209 5912 a Fn(b\))p 0 TeXcolorgray
30 w(Conclure.)324 6024 y Fd(\376)63 b Fn(On)37 b(p)s(ourra)h(utiliser)
g(la)g(propri\351t\351)g(math\351matique)i(suiv)-5 b(an)m(te)38
b(:)f(\023)26 b(il)38 b(n'existe)f(pas)h(de)f(suite)h(d'en)m(tiers)324
6137 y(naturels)31 b(strictemen)m(t)i(d\351croissan)m(te)25
b(\024.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
