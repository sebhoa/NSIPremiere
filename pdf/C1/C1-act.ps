%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/MkDocs/docs/pdf/C1/C1-act.dvi
%%CreationDate: Sun Jun 13 12:52:27 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: FontAwesome5Free-Solid Dingbats CMSY10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ /home/fenarius/Travail/Cours/MkDocs/docs/pdf/C1/C1-act.ps
%+ /home/fenarius/Travail/Cours/MkDocs/docs/pdf/C1/C1-act.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.06.13:1652
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: fa5free2.enc 0 0
/fa5free2 [
/link
/lira-sign
/list
/list-alt
/list-ol
/list-ul
/location-arrow
/lock
/lock-open
/long-arrow-alt-down
/long-arrow-alt-left
/long-arrow-alt-right
/long-arrow-alt-up
/low-vision
/luggage-cart
/magic
/magnet
/mail-bulk
/male
/map
/map-marked
/map-marked-alt
/map-marker
/map-marker-alt
/map-pin
/map-signs
/marker
/mars
/mars-double
/mars-stroke
/mars-stroke-h
/mars-stroke-v
/mask
/medal
/medkit
/meh
/meh-blank
/meh-rolling-eyes
/memory
/menorah
/mercury
/meteor
/microchip
/microphone
/microphone-alt
/microphone-alt-slash
/microphone-slash
/microscope
/minus
/minus-circle
/minus-square
/mitten
/mobile
/mobile-alt
/money-bill
/money-bill-alt
/money-bill-wave
/money-bill-wave-alt
/money-check
/money-check-alt
/monument
/moon
/mortar-pestle
/mosque
/motorcycle
/mountain
/mouse
/mouse-pointer
/mug-hot
/music
/network-wired
/neuter
/newspaper
/not-equal
/notes-medical
/object-group
/object-ungroup
/oil-can
/om
/otter
/outdent
/pager
/paint-brush
/paint-roller
/palette
/pallet
/paperclip
/paper-plane
/parachute-box
/paragraph
/parking
/passport
/pastafarianism
/paste
/pause
/pause-circle
/paw
/peace
/pen
/pen-alt
/pencil-alt
/pencil-ruler
/pen-fancy
/pen-nib
/pen-square
/people-carry
/pepper-hot
/percent
/percentage
/person-booth
/phone
/phone-alt
/phone-slash
/phone-square
/phone-square-alt
/phone-volume
/photo-video
/piggy-bank
/pills
/pizza-slice
/place-of-worship
/plane
/plane-arrival
/plane-departure
/play
/play-circle
/plug
/plus
/plus-circle
/plus-square
/podcast
/poll
/poll-h
/poo
/poop
/poo-storm
/portrait
/pound-sign
/power-off
/pray
/praying-hands
/prescription
/prescription-bottle
/prescription-bottle-alt
/print
/procedures
/project-diagram
/puzzle-piece
/qrcode
/question
/question-circle
/quidditch
/quote-left
/quote-right
/quran
/radiation
/radiation-alt
/rainbow
/random
/receipt
/record-vinyl
/recycle
/redo
/redo-alt
/registered
/remove-format
/reply
/reply-all
/republican
/restroom
/retweet
/ribbon
/ring
/road
/robot
/rocket
/route
/rss
/rss-square
/ruble-sign
/ruler
/ruler-combined
/ruler-horizontal
/ruler-vertical
/running
/rupee-sign
/sad-cry
/sad-tear
/satellite
/satellite-dish
/save
/school
/screwdriver
/scroll
/sd-card
/search
/search-dollar
/search-location
/search-minus
/search-plus
/seedling
/server
/shapes
/share
/share-alt
/share-alt-square
/share-square
/shekel-sign
/shield-alt
/ship
/shipping-fast
/shoe-prints
/shopping-bag
/shopping-basket
/shopping-cart
/shower
/shuttle-van
/sign
/signal
/signature
/sign-in-alt
/sign-language
/sign-out-alt
/sim-card
/sitemap
/skating
/skiing
/skiing-nordic
/skull
/skull-crossbones
/slash
/sleigh
/sliders-h
/smile
/smile-beam
/smile-wink
/smog
/smoking
/smoking-ban
/sms
/snowboarding
/snowflake
/snowman
/snowplow
/socks
/solar-panel
/sort
/sort-alpha-down
/sort-alpha-down-alt
/sort-alpha-up
/sort-alpha-up-alt
/sort-amount-down
/sort-amount-down-alt
/sort-amount-up
/sort-amount-up-alt
/sort-down
] def

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: fa5free1.enc 0 0
/fa5free1 [
/dice-two
/digital-tachograph
/directions
/divide
/dizzy
/dna
/dog
/dollar-sign
/dolly
/dolly-flatbed
/donate
/door-closed
/door-open
/dot-circle
/dove
/download
/drafting-compass
/dragon
/draw-polygon
/drum
/drum-steelpan
/drumstick-bite
/dumbbell
/dumpster
/dumpster-fire
/dungeon
/edit
/egg
/eject
/ellipsis-h
/ellipsis-v
/envelope
/envelope-open
/envelope-open-text
/envelope-square
/equals
/eraser
/ethernet
/euro-sign
/exchange-alt
/exclamation
/exclamation-circle
/exclamation-triangle
/expand
/expand-alt
/expand-arrows-alt
/external-link-alt
/external-link-square-alt
/eye
/eye-dropper
/eye-slash
/fan
/fast-backward
/fast-forward
/fax
/feather
/feather-alt
/female
/fighter-jet
/file
/file-alt
/file-archive
/file-audio
/file-code
/file-contract
/file-csv
/file-download
/file-excel
/file-export
/file-image
/file-import
/file-invoice
/file-invoice-dollar
/file-medical
/file-medical-alt
/file-pdf
/file-powerpoint
/file-prescription
/file-signature
/file-upload
/file-video
/file-word
/fill
/fill-drip
/film
/filter
/fingerprint
/fire
/fire-alt
/fire-extinguisher
/first-aid
/fish
/fist-raised
/flag
/flag-checkered
/flag-usa
/flask
/flushed
/folder
/folder-minus
/folder-open
/folder-plus
/font
/football-ball
/forward
/frog
/frown
/frown-open
/funnel-dollar
/futbol
/gamepad
/gas-pump
/gavel
/gem
/genderless
/ghost
/gift
/gifts
/glass-cheers
/glasses
/glass-martini
/glass-martini-alt
/glass-whiskey
/globe
/globe-africa
/globe-americas
/globe-asia
/globe-europe
/golf-ball
/gopuram
/graduation-cap
/greater-than
/greater-than-equal
/grimace
/grin
/grin-alt
/grin-beam
/grin-beam-sweat
/grin-hearts
/grin-squint
/grin-squint-tears
/grin-stars
/grin-tears
/grin-tongue
/grin-tongue-squint
/grin-tongue-wink
/grin-wink
/grip-horizontal
/grip-lines
/grip-lines-vertical
/grip-vertical
/guitar
/hamburger
/hammer
/hamsa
/hand-holding
/hand-holding-heart
/hand-holding-usd
/hand-lizard
/hand-middle-finger
/hand-paper
/hand-peace
/hand-point-down
/hand-pointer
/hand-point-left
/hand-point-right
/hand-point-up
/hand-rock
/hands
/hand-scissors
/handshake
/hands-helping
/hand-spock
/hanukiah
/hard-hat
/hashtag
/hat-cowboy
/hat-cowboy-side
/hat-wizard
/hdd
/heading
/headphones
/headphones-alt
/headset
/heart
/heartbeat
/heart-broken
/helicopter
/highlighter
/hiking
/hippo
/history
/hockey-puck
/holly-berry
/home
/horse
/horse-head
/hospital
/hospital-alt
/hospital-symbol
/hotdog
/hotel
/hot-tub
/hourglass
/hourglass-end
/hourglass-half
/hourglass-start
/house-damage
/hryvnia
/h-square
/ice-cream
/icicles
/icons
/i-cursor
/id-badge
/id-card
/id-card-alt
/igloo
/image
/images
/inbox
/indent
/industry
/infinity
/info
/info-circle
/italic
/jedi
/joint
/journal-whills
/kaaba
/key
/keyboard
/khanda
/kiss
/kiss-beam
/kiss-wink-heart
/kiwi-bird
/landmark
/language
/laptop
/laptop-code
/laptop-medical
/laugh
/laugh-beam
/laugh-squint
/laugh-wink
/layer-group
/leaf
/lemon
/less-than
/less-than-equal
/level-down-alt
/level-up-alt
/life-ring
/lightbulb
] def

%%EndProcSet
%%BeginProcSet: fa5free3.enc 0 0
/fa5free3 [
/sort-numeric-down
/sort-numeric-down-alt
/sort-numeric-up
/sort-numeric-up-alt
/sort-up
/spa
/space-shuttle
/spell-check
/spider
/spinner
/splotch
/spray-can
/square
/square-full
/square-root-alt
/stamp
/star
/star-and-crescent
/star-half
/star-half-alt
/star-of-david
/star-of-life
/step-backward
/step-forward
/stethoscope
/sticky-note
/stop
/stop-circle
/stopwatch
/store
/store-alt
/stream
/street-view
/strikethrough
/stroopwafel
/subscript
/subway
/suitcase
/suitcase-rolling
/sun
/superscript
/surprise
/swatchbook
/swimmer
/swimming-pool
/synagogue
/sync
/sync-alt
/syringe
/table
/tablet
/tablet-alt
/table-tennis
/tablets
/tachometer-alt
/tag
/tags
/tape
/tasks
/taxi
/teeth
/teeth-open
/temperature-high
/temperature-low
/tenge
/terminal
/text-height
/text-width
/th
/theater-masks
/thermometer
/thermometer-empty
/thermometer-full
/thermometer-half
/thermometer-quarter
/thermometer-three-quarters
/th-large
/th-list
/thumbs-down
/thumbs-up
/thumbtack
/ticket-alt
/times
/times-circle
/tint
/tint-slash
/tired
/toggle-off
/toggle-on
/toilet
/toilet-paper
/toolbox
/tools
/tooth
/torah
/torii-gate
/tractor
/trademark
/traffic-light
/trailer
/train
/tram
/transgender
/transgender-alt
/trash
/trash-alt
/trash-restore
/trash-restore-alt
/tree
/trophy
/truck
/truck-loading
/truck-monster
/truck-moving
/truck-pickup
/tshirt
/tty
/tv
/umbrella
/umbrella-beach
/underline
/undo
/undo-alt
/universal-access
/university
/unlink
/unlock
/unlock-alt
/upload
/user
/user-alt
/user-alt-slash
/user-astronaut
/user-check
/user-circle
/user-clock
/user-cog
/user-edit
/user-friends
/user-graduate
/user-injured
/user-lock
/user-md
/user-minus
/user-ninja
/user-nurse
/user-plus
/users
/users-cog
/user-secret
/user-shield
/user-slash
/user-tag
/user-tie
/user-times
/utensils
/utensil-spoon
/vector-square
/venus
/venus-double
/venus-mars
/vial
/vials
/video
/video-slash
/vihara
/voicemail
/volleyball-ball
/volume-down
/volume-mute
/volume-off
/volume-up
/vote-yea
/vr-cardboard
/walking
/wallet
/warehouse
/water
/wave-square
/weight
/weight-hanging
/wheelchair
/wifi
/wind
/window-close
/window-maximize
/window-minimize
/window-restore
/wine-bottle
/wine-glass
/wine-glass-alt
/won-sign
/wrench
/x-ray
/yen-sign
/yin-yang
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: FontAwesome5Free-Solid
%!PS-AdobeFont-1.0: FontAwesome5Free-Solid 330.752 (Font Awesome version: 5.12.0)
9 dict begin
/FontName /FontAwesome5Free-Solid def
/FontInfo 9 dict dup begin
/version (330.752 \(Font Awesome version: 5.12.0\)) readonly def
/Notice (Copyright \(c\) Font Awesome) readonly def
/FullName (Font Awesome 5 Free Solid) readonly def
/FamilyName (Font Awesome 5 Free Solid) readonly def
/Weight (Solid) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -97.6562 def
/UnderlineThickness 48.8281 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-55 -127 7797 876} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BABD05D76517D9C24FED216BE906
1643B22AABEA637BFFCB75FF65A91279495B00B8B92CFB39C8899C3818357033
2BBD344CBB263D4250A46E5B09E712D88275731E98C996C69406E43E9DBEFDD7
161A841EE17304D49501F13D3AD3CFB00DA1700EAD2364C31908F18B9F3643EA
E9514021B52FFC8EEA03D195015D30E3BB12C272A254955F88A4DCD045432CDB
693596BAF5E1BEFA2D9AC1CD0CCBC3EB42825F1EE6A16966D49AEE9CA4A40B7A
AF5854776BA4F7EEE4EF09BE48B41B049B631B57F9DEB79BA1DE47B7C025B39F
3CC77C4FBB15C9BF3A39C8D400BD7D15BB1412AE1918DD7B05716B41DA299FCF
AD90249E2810CCCF2846402BA975F3C22EB71AAFC24EA5C6A66D5FB86DEA0D82
A1117C000C5353B2F32B7DF144A69030C8EE0F6971BA336C4C33911E390912FE
FBA5EB88AA67FBD2C8AF8DA2B0A0CCA150F57B850632A58E909DF61D04D76B71
0786C246898D6969AF821D21463B5D770D11D97904922845C026679D889AF774
20B847060B20FA78E265C44C994B20AA9A4749F76E07EFD1CF7C2AB3A433EE2D
A07495342763E2716751093DDA622377EB0C70DF28FCF95DABFAB8884E12E40C
1235BEB723F81A20EAE69E8CE0BE778A97C9D5C1AF3170E6855510853C8C4FCF
CF0D2CE4C6C0710B9584B928C9AC5C465C74B9178A153A434B3F87F01214A69D
4429BFFD0A8DA733179F25B6C15391579ECF0E8725DCF53BCAB814DD38EC0F29
8C225618FA305C623812A1D694E883AF184A0ECF699C9308B3F28A3723530EBB
FAA9CD28A1829FEA371AEA5F8B54D11BF76E15C00CA32DF229892701A4475A6A
734F01EA4438C7E68F17ED1D48D80DA35279189F2FB603FE8F79BC05000007A7
084F12572B7EA09BEBF580B44E76F45650E9E93430AB22AD4292B47B5FB861B8
C20EA254C175EFF7C7CE33228E608FEEE1D9CF299CBA5F727FB11FCD01180520
E9C7510457A9256815BE73930FA7186312B1F1ACF157C44C9BEAE51EBB523877
0086CECA8C6FCFEAE9C0F8156A3FE9B991EDC0CB72C5852F7169A8B98FB8F29B
5A58DBBC136A1E8D1B1A79929E88BCD3886D355A191967C791EADB7A9700D0EF
F276C337E561338D7D02F664A69A127D56BDD67D63C1DF32A80D732FE753B297
08EDF2A1CC7E4617933B49C02A92BD986BB13E68435FB97E81DB37BF578B3AF8
2417947930EEB8A75189696D79615D68BC4BA9238AB9428860AD23E7D8219844
0C741FB72F30CF733FA111B43F33E1D26F464F5999FEBC0888B5E4D8B0E07567
9D90551CDBEB05F9A30F43F45B5210A3007E4D03DD5E05805D3AE898FD752841
54198CDB67A5AABDF7C9F2BE384A98DD9AFFF4E8CCC98FCF480830FA681BF215
3CB11265AB89ADCF53BE360B58DC3621D580F2C7227882B61D155B79B2B43266
4329231C7269A3F30930859BF0A4D5D2CEBA01BB4059A587C6C785E009F19C15
CA40C512E9F5030743BEDD5606CB1C540D829DAF394E13CD4A008EE7F9F1CFFA
95B5C8109B0A8685FDF03A978954D1325F66AF1265829E29C353B84A33388574
B4F73E25F490B88AC3AB2F544988D5CD8459AF56C77885DB50B673602CA70AED
778E4E15F24CEE13A730F1E29D1ED0B74B2F8486AF729E2F0490DD6E2F55F3A7
B4ED7133B02DE4581066B984FE6EDF491454E6CCE895A8A75E0F8E0AF33A7359
E5EB03B1EC74E1885C81F49D2E77939ABD2C66725FA5415CD9265AACA265041C
E228BAB08EDACF4E0AB86D340F5C6FADC65653CBBB25190AB307D29C6FD44AD7
341A399CEBC01967EA5C42552AD19A3DD1DD1BAFCFCA4777528AF5E958E68450
4F95880E2E5594A3FB0D0624D7AFF119981EECFEECA15866AF76B47D283F238B
9D4E9AE5F8549417968001184CE886C1D6AA8396C25E0840EA447F0C2586B021
81A4ED566DE0666A9AB45924378D008A62C2E63BF5394EC9B051E293C9224645
DE121EBBF97E9E1BD85868308FC8186F9BEDDC40357AE239B4F02F00158B87DB
8F9947BDF037FE0532D15D61B38C2EA75CBE50D3330B105E913A071443887BCD
CD7448FB9E03CBA4D711EC4C4CEA1E80D648BA01D3BB41BE8BC9482B0C2A4653
748459A474EE5871E4182A2C14E0D2049F6BCA02129D8B1EA98379E7E8BAF0DB
C2115FC8DE189423A6CF96F3B624FD11C23CA4DAF3293F3FC3B9419FDD02BFE2
01E26AD64F64C6845E0CE09E122DF40D6908B9B6F873A6B8359FD44A37AD1EAC
E2F4E3DC35B12328553CD5FDB59309C317BF49D9A819AD1ACA97D248D8E02DBE
D74AF4F10C41DFE0D90932FADC7ED477550A79F5303533BAC12475EF8D0D1AC2
13E5D5A8A57901118F637BCCBD9AF21516578DCFBF8165AC8C9AA3A601A52A91
EA1B72EF8D4858694D1A5C7C04D68947034889EBB9BC0F6F720F1EAE6D8A8ABE
296B0861C666C1369BDC7BBA46457D3A99A66D975E7F5D1C6DD77CF0A057BF12
7F001A096FC339820E946F636CA2F5D39E4EAC88B2148C5219B1616C53425AF1
1E4A708EC4C3A7928EAB51AF51978FAFFFB2FCCBB6ECBFF8252554B3FDEE05DF
74CA5CFD7B1FB53CFE9E0DCDDCEB8C07F41D8185B10E4287CDBEC9521030B0A7
E706F1865B67C03D749F36AE2F831F159E38017AE2A5D914C676AD9942323C37
95B25E6B0144E78BA5B588222CFF13A2EA3BED7266F79A1074E5DCDBD3BD0AF0
9E1C44241438B8F9FEF51A803D8B74307A3ABC05066687C6800FA1DF62767E92
83811DD10C7A8F6ABFEA1995C317DE4196273C3392DBD9D660030FEECBA7702C
F79AE7F1045B750E199689646466844787CE5559A86835FA39CAD7468662E6FC
B83F6AF669B77400B0511D4510ECD44638EF26170432230E05C2C3DBA6F004F5
F628A1EB008CCAAF16C1B7B759F2A1D0269E4365D98318B0590C62BC52EF9840
999A057D495B8E319EE95C7BD3610F8627E11056A3771AA7458DFDC0443B9054
FE4029D89CE1B04B586869A9C6122D3921EF880C85269AB7635AEC1B6ED1AB71
EC2D8EEFE718975C8F5AD9D1310F764975FD37AB2C30068F8A47BF90C52CB9E3
5496507D403C747874F039959F2B78994EE9090692D1A94BEF2699D17D1F332F
3E93B264B70F73A7340CA8D266EE7799C16443AC8BD2A467493362041E0E3533
26D45985A13FF7B254242BC110A7BC98A9C4645A1BC4EDD802F0639789249100
CE1C557C43EDE5F78AD7D2E36F1107FD8520E12376757500671332190D93976C
C114BCBB0F6B6CD17EC199F588E24327FAF21F0DB8BF26E6808F50DEE9104E34
5D0489346C5A8665A33DCD4401036768758EB25A6609D0088FE1BB01599D8E7B
2FC035268BBA5D1A29EC35C44B1677FECA73E372EF928ED8B67077EC4C55274C
CA4118EFFBE7DD150F7F44E95AD1409C79838CD93764A09AF78BCB2EB79D6AA8
64B7CD3321789D289486659947AB54B4B63DAE783754FCC5FBA74AFA3B0FD4BF
8EBD939A31AC63434F225EF6C99022E39B85A30905EE0EF94F3AFD23DE7299E6
F276EDC265AD00768F3D384F17C236D4555C8D4AB34CC356D96CC4C3ADC1DDE1
7CFC0D7F17C55984B8FCFC72FD93755E84060C2D0E434BF17BCEB50A19790442
09EDC8A058CD39B5CA2E94FB163B4D769E88853C0500373E41EED4EF76557E4E
37BFB3F46B102B250350DBC55F85C82DBF62927C152BE84C76DEBFDA3D795F4F
790A61617F84CA29117B37470E41712F26DEF812CEF41D9D8691532EB72D0E1D
9EF04F8DBF54CA6D66609A0C7B2FCD14BE8F36414462D75F21B572C52EC09EC6
3E7DDCEC847CC6D3EFA2D7E270D930B74376BB0BA82AF94210D51D8204B74FB7
EE69654ACE4577EA85945CFA37EFF0DC5E7BCDAC54CB217B4836CB34BD71DC33
DFD45D383D10779643FF5D0F34B27AF365FC93D94196498468DF8F322E83462B
651C3EDB9C6EED0DFDEBF1BC061ABC48ACA527396B848EA31010DD1995CC4D17
9B4280FBF081B3B3ECECFF24FBA611612ABA11799B791BE95C8905F1CD1B36DE
4FA2573A8587834B9E7004B5F9D768E0AEB93EBE828619524A495E471F42AF6F
82571AE77D7817392A34217C36626D61F75CEE8A5D7C283DFC0BDEACC56560D2
FBBDF51BE7935248B80D4C72A7D75B511E0073A6BF271D440B7F0C63983E4228
92727C7ADA9E27436AA13D9D59E6CB9826C28125E4F9767C3BCC9830F846A2A7
435D5EBE8C5328444CD5B411CBAE3F63171DE32E73D8406A0FEBA498C4E7CBE9
C60B9180545CD51AA4366A849927DE7B83C38F9742E2395538EE29F0A18888C8
FCF0821DE468042FA2FE0C58AD907E93996D94F11F35CDCB7CD14973B7C807BB
1A6CA60883A1D74C3D5F8B26698ECEF7F9B307A9B85FFC3544A0A4093DA00841
0B68FC6B485775BFEC07AA0088CB2D95B1DC37E2437B7A0B13F8BE2FC74B7A24
071B1DB55D67609244BFB5E1887A10C711F0E3D981D7B9024509DA0C14700B6B
3B945FED849189EAD0BB511D7462BE2346D3BA172008B648F1E75DE5B7EA9818
DC9BAA070E04E84DFBEEB8B24D7391FF2FA09F28479007D6FCB926C75C5744E6
1BFFE5904C904C845ADC1DBEDD8DC9CA3A8707D86580C01618776D11D2E86B00
51EBC700B8EDDBD37F78B4B616EE8F3AF2A642B42A13FE5DF058495D1BBB8F01
D7B201219F99DF9ECAB7137F91911E33BEE00B5569886D97F3213D239DD049ED
6A815EF2B9C9C7F76283C21D44BB92897A206BA348EDE2FEDA5621B98650389E
9815E33A17D7DB25EAE6B73230607EF4320A5F03B65BA29AFEB1E609D9090D2B
C12E2ACE102818CEB577840F6A5D09A026F49CC9C67C271BAD106CEA4393C4F6
8F4D7DF0745B3BCBB34E27F41AD6DE6188FF19570280EA1E4950A0E57D0B80CA
4DC1EF8DA79E34D72DDECE2F2D5668B7C5D8B045753B93F43138DC03291DA92D
80EBC10BCFC2E4A4F1D6298650A753B7752DCBE3871343C697C30727022D3347
9434F81CA244113293094802F0B1D3937A7262039981801E3EB72660231A374A
85994B597B17D7D1EA184F04E2973E9674CE5A5B59E5D7C601D8A8A75C2884DD
77917F8FD492E9AB9328EF8E0901DCAB65112CC98E753385111906ECE632B09F
C6E4286156CFCF39F47BF88EF729EE261B767023B0433B9467DCE6B319E84225
E8E9E069D5E80CAC68864456745F608AD7F1DB2A7057A4B60C01E3B48B4F0FC0
A57E6F7D70F0B3099D68828CEF3EB08DD085A46F6AEB847A082D5EE078CA7B10
CCC4335309E6FE477EB7936ADD7770BA3562A4CFAB546D823B7A7685B098DCB5
465959409262902DFF5443B6961E262DB52A34A69D9DBC915D1D979F2D09E8CC
67956FAFE2735096C69A00AA6C9C1421BAF69E1B8F89CF67E5250C659A7D4A19
AE45B58749B3073662F947E7F5BF97A4823DA48BEFE6A643A56D558A474C4055
E9834136244EA39AFDDB3B9BA2B301853A589B355A9B86904D328BF2A61BE758
B1842235C4A4EEE260976EF1644167C2F4070EBDD0B73478C1BF2719880425CC
E4CBFA670CC1E1C6A8BDB75E7B524F977A90FB269661AE8B7C7A351AC33164DF
69839EF4CCC948B1971BDECC3EE24CA73AFC338206AEA78EA76288728ED74CA4
08020B80A53BF23DB3B68F3D0F58E2C7BE658851767A4CAC46F14215BD461B56
DA6E3BBF5DED4486FB1D6C2F60660F14709295FD7B6B4402FAF6EE84EC0E5FCA
8D53CE5CE1FADECA9A7E610105FA17C45AEA5831EC20510FF2330B331C40914C
36F29FEC53C83BCDDE52A40C1DC2C833298BA9C66845C68C0B47D6DEBFFE3F95
A90BA074E34D5AB46ADD2ED15125C4382A1C95B5F9412BCE7B2DEA273664C0F8
4C7788C6F3ACD041B16C9A99A6254FB9B899782664A7ACE087EBA0D48EA7C7F5
D84E04C04694D7ED240C57F885F794BFBD31E89BA753ECF83F6AE705F410368C
0B5213BD561B753676339F0B9FE90C60F82E180F7AA4A9EC783AB037D2F6F2ED
337D854B81D02F2E65C6A913100B8839695517D60FA5B6A125B952B64A1142C6
F39428D8D2B8FF4F1CA15C3E282A1EA0FDDEFCF0434C4123173E38AF82040A4C
F077A335C829D8626D775E72B5502F3769AE6FE8FAA616B8441E702567E898A2
DA6AAC3A314D5DCC26C3721108036A248AF16FD36E00AFC5AC22773740AAD22C
44F44CE2A9EC5A1378354D0EF515DBC0B835738955AD76891B054759FBEAE7F4
717A6118DF303BB77FB7C261E2C91715BBE32E595BFEF8219927C96E0EA2990E
8D729C3D9DABDD29ABD05C1FB213FA9C410C78ADAAC2F16EA19B997E5CF8EEEC
CB2C21340919244745429ADF41BCD1506CB773E28FADF673D70A791711AFFCB0
7D8DB4849837336C3D6DCE6264555AFDCA900E3DF683E54048E01613116C2784
94E20DD2EB17AA2B5CC304906188199CF23D9D54D3DFDF55EDE035DD3563EFB2
74CC50F61FD3428C83F24809D0AD1646380585D0E5D5F28A9353F6784D3CC671
B0FA6F59F3A0347D547C728623FD39A54642E669657AE1E0362D4838EF8177AC
838E414CBAAB3D568D946FE8CA8C25DA2D751FF514A92199AC13F78FEAC5D4FD
0CA34ECE58A8FA8E722FF4625129815E150EC18AAD461DC2DA8C1E6C552D5002
8AE2476F9084AC04C97D6FD5D963A652ED4EF778D021ECAA36830D54A5F9858E
0733034D1F5BFDC20AB2E4902FC4D523AFB607A1A4217F2378650ADC04162F20
8865D6456CD006527E6EF77735F91EA6049E418B901F10FC0A3EF112641C95B8
56F0D87D1389546906D15D9BB1C1A9A946E7EEF8D198562366FC4A89D1C27D33
6133D5488E21C16CB8B66D003CDC73EAE1E5D9EE754660EDF4F9491192A438DB
FD51CA5C5169A2D621134EAD387D472B72A00E3FCDAA121A5A6B5F8D8D6564F9
2339FF8F8305D0970C33AED35D2365BBD9AD50C43666B33ECCCF9754363F3D5E
83EDC43FD61B93DBB81A89763FD4520AF4792C4DCEBB76AA9AC44DFDC4FBB142
0298A665045BCDA5C148E123AFFF96CFD61EEB9C900A19314829CFFC11DB597F
7C55A8A7CC1D8C1245CFD89E7D66E63D1FC972D86D80FA11FA9DAB4BC9968770
BC41B17717A55E5D8A8F06F8378F03A9D9D83E683BBED9AB71BE8C8E5C24E53A
5AFC5DF3401222F292CD0FBAB7F36A7A2E4C582CD4B7ADC254E87493576F75AA
AB9DA284490B1A014F5A9DA7B45CA4D070D83F5BA00415F599E0D7FA55CAD906
0919527012138A4EB36CC9176966B8D949F5A945E578C8DD29FF20796AC3D0E2
9B043E8D6A88357867F8BC52A5786A474539D5B40C1FD85C8B2BEE6A4AB398F3
5D2E5457EEAC9330C8D80DB42EB766C43EA8EFE81CCD0BD4C498F6F335E234DB
1B602BB51593039FC9C7CBC249D24FFBE824F874DD9A9DA5141D56AF49EDE3FE
8AF0EA8374D52E32FB981A846E5CDD5A826B3A045427E0BA44142C86AA0CA4FF
8EB79622F7434C700922343340368914BF3C97314045FAB692C18BE004A54A0D
C17540E09C4D4F7048EBFB72CFF1B8A6BE5957291D85E8E79BEACD319A591395
C24E19E3038CB6A93641A1BFB008073708AD9D3191B2FEC2C0BDE9851F392370
351E3EF6D4FB4CD2BE21FC0736380B74C66B20FFF1CA8362F78A93B8E8450D4A
2C311E89D3200EE8C37D1652A62D116F15F8BDF57AFFC3621062398BB6CC8ED5
5781C83F264C513EC4569F1E5F51FF638DDEAE362894DC8250D03FEA3DAFABFD
25487D6E726C4E6A2816C24D6ADE6ABAC1A2B9F75A67041BDE28DCCB72FC812D
65DFBA10FA2136C33749BDDE2C4DA4143A46E6164C275CB26047D7CF06FE08AE
B33D3C71CBABF29343E3A9C5378AC3F83ECA90B4E6FB97E9538BBACAF6AA5BBA
AFF20182F6F5240916C8ABB3CD95AF693C710A2F452FE8C9DC13FB7233A407AE
B2B876A7FF4883488673E27D96355721BE092920E4FB4699C8A7E5286A371593
72E7054DB5A32790ED8822EE69CD6499102A429E81C5E2891E5D1C4CF84B48AD
9D387623B31715A8FD033303A2AD9E74B120D459D450F58285B062AE81E70AE1
61B06B11F1E34583E8E102E8622B3B97C55392ED93421A4AE8700845C5EFF77D
C79607DCEE33573CE3215355BD24CFA4DCBE681A2112815ED509FBC6471FAC0F
1134B6B1A41E8730A84DD6524A30DB69799EE8F195C0C15F676DDBC8BC7CAE64
04FA6A2DC45AA997672C61BBE5B3C8D197A4743CCEE78AFB02A33AC6D344B758
FF331CB5ECE4F54C37443EC74769E497F1A90C5A974DFBF90D0FE840566D8413
DBBEC7A5FBD53662D61BD17F67C4CC74436FCFCB0D7B07C6765B85F87A6A9740
596EF74C6A2ADDFA22353A0A09EAFD6CD516A9A69A4C787BFC613F3FA299289B
23FF738110F09D41CCA0471BA80CF19501693012EA5DB38F4D1B48071F527443
F0CAC5EDE3815067BB6238D6CC59FB6CDBA1A8778CCF41644161715BBE6577DA
7D3BF2D53367B1E6EBD9A7569EC47F2059000CC455120579C646CC09C6EBBF9C
919E52B42B823609AB8CCE5C35E9A10734A5C3E5B99341B0E7172D2FE5806735
A535BB37B7665EA3BD2558215B49AC3C1B0E1B488FBF053E88191707EC3DF252
45CB020A9DA242BAB1C3A23B5301D2364A80B3F93F5AEE80DDBBE571AEF113C7
4B8877F35074541987E343CE1DFC3ADD6D3175946819F8F8E6F082C7DDAE3704
EFB8651F606E678DF2FF576BE5C494D3BF1590D58B886EF6E773BDED23DB0D3A
BD8FD649E6549D62AB9455C29225888F593CD6BEB0EF3DF5243EA9483F86D1F4
73B892BCCF21C753515F7C1D718777D542E6C7CD96E84A36AAF17E1FAD3CCADF
6987BC6D399BFA142DA106271029E3285E08F416E92838007526FD925D482FFF
937A1961E581577187EBCAA8C7E2A66F95AF72B4749DBFB0CAF953F00B01DF37
70D745DEE09FB4A089AF241A0C911F1EE9721804F454415497312CAE26AA137B
3C842454330EF38E9BEFC57558171C33288742A1B7FD26202ED32E296B284F80
3745CC53260E4ED34EF97B2D01AF735E4AD89ED3A314294C0654F4D037DF90A9
4D5CC71EBA63959DD3FD42BAAAAF50F333FA013FC43746042B3FE900A7DEAD96
384640C05BAFB44ECB860925A7658E148603C4FC4D9C36085C3148A06B473230
2DE1CE39B4877506BF6848BD2088A3EF04F668A7A22B9D3357A0CA8032B72C34
E8317BD98222DB27B346DF3F527DA1D58119EA118B4F1CAD0B7E98BF55BEEF99
C422299E0D13EEC2776D3012FF4026BE59A926D3CB39150243AFE6E66913D3A8
93DBE33462492893808D6C41A1AF04BBE3A034AC122420F03A244E83F9B14AB9
E96EF040484A76F680411294FDA12E86CED30844BA9A56C19BFF277DEC624F17
58C232097F4926128532B9CE6452FC98494CF25066BFD5824E32D0FCA727506D
0D11E8DC8A1B569CD7BA510291D44E8077375FA7AF78EA136D831D1F89F26B23
503CB3BB141904FFB59BFA3B1079F7FA0A37C0824A275DDB6A89D89F5081F1FE
0679C719FB079D59EBC2A2387D5D7D6315D16DF75FF157421707C253C617FB7A
6A6117491392E10A8AB928797A8DD688AEA0606E89BAEDCD9E573A2B02335206
94980916AE96BBA480BB4472260A0C80856DEAB0E48C62DE0885B8D074A7642D
51B9C92D54FB0E40F4EE60D0E107D7CF2A8512230D72F6269D6C97FC1A88E17F
1F715F6344D9A9FF3BB3987F7475D676A4198A942DB1437F44A23AC7B7A8109C
E0C871BBE908FA208D511CE3CBCA9D10A03CF5020E537C383C054339C0B59D10
7581CCFE734DC86FF098DEEA0A248016B3ABB05DAFDF5A766CF667D5CF086469
228087B92905C11D92424C23C4B9C0085FCB83BBB03E1F37364BE1B85804A5EF
00CBD60C1E24A2DBC0968B9D951AF23FF686F6FC48EB426969C016EEA9278C59
88DB3F01B6CF6EB5A5A019C9C25AF1BAE1AD8D1F6E86933B7BB83FD9F48F7008
C85264A5B099D20C1E24A2DBC0968B9D951AF23FF686F6F80F4B2AC51205B34B
06DC47BCCEC2FF183258B8559274352EDE610D488CBF10A572FAD588940E16C7
367A9D81B06F7786B326D9EFEADF3CD6139A05C899B59DCBD8CE24BC7A92E0B7
18668A71C7D6B094B14FBA7C2CE637D83AB59B96D8E3672C66FA083119D23F4F
3D0AFFF21114721A2BFFD0BB0547CC25D606C33DCA06BB2114CBF511921B60DB
B3E6A84840206504E661BE6D41EC351259F65E8EE7F6A79B3D5A6104E782F9D4
BCCBADDF85734B3437CF9662EE86C30D0A58B8C92925C3F777A929F754549957
A9A7DF64DF0CAD71D6DE83DC7BD1F33F122EAACE9A5373C64D9ACBDEC7DDDCE3
D915F0FF2A8D81A6E3A24671E32EB74FED57E91C36C0630E05891B5629AC0D45
1E098D1FB67D7A73A39BEFE27A8C6EBC92E00685E959E47BD67B01200D034FC8
02A6AEAC174E1330372F38D01FEF514CA205BC61E9685FE4EA66E98252991A78
663B92C2D4B4ED1204D0D8712FCE3E360B0EF3194CCC7FE4A0402545CEA5F9E2
A8594D3CBC597C3A5B86E2A64A46EA08E333B192B1CC0D45C7A4FE583F689E82
95B34004BD1308554958D0D12B5677901536D783BCD1BBEAE47B5870BFAEC9B5
CCE6331DDEA3884E2E8C7327ECDB2E85B112B481BC86FEADDE5507E1D03D9328
B1328A902ADD6A84E892C6B4840F2B1B8D83EF63CFACECFC9BA32D69FF8DBEA5
BFEDCC48EF632D16B225A64FACEB04194D72A79D373F7DFCB93D264DF3D42A61
DA68301331B59CBBD036C11D0E8A693880BDC6E00A05980112DAD6A13A590B25
3D4B9EDEEC90537921227F6E9D68B2CB2C9FF312F1EEA3FEB062C57CB07A66BD
8D707E378E7ECCE82BB352387BBD8503D5EB2A1D396813D3F551F18548E3CB94
7F083768C7254FC019CBDB6F03181FC39871EC8653EFB4B9C8B9A0EF13391A7F
2D0BD5026C3499BD1FC5191C98C874803173922F119C0DA609DCF57EF4F6E6F2
C76315BC3528BBF43BA55B66ADF5E034F98312DD85DEA51F6B8472B15FAAAB32
CA0E88FB8E13179DBA1B30B5BAAD873A839D468E17C5A19790317DAC4604A968
08B547E729DDB7BD974001F9357A68A158BCE6001A885FEF4DF34A4DF2D672DA
BD6F0BE34822E4E5C2083DD89C4E18396ED7711A90B0036DA11F805E841EA116
064442141A44C1E5AE979FB86BFE6B0442C1D1D83451AB941B33539831E1BD76
907EA7BC8B7A60ED03D5923290AD2E7A8FC7EC93D52026755C64BAC3E8F42893
0352CB4F96BA0413FC32F0F67A23B1983AFC516FB3F028AAB2FADE0EDF084243
6F788456A014DF827ECE6D22500C7BC9568AF4BC5CAC9052FD1EA5F3DC3EDA65
CC87DC0B5EE2817DE214DC90AAA65AE3C9049ED1F1E501D942BCB1ED62EB007C
F28988CABB4D73CBBE9A528E67E90F5A5E1A3D53447D1108E05547B9533973DB
888663649EBC81B4A45568C2044BE0532A1517A544535F240FAC55D6D1524F13
2A4B808EE2ECEF1E8572AB098AE00EFB504340040E2C4ED5D2425C926B3007C1
471F59C8EC093FC5B9E462B791C6FB6DCD1B73300A2E078C094F37CB28AA098B
C4BA22F029985EC1F1420DC2DB48D0A84992227C15BF2128BA40DEE8FB39BD0D
837C48C838B422461D89521D54F1C74FBD85C09C4E1370FC23D4C79B22B22901
C4F7B92E7B3F323E05A2606AD7C8458FB875ED1298DB9B4DD5F1392A2C5C31D8
2802C0F05FF22CE05248DE1C23BBC1E75FF3362241A995ECDC489D5F2342CA5D
558A33CAA9A3941614B61A4A3DA50EAD16E295B620B9E745F4A05BAD737B2A2D
1D32C09FDD0126533384CF1B2004F31E053CD6F9B640D724FEC7501CE39961C7
BEEFE666E23912F5B7A57C34415FC36307D8A439872F4DABBFB9BDCAA486B13F
1E17BB472485E7331CFA4E082547934CB5A7293D4548297D173EE0E4027169EE
4AC1F2C37FBFDA22380042961BBDB56F40FF07C2DC0FF5A86B3EBC9D788A40DD
C11C6D2C11583E4F53EF93409131930DE37B47A142E6C2CE67A745C62FDB5E9F
371DE9339E304203D2941FC0E11C90C9CDDA9155C2652E3CE38E4FA623D9EF72
8C291DA2347FE3EE6D197AACA23C765EA8B82B367C68050C5283754EBCBCB7EF
589F0BEF87390010A4EE2ED540CEDC555773B6C146E4222BEB3C08E4E7A40C2F
8EFC481EA4EB7E70A45490A6B6D9CDBF5C3E6B97744B4E8ABB42FB8020E95754
047A5C2F55D26422533DECD96F02C52E1FACAC839B048CA599132532DEAB0C62
F99D66633D47000BF21534273011647F694320E02C0A7C25E6751099FFC9F3FA
60F6AC177F20A37518075BBDBBF1232BE9D9581229444E23D76B2880699096B9
D8E6DED831F05A3E0225C667F3DEB249E79E79C5755890D5A3C207872F5603C2
7A5F76D534722FF10917822735C02DFA6D4FEE41E12236D22546056AE4DD0E38
2FD468D8E48FFE92F26FE93B3ACA6DC2814CAF2D87CC65893DD1B99DA2211489
D18806C15321387A388E68FFB9CCFACE80AF71D4E6914697F4A5BD6DD457127B
65423B69866EF099C1B45B1AD955472D7630FD2443D39CBAA9BC8617A28D2D6D
FA513957035BB85B74D89B3FFBF6CB06BFE768C686F47CCBB4F9E5A39F95A9E8
25F5539327CB16C4E7E87F942354AB4521EAB14BFB4A2147F15E9630ABB764E8
C6097B53B4855ACA113F08C2AEEBC2391ACC2EBE58CDB8490AF8CE6120DC1D4A
49FD15D7B590A23132D235AC8D304F409639BBC939845B2790A95EB7451D7786
D83B69E0A83A55607C647C46C051CE6439DE6D24E226400024E4469D7D8DD713
BA1357618AFDBAC7A289DCABE9B1B32B40AFFAB6B59FFE3798118AF3A0A6F4A5
951947BAE42B7FE909AEE06AA08561035EA2AD57459F07BCF51132F388A87BB1
40DBAB955C25FEA9827479170AE3027C071D71B1277A5A3A64A06CE285569A3B
54FAFD62883ECCBABAB7C0AB88D400A2C8670E07C03D09DECC7F3DBFC0ED3E34
B04A214283E3BA371CEAD2B03E19E8142BC8499513B143C64F6FDDA793F61088
42C021FA52A351DFB7AD035FB85D7495A6ACDFF63366587E677981F6EB744D3F
DDD905D1BAC3CF6DFFD6F9BA04AF989E121A750312941D21B22FA2F76B678E2D
3DE5D6419158E6AA92420417EFB11E568E69A54B519859ACACAA22E7A89EF467
0960F608B0E1418733D8A3A8760A36A965BEEB1FF76FC5EEB7485CA826EE5B5B
450E365530763213CD7819E8B1D29EF6F7A06DD18AFD787113209C4CA25243A5
25E6038A71F00234920B956EA147093BB76D79D041D39891DFD8C0EC2F46D6E7
F18465C20A9102F40F74DC822B9A97E71C77BF14C9A9A4E3F160D2EC4C5C58AD
3D616E50501A97CCC6B82C21C593C247596C8CE21B8C07FE486F93E2E2658386
96FB3FD9306601B8FA5E4FFF3B50336C56A12DED7ADBE2CA7D3FB0E35B0273A3
0763A21D98B0095D51D387213642C1F16AA86DDF02687BBDC88E62BDC933F01C
06178B9A6BC246A9454FA6949F135B18F65FDA667478741AE1634147D267D5CB
0D8872411DD48297FF061E2C25B3B563D8CC05EA6F8251D451514C3C8FFB7780
3CFD7592DAF39988AE69DDEF7D88F3CB969B58A84F719C44432BDA9C5B0F672B
B0C3CF07EC85B33AEC147B3818EB084876A7D9D90B0C39E4F076F03E728DBE4B
20C519CC86A4BD5F6FEBD350E44D929F02F492D1538E466D8D08C2925DEC6119
1383A7D5D4AC0BA7D7E9AC38C955D3C52AA3484CEC36CCCB1F4AAD18BAEBFCC4
70CE46E00BEF7C74684EBE137FF134434647F674921286163D218D5038365E93
E4896B9318A9A597EE59FB37107BE00E1DB0091856760D5E05776A25EB4676DD
A48FC93B6D1E68B5E6A600D0DC4434ECF0BBC5F9CBADB37A98F3FFEB2EE33DC1
AC28A9496278C22A32ED3DBAB7CD0E43CDBB4DB240B67A3D6482EE6EFF8BA532
984D372DAB56438F1B65E0B17473F6F8429B98AF55D76EA01306110BCAF0176B
4420D6F0E2E7428A23D08A3075BCEC0786749C7F2AED6076ACF45774D10C178F
B4F310622E7EEBF1CC459CB3B54059219AE3C52E5849E0FAEAD1708AEE49AFAC
D1AC5E70666B542833087318B006B8CBC18AD58F4C24DDAD2334BDF9A390CB24
22750A2E11E81C8D48DF4143BE17E8AED9AD5EA8D75EE9D71727E52F27A63160
EFDC92ED4E1B15CD43EA32B814D713933F67669C1EAC06F09104468A76395AAF
48909C32ED16E983C1782196F32D7B3C5C757A1F17F42A49F1B27A651471769D
D1804359FAF3C2BAF289A18D943BA437DCC64F9446C35131042F64BD7E00FE59
9D419B3E98788FF5A6ECE0662B629AB09E72508F7E7F7207230C7CF7153152BA
8C122373104EFA71C12FC68F7443D8CB33BA1F8398DB30D313BD82208ED31B9D
180162C62F9C5DE49C03FB715E1D04E4A53E798DC408B9C79E5BA65FB7EB8937
C7F50A6787EDDB73669DD6039FE07BF090444E75D66D1C75D8DA1AEDEC773E02
0F6F4131BA1EA583F1868E8A1B13FE08502AC36D14F9FE8317B3F73A3147DB1D
4E802424E56F8CD8BAD2D5C763F7F052B3A77466878591ABADEAB2550914DCF2
7C6B973E0178661B1E9E62B48838A442E796E113D147446FB2C4BDEA5590E58F
8367ECA287D1958EE8E552D2DAC219A8EBFE2F44AA6EB432B7A86D8002A9417D
9EAE12CA40CE4CD7EE018D7379D438A96EAD018CB12244C6BA26C5A0CDA8F4C7
FEE84C427176D702F5FDB411A9909F11698BF130A8E39FA995C6A814F664FEF3
F95C06EF37427FC2343D5A43AF2E66029C4FB1A2AB32B7BB3775A6BDC6B364F4
3A8F323499CC71D32CE6183A4E62ACF1CB0852AC21D031766ACB997174BFD935
86E5FDC4A441C6E71B42B088247AA03269C657330F6CE76C7397F810EBCC680F
F50D49472C42A7AA81EB7999FC794A93D28CF3C13ED66D8395401DC90EC3777E
8D0C51DBF21FE3EDB004ABDC7366CF3B738CF6E5A4213F0EE69E5163C8DA30F9
89B8F247C5F23AC1B3A86FA83ACA1AEA9B9EA11DD13F1B57E233C21AB044B32D
92BF326C93EF7E543237E371CBD214054BA9FC6F3B6DA450BD5492E7DB515B24
8B65F3E0B59AB0055416E93655CA8B8FA12F57CA00EA900B242DE2CDDEB59175
12CC4E05B2785F324226A0C83FB5E6FB4570C6991D14C9895464AC1AFC1851C7
ACECE786564F2B6952473A5F834979016F38C70081DC79AEB9C37A069027FB36
D0AD1B581C96F1322CD5538710757E61F0F53E86274937942EBD989C3FD8027A
0E89D59051DD27E2545DC0F78182DB6C9192608FAF943F41B7B6C7F29214E8FC
F047D1220E558AF4C9729EC1672902C0442A79AC9D83A46EF9BC5236760507CA
54A84F9276EA190396865B2BB50A37028A7DB25C958F63842F51B857A81E3A69
B687EB8F74C03506905AB2BE3AEB9EED950D41B8B1D9CFA6CC2262ED888AFE2C
919144CC9C39D862FA4A224A5708922D7B8B21BBB792373491EE7B0224A05ECE
391A2BA92AD544D204619C2E836B1CC4A66CC7F7A3C73055E680F6B08F0E8FF8
56B92D73037407F9CCCF2D38386D18E64E9ABC77C4F0AA92EA63C2A1646E1105
87D374A29818882E960E1B92E510599DAC9C6AF1FD9A40377633F41B407242B4
51651F1390624793EA5D0357949E074925EFA82C0E9C8FABA0AA752659C90B80
D6FC49CAF72395712B5F85A86A1DEAE13AA830A7CB7C78A8C6FA2C41AD66D3EC
933173DBEF0AD790D5241CCE157AA6DBD6AF8308C312FF1DC94992D35FA7EF60
5075EE1449C6AB3BD78147524D5F228B0A955302C3EAA926D14682C13267A0BB
CD01C3AEEB11715F0C366AA0F7142863A3B776EBEAEE6B8911986EF5DA75D04A
4C11EACADC3D7497538C736427B97C02205BE0AF4CA8A7F43403B785DCD6A6C8
92B97BB8CBCA87983B8C897C08A923BC4439192C8F1040AE138A82F72D8A79B8
32965AA2A2C6DB953ED292A6003D9869364B0B67A3D43924F1AC2C3EBDEC7BC2
622573D457E19E42A648A6E95482372CC36B8FF68B24CBF7D79A6F974915BA9D
B469D8E73FD845CC1122610827DAF89C044BABA1DAF9BF6434EAB202E01CE344
5223F7D00752745B632E30C361EA4CAB239D20E5E200BDC0C8F32CAF4ECA0423
E5B042AC1AE4013E016C53146BDF7112DCFE34DDEB54449E7387966C100B0663
43E45D28AA833547000BF21534273011647F694320E2846F7A0E18A7938C769E
C75620FCF9193F33BC22F84A39385CA94F9EF405589F151154D1E11222801A05
B686BC98772CD7C7AFD9F11619D15CCEC637AE16BC8D6EE13773BD93F4C74A58
5A0EC8237CE52286E6F709BEA73F86C0C524A4CB8F29EC3AD93FA9C94747BD6B
B45DBE9BC4A5BC84DAA4E59974A949BA8BDA1AC294C8AA458C3DAD1EE47B0A84
388C055D3F67B2BF2CD0F166D1AA1AE6AC5A93D8DAC10C6424D80359767B2BB6
BEC6F12C172A3448ACBEA2C2BAF04A0C94FA270E4872E323457502743C5305D7
D01C9DC74D27788DAECD2588BA059C16BEC49EE9851BC4A3BEEA81FB04755A6A
D78FA30CC9EFED980F39FA8647F4A1B05E7B70CD62FFE1ADB8EDCFD94F9E6FA5
9171BC12C8AFD89D1AEF9F795585D5FBC9E8A17FFA5B8287135A143EE32C1955
10C0C52FF2FDD65B75EE14CF25CA05C3D569CE8871B49AAF2914556516B4832D
BFC0E386221291BB4A2177B23F6ACB6DDC5C3F0E5EC0F6AC2DA72C8141E83015
E76D4DD53CAF39ED63CF34CC46171A398C58EDA6DEE806424A9F151E03DE5587
237A054B74812BC536D0293C01045D515C595BD10C610CEC80EC8D5987FFE68F
3FD8F89D3F849A9FC910E7728D8819B89B24E50CEF2C847FEC4004F906E8DB9E
45DEF2076382F2E96F2F1C94F11476BD78B554982900990A1F03633FD3F9453F
98FF1FBF2CA4500FD73B35B8DBEB8748BA48E0FFE1BA3DB5E823F21A3F3018CB
E80DE64142BE31A07ED5BCA0C69477CC504C023A845BF0268F434CFB044DF60E
68B023385A6B994A9A5515D075FEE814E3C00B666F6A3BB1CC6A2AD0C3B36FB0
82DB96196652FBBD20E418EAFEBDE6D1D60558389731756044BA3E185A12B9F8
6308293A1395D00B096DC4FD7CA8B1FAA9D333203F8F7E67C704A4E5FAB03A03
397EDA28DF4E5CB80644208DCC98747DBB555CF633CDCBCB7EF0AC2D1AF3B7E4
8567A517C3EE10228D3C4AE52D001D5E1509CD02A66A36E0EE064E3D180A2E90
696BAFD68B8E32E60C749802BF674E3EE2B6211C00E8BB0781C2E54EC4CE72A3
5BFF1226AA972E2952609438D699161C492A4F1BE9FA992E9B547DC968E85BCA
016BD8169EADDAB1845BE0D5B32B1F637A398B71BF60851F3FBCFD7687545C6C
31B2FF05CF30FF4E3D1ACCBA870FC1E6E6F224558BD0C0009ED62F76E7BBC058
1A708D05C1DADAEF5B121E23AA8A9CA6C09B9B701C20E811C464D70205DE4649
A7A00A35324AFA8E7B0365B193CACFF4A381E1F4C7B939F46ACCC4DD765C8269
D4E9849B0301E2FECF6C0E403E1DE655F86A39D5FE04C5FDED2C513692BA3BFF
EE37255809E6C68BBAD0FE4EB73EF158A02C50347AE58856FBE9AAE85B0FD8C4
82590F50E29F1C3B7309634F0670E0F442ABBC974969B84B9B455FACBB4CD279
74F7E5C2E6BE6AF459607FB35F4CBD9F351939075984F0BB0B2B1D3E6BB80396
5A5C9EBEA3C3E7F14AA6E0414AE928744FC9A89956AD43924D62746A97DC2777
A9DAA1A0B86AB7F56C76A9A57DA79ABB8F9D8C023B718906416088FE17CE277D
5667AA5644EAFFDB6E0FCE021616D0DB89C51001090A4A78ED21DE573C98B059
8354CE9DBFE1AE36DA16D19D4BAD3A8729BE2E79F4AC51BA4EFB3FBB89CFED71
1F100F87344E2CC52948250E069B6AEA02326B0A52DA0793A0ECE5F058CDAE3A
5456E364D2117D60BA66CB7B4B087768201063B1E386E6A2738D2A61D153E17C
3E01B2FB56B801B8C335AEB2EECD1BEE71DFD01602B364C07010B5F178CB8C69
BBB873C4F9CEB30CC26A062A695D1355390B7A4C41EA1754A222802E54162EED
97447EC82277F70BE7A54E790A8A3FDBF8F1AA44C4D605BCAED33392910EA7C0
9E607A1C23A1F4A829AE012B1942D59B4CF1A5FA7C56D4E724345A9B30B333F1
161168565E0508F8551A41DDF3BE36D3D9C3ECA83702973D7DDA5983291C3BF0
89602DD9ED7926556AB876A70C37299504AA2E0CB5105DD5E8213419B72543D2
80D64069EC95D6B59D20D44ED99F25FF2267AB438138B428A2F6BB5BEDDB64B1
0DCF1BBDBD14877ECD01B39FCA4146D1A956D6958D78BB1C8AD739BCEEE86308
9059AE34B0B3CC0F8D56A1FD2E9B4582CF5D93893DF19FD283E1BC19A5F2E53F
7CD6CD321ABB4199242954145125FB0ABC0E694FA054BA90DE0A89E9FF521C76
D4ACDCC54E0BD8EAE26F07F2496A308467D56C4C2AA6B33D2295D7CB77C33ED9
222E74981A76144B8E9DD14E07AB2D37B72E6CBC343693E51B719F2E68204143
BE17E8AEDF451C21BDA638B481EB66BB00B7EFE75E9AE63BD9D36055F1CEEB7D
B985EDFCD485CCCEAA811E5EF31ECD686A274C89E24C9D7534D19B75174145EF
4A96F676A0A508D8A17F82CD0A8FFAD3ABBA586659E6048129CC5FF6714A1D46
8CCB6A6E64663C76B4E51CA7CF0A85A934727675E6B1E55298253B0B69917458
B67DB7918B8231A1E4DB4B8B2F606F2004E86B1797B6F81CB076D4861E85692A
9880EF50AAEF2B7AA3CD0A3C36F5DBE59C9272F27CC57835760E30B8BEAA3ACD
E9FEACF522A5D5631750C3D118CAAF668EDB0A7D4FF8632BDB64D22CAA5E73A6
3B5186AB779C9E0A6EDB0E4528B84717C2B043B3AF230E54A6A01872F4FB5EC0
038478DF87D947496448AE11B5EFB08AB6DE487AB8C482AE70C683199B764732
5D295528EB792AF7F3A36B569371FB7D1652A62D116F125B10CD3484616D6579
3FD92173A54E93A5D2BC5DD8F79EE2C811AC4CD3CB62D4FB67695674CC700D3B
E79F66860A3154A16BD313B5FC8B45CC601350B1BD5F1A1B95D215D435EB05A8
FA36ACF00690334095CC94E005741449A2639C310E4F2DEE07DF4B8D94D68DB0
13522D7BF9EB2541F38ED4E2751D17509909CA5DFAEBB6C3A0F0CD388ED13A45
57D635A55E15665BB08612B1CFFCCB650D2D54B6AEF078F1DC0A88704723A9A4
9C3A1EF14BB8CF98ABB4E11DC10DE091BAB13BA7B7FEFB986E110066561D4FD8
CFD7A01622DB2583A1FC7234062A76D190746530AB5D85B92A69DC0DF9D4D4A2
E9F96F4F846D56E83546C93F25707A4BDF2DF6E0062E6CA3EAA866E9FD00B562
B0139409A47C438116330F156D1A477D4FECF26AE4124D83952D0A344BBC8D2D
4339EF99469B9A5DC6694BFBA8754A95A2DFF34114E32D5F6DB08D8F03A96456
E13178534BE7772DDF52103E01B2BEB82BF6AC7233CC1E05AE039FCAF29D00C3
25FBC9DC7BED0871DA4EFE9E7CB0B52A7F40D7DD5BF35C08BA8A8A2F687C9C0E
21FECC4657D9F08ECF32F50D989F82C8B9AD9FA04FBCE01BC9D44194ECBCAD9B
D2003D143E5B22E87DBC95F4A52941FC6322764E22FD311AA755BE1B8F3D3BA5
3A14033CE9A7683B0D89E619243E3049654FB5E2C7E11C5311857025C0DF9B2D
C9320414A079C01587FE9EDCA2F71E1544DE0BB22D3C8C70D30E9CC2AD41ED3D
7799B34350CD80D2EA814BC636CA1157A508F3987B948962518988C9DC7A6B49
4FB7A7A996BA4F9111126F2EBF5E50808DB5AC79FE73A703DB7B10D9E675719D
214B11111DE0D49684BC07EF624B108E012EA7BECE3475109E255697D5626FC9
2A026B886437C8C72CD71D46E63D0647F7DA125579AC4A1FA9DF68CF4B1331F8
FCA35C1644C596A7CB796619A3A9688FAFA81FF28586FCFB8E8B6C191B1C8F6B
E796E6FF70DB9781B0221792C1C42F403BECFDA3224B9A743A935EC3FC563DD6
FDE13B93AFEAA52EE05C73313978F2D5EE4FE9FB50A092CF38F7BA8C910A63FF
66F047BF598772B3F2652453807D43D2993C3947069885559C8317285D1BB2AA
50A155774076A8EC5C9F6156546B125D26015F86019C36664E607D65B145F942
0EAFB9A504ACC0485E7F30D8274594901C4B563A2968FABB92BDFDD6FFF4D1C2
E32C346E420C86AE6884F237CF790D311A83BBE1260EBD2E1A48DE0C897CE904
542EF68652A4BAEF9C71038FBA5B9F238CD0A8F643B40955F09C1E0C562F862D
FBD6463F31D7B2626606542AA3AA09DD6CDD494C6D742F00939FB0035799D3F2
0879DF110A8D2DC20D0E00960481F3CCC53921CF3C22566750B107705B9C8ABD
0E1D297CAF7CD20E45EED728A8A435E130519E962B12FCA6A0AC0EBC25B4CBF4
9BD6526B9A6F9D9963033044BD808368E2181C9631F1AE94FF2040E07FA087FD
A110A93430C7FE101F2A11452D2003D2E9EE6C582C274D02D1400EAA967B7DF0
B57FA25132C5733B4D856AEBAFF185F16CFD4621575F712148847125E4B3EE62
0BD005E924C749D1B7D49496523E0DE58CAC967F7B7626E9C5B2E79830F897E0
DB8413F300F32A623C70A52099700B7ABDDB1231F73A920C2369A0D6D4DEF367
84247FD094ADFFF4CD9460C85EA5E317C84A12AC14C9271F506DF3EC49852380
5B44A4E9C47727CFE77B452D11BCF43C8C92CA10C40502BE6F53A1A842C599D4
E6B9BDC50F1C5DE9D0FFA7FE80F879C3B5E9D6D59A4A9E6FC3D89130FB541A33
C18EE2704A670938F07168ED7C0E3C365966AF2C0ADB0A44DD2BAD04D646478F
84E4836D27E0A01A46F6739E061D77E0A75ACA00EA4C0CB8C20CBF0014487BE3
4E9EF519FB38556642EE90FF37D17E5774DA104D070B704B08E79F4A6D29EA48
B170664391508549B2B6F790AD4B0EB457657211A2422A9550A2ECD8D5EE4302
2B0D77E39D5F622C6324425ACADCF3751FCE92730C067CA9BC2708F01D38806C
CA3E469083C0E1093CDCE592272DCB903E9529034060F76EF2FEA475AEC43D5A
07C72FDA7553F4D1117C45BCF873465602D798C3D541B1E86FF661AE82DB7EC7
8EFD65C96885001F3F4CA545832861BD92C273B86CD9D95609ED91357137F225
A539D44C1318FE4A3D877B221B0727107B7CF39854F87D6C0A09568F677FB233
0928C1E5FB01AFF1C84F6743B995E1D0EB52E57A5355E97A652F4C3D861FD120
7D06346EC0D1CDD5A911735A563242DB06F6F19AA2F1F87919F37EF97D83ED64
042D69D9077600B0399146DA2BB78E3E1A16626EBE12124FDFD08CA230D3B7C9
D4BB8F738CE8E686759EA8005F26FE7A9137CFBA6BAAB5078DB3DE95B156F6F0
FE8692660DDC536B1A6CFBD3FC7DBD4C1D4DFB0BE50ABCB2FFF243628AA99F6B
53E829DDB1725DD5989D88365E7B7CBD2811F7E66F58C7DF9841EBDCBF85188A
EC6DCDF4835B961DF1C0D7FA6E43AB2422F87C16321A8DB1AA26296CB545FD26
365282F86D200D80B4A329AD819EE9F5DC02435C2F4C3E5BAAF3EEB7437C1894
9FD9BF65E685E73554ADEA67A78F81F67A0BE67D6584B7C31A0EFDF6A3DF6A13
BABB9017E6E4E87AE348A344A81F0CED19B582C1F0286A558E857E88FEC4341F
EE546C0AAFC0F228CB40DEE676839FF4A9C4D447014BB62676E713E6577D120C
8C884E733C81679A7632897034B63EC26ECEDCC3EABC2E11AA6968AE213801B6
BF0DAE9C71733A48DF5E0C7F198AD34B6D844A30A5CD9A2B92B00BCC6A9D3528
04E27F1FA4602A9B48D15204936757F43FF74CB7E3DB82EAE1DCEDD19C2E1578
C96DFF639284D4A9C81FBF3D4D3ED20AD7CF858A047BB2ACDA27D3E0C38C8926
66C5477DDBF8312F83E1F2F8BF6AB784505CE1E54D530C74C2498135C9AA3D95
BB4CA24CC071BFA5D479869FB018ED4756894A13755BFC8196837AD7B53179A5
B0BB86729FCF5B525DF8D97F1233CA1E92517B21357ADAACE9E075BB316D8D1A
AE16BB13E03495E42751B7318C9516C713ED106573674F378C4CB6984FAF61FE
04CE582BD55C1EAC647BC30DC70CA73F6E1E2A11B5F08458740BE8C53D6363BB
8FBFADFE316D582C7A94DE3F2B31E1D0F2D7D036990BB524171AAFC1A85A2B94
0F3B770B61EA9AB08355F6EA7161F41C5BB382627AC9B7F5565043816BD944A3
9D322F686027CDAEDACFD7980DF59B5DA8CDB7CD0A58C0AD6B9D25F401148819
C8ABE4CD22654772084A062917CF1B3F6742F990F3117E1D6DBA9D1C0A108E51
8514C7B76750E166F80E5F6346335F25129DC6929757CD1841FA3B4B2355D4FA
D134E4D38DA1D7B186808F89D1EFAE471E0CCB5A9343F78BDE091121DB35C4AD
36D99ADE0521F43940E126C275620F222D6EB778060F31618C8A1715026139E7
9E419A5B7A0C017CF2A1A313E8C1EB5EB5B970F2D9F0F492A5A195A59E750328
852B6564063DDBA7E1F0318477F39D3B3CA010CC9D0192CE7D55A36C7F30486D
DAFE77492914514DAA2B9124E5C84DF4EAD313B89F1444AD37EE4DF66BB734F3
CFC2A5D9DB539BC9D4148844453D4C3F4F923898B2DD348E217DE2197E5C92F3
E0AE96ABDE89F53C9AEA0C8A3205F257DB16BE6EEEB64340FB983FA442E796E1
1712EEEB42D043295BB83A46DCD201B947F7870AA9913DA34CAA44B7711F43B9
F5C86688E37293B4FADB68FECA8BA748A63C6E84B696B404DA4CC237483CD57F
37FE6C3D8E92D56ED1EE5EFFBD7DBEB59AA611233040C3BB850FA4E58C2F2203
1E5D3CDE7E1674C98E51F713A511C7C5489BBE70C02F2AD7B9F5CC4642FB657B
EA89B72CE9C17B6318D83AEFC15BAE3BC88EBCD90CF3D97EC8E019F8BED9E09A
ECA851AA1A7A7519E343CE1D09EF7F1E0BC67F2016DF29B2F4350B0E5EE71916
CA3BDD166F83D3C0AD445193BD12CC81604178F8ADDFD73F1131AE570FD8ECD7
DA77099F9A918D8847C86EA3DE3D0E2040A74968FE3478AA1C6CC490B27180A5
41527ADE35009EB3337A4DEEC948584C8A321A922F1910F98071030F9EDF21F4
7487611676F453DA9B16C6927981E3955A5ED731C01DA7048E05E75C81643B91
71450E4BC0FB6983284256E76545589149E1D61A1B689CA707759ABD27B4CB79
437FC3B5360534392748CEB58EA38F6B50DD11C600E83438806C7954C7BD374A
F1A3F95705DAB0FFA00AA458D45040290A2620D8069D8039DE0C2E81841464B6
C74B616F14F2EFAC60FFF9F7D4DFE40C3E3614F99773F7588F296313FFB6410C
985B96C1BB8E39E92B6F7C3FB76A50B8E826B88D3DAA7C7CCF8E9071B258BB80
2747F5A501A02B13493C27EFAED0BB55C8ACF184707307CD76A60E8F85B83DBF
B4FD129ACB9E0AE0063B7C708F0F49D6A339AC1F8833BB78C3FFAD3540FBA36F
9457362D5D98E5CD607C8A1DC9EFBA2B76B3B70C32C706675AEB9135266315EB
CFBBDD490763A1B26BD72FCB151757FC8ABFFF475D95F52219BF835B372D0D0F
C290D9826335F0AE7C3A5B6B077259B873854002F89567ACA7BBF7BD242F11D0
E25C9DECE27A367464FE1F4EDD905955CABB9CAEFF660A8AA1EF90E1EE48D80B
4098121942C400E928A945690EFD95A6A7536036A002B983934FB4DD0A6AB722
351016B6A2107D6A48A8E3E25449B7449BE2C6C8BB8B9202B542526D5DA0E77B
F5B24A44F45F43A20BDB918319406CB9772715D2B2E5141EB8E428CCFDA5D76A
5C8AE1925C5A6241C5B93BCC2935CA9977E62D2D3B2AF30863A014EDCB7AA608
1DEAADB96E43BB4ECA050074D7A7D21A066661BB2D8B490EB7023A1B040858EB
3F52D77C7DB617FBCB3CD16C29CF8F8F6BA06E6A4ECC506E906300A02CF75656
0791149CE0170D38ED2440ADB118DA45070F1AB8B1D88F32FCEE4AA0A4BD2474
756157053F87A724296B423322324292000BF2947543F4DFA78BEA6C827FE94A
9A3A862D939F3A32F96544978AE3A90DEA691B2AD7DB3B5F8585F05785805184
F65A634041BD8CCC4FB8D395C5547B24BC46B08196954FF5FAD578C8811AB828
9247ECAB190D130EBD2AAC708108CC95D93C80237F52C50735438650516B8D55
FE06C88BDD881581D85A2B273D43582C0FA0261898725424EE291F44280567A6
7CE7B4EF44E3CBB18AB7784A38A53B50198398A0F9EF2683B365EE48948E397F
889603CE4C749B3F8FC92F48F359D255C8E98BCC0110CE0EA79FB925083D46A5
9ACBF48AF6B4BD9853F9799CB068D62DD8B420643BE0889BA2727D5D790C7789
C184F2DC994DB4C98D662B5966CDDB25F39494094E3EF4F6D619A49399D391E7
DD2A15F01E915DCF9E3B349887C1350690F56EF6CF5119D960A329E2662248D9
5D131D9DA302AA75A7279AEE34CE31D78D057EF2453EF7A4E09DF5E83A7D00E3
33B16AF9706E0EE6A07FA53F9929EF8E64885E3B9FC3AEA52142845648F5DC56
C94B18A58D6713B84ECBE93CF3DFC90FEB84C7AF0233AFAAD1E24A8B87C5BD40
CA4A3F4DD9B7332A5DF14A55D1C83F3141583641111682F39449AAE476588E99
887DA1E558070F622A757B97828A9661A73C6E166A62F7D7619C1B39400EAC8A
995111EBB0E82EEA9FFC32D2F0F6C41EF3B021BB9A69AFD93838E9A626EB3304
F7A0711E38469F01011CDF5446B0CE9745A69E77176AD6822085EBE967A60E7F
FBFFA4E3A26373D42BE359B9006A13430F0AA9F267688791B7168D7E3250E3DA
E7D21E8C51F0F4A622E0242D5C2C997F8505C54EA10FFB437CBAD7BA078E2133
DF96416D97216425EE0A7DE4998762B6C788B98F89B305B1BCA2F13DD13F1FFB
F4AF353D88C1699ADDE69F0F85DE3A646841E898375C20F5CC9590B7D36A4E79
1D418FCA1F44EC185D3369D34FB0579EDB768727A15A40EDB32B88639153CA5A
3978C761C1BFDF12E84E750C163DCCC8D0D8D7C73E9635980F0EBB0B04647E76
5902225681B7F9DEC5AE5B6FD125F6E863859977E7B4EF44E3CBB18AB7784A38
A53B51CE731A8D7BE1FB876CBD7571F27E862D862D364C6666CB1AC36FFD053D
B503773A3AA392ECB1643FB12716A0872C8F68D03B609882B29D8F8F03677DFA
00B9C7874C114991864FBCA4F36D58FDE853AAE03EA53CB69F1F78CAE98E790F
9D8F936ACC2410A6836EE84350E7A6DD91366CB812A33AF840CEF88C2F1BE4F3
B7139F4118DCAF6612217B4A73D9C10A7A87E3ABACC04B154FAC3E504A7B038F
A9EBF200225EF6B72A2F1AC1DA27054C58CC28847CBF75FFEFEB0AE280237704
8E6C84EF3141BEF12ABD9D7CE361FCC9741D51B792C14D12B6515261C85D4A03
F84DA7145BBF16462EE5D9BDA5D89F2EE6A730FD9A2FFDFA1B8952B004E8E5F1
500D95FA59DA7E1C6E7A336E30C092741BA7FE246F35C97B1654A105DD84A54D
D0385F3540F691D18238FD616AE43A3219389B0F485C330D63BE9390488A272D
1E12FEA1EDCB6D43291139D7416C049A4A61DF84FCD8A8E8832B8EDF26AD8186
32BAD5821F1DFC98C75F44CC8B80DEA278876C97225899D5454386D0ED4E0472
920DEB9D5FE526F0C62C957766ED125B5C4032E97FDA8BD4FFA260F5E38D4D49
CC66025908E5F5071193E208002DF7525AC98D11A8F5C051C58D0E6FE973FCB4
DD3D8BE9B1C1C8BB92317664F114CA112A428B0A7A02F1F94B80188DBB551D4C
CAD88ACA659959F52A1F606410FDAF90873369F2B22532C617DEC6A7DAFD44C9
936D55F34047D3E05B101DDC75509F64E99BE18C1A08AFCECA8B89D0582A2C89
212837C85C88EA6E19FCAF5097D67BF30E87D52C30D3A7C53C15C4145C4F68D3
92DF1D684280749F116D1883773577F25E37A07F94AD9A84C6BA5A651B01EACC
F0442490FAE83D36233BE5797D7311718546A3B83C633E43E633BA0AC81A1FEB
E319F77A136CADA3BD428B6636BE8B11BEDE3D3D4009CDF5B02102FC3CE3F311
E52BA1A2C68E50EFCA3435C525E38B8A0BF4E32F4A4C293D71261F0A6989A9F6
2773253A3A3DC90A5D78E6B1EED08FDF6D1AEA39EE8F36A99F2116964295B83A
303CF159B9C50700C19A7C4447E7ECDBF78BAB7FA82E77EFC996B367BB79E69A
94D7AB6D518EEC5D8C382B31943816E86156EB206A14F87CFBDD2A83FEEFAA0C
2F896FB2EB9FD24F07B2F540B706EB4413026B67D8E12FB42C91CF67EB7C2523
BC0229286270E1A29D2966F70954567C3F74FBCA01AA067AEF551B15F8ED2C34
1D54F1F36A81955F80529B43E9F27F411DA3EAD2EF73788B52E0D16B6EBB2B01
340F32F4578998C966C01AC572D50A7E18D422A52DEF62E9CD2219A3C54C8049
D22C664C7A6777F03F6B6197252E5E1BB553BC09A9AB1C7334C6579F656CEB8A
F1F0D2B736572A20B8CC7B48B4B08A59FBBA2855AA62E260D893C887BFD675F2
7F1CC2B577766770EE23C52AA3855501B6A0F713679092FDAD4A040839172C59
24A20011326555EF804A6913C95B139077A136E40834E3032FFBA9DDD5652727
A4F2C1F39094E0B4A6C98C1B4BC9C5097DAE51444D0FE57EEF2870E0A797E0EF
BF9FCF58CAA248EACAC72DBDAB88E34AB3832417769DC556B2CEC807E009E610
CBF667B8F6CD5A2CF5FC08EEF9DA3ED165947B449F2023F1EE8C2CA4A8D57CB2
EAA8C48223624D3745CD4C82DE83BDC6A212592308842745FBBB7909E7F7FD16
A580545948643D0592AD792C3ABC32E64EA6C0EBD9E38F8A4FCBD9AEA287159C
F7C8E5D8603795121827D9CDFCB04E46A03F6CD5394FA5508EC4D6FB9BE787EF
AB2C3C08F3AA38FC9743F598E765F09E1CDFF5C743B277CB49162099864AAA5C
946F79FB10B4D1E5AAE34D1710C01298915372454A70C8CC75EEE08AF87D3505
81FDADEFA488D1643E1B0CF6FE6620D69B0B3F849CA87D5D36BD17F1880655C0
CDBEFFCFBDEF0CAC869DCED6FE52AEBA66664D880EFF710FDB3074E9593663AC
861E5E7B6E83C7743705661E03F9E4C7FD903BACAAF954528A3533E8CFA15CA2
6AFF3A56AE8C8F3511F1F3CC94F47A0305AA8E5986E337E687D92940563A3F84
17A318EC823A5D4B8325CE4285CA2AE184339C5E0220FB8FDB00351E3CC436C5
B79BE6A5C24A65BD957D5CDF610F912131E85592AC1A856D9077406389AA017F
2ECCC26A80223DAE6F2B4E6790D3FE5389BBB96DDABBE0A28532BB1E788A9D5D
DD33DAB881E9B183765B71717C66F7B55D0DC97FB42FCE9C2F750FC0A519E186
4B53ECE439CBF8178126E4FA8ABB03A2FEEF0546016146140492C221449B7485
5E0A19A9D6DDC7E9DBF643C5BB05632CFAE73EAE28585EB1C0BC4DC19E718066
1A594F18BF4F4AD5DE0B5DC6ECF7E5AE8A5C994FA4BE4F1F836AF96C22B2FFAB
009D9E8F358C1E70B13B8CE9C2702D5063750404EC576D351F19BE71788C6CBA
14D63F557142918C38179C9BAA805D7E49A4309F6D9793F58836B9E064A16CB6
C043239C9E1A4FDA35E4183D23F5CD60C70C77F886D302BC98D316B28414A10D
24B105850CC1A175AB64001DC11E53ED53ECEAEB89B7792E8CF7A04B2ACD3034
2CDF7EEBCDF11BFE38A7AF80E6AD955F17F4FDB573A92CA29F968D3585EDAECD
BCF27793ADF7B1BF3338F37B025309265A0AB29A25CEE992C5D1BAFE3C2A4586
82860B87E08ADD4AAB386E95EB168EDB854BB9E52BF6DBF5EDF9A345D2241F92
75C96F21ABF0E668C8B67359B99EAAA11CB03610A25B6CC2819FF6F26221A016
066AFD3C419B7EF58276C01093188DFD2CEDAC61DD917ABE529B96547A2A8BC0
F291309CBDBB46AB6CA7A0ACC3163784CD8757EB205AE0C4CCB19AD7A581B7F0
F2A7A0FE38D3A014B6C3C7853E2E847EC769203627ABE7BBBF06DE5BE2E361B4
419996E7B389612CFB014A33ACE0C6CF860C2188B5E5E2ED391D637983F6E44D
728A2D780C24E489571C79B85F2BB60915A4443EC14C8F37EA53E0871C6A856E
E18C987CF83DCCE773A83C1B82DF74860854E60D081EC283B3B5D13A5E991190
FEC88D670FADD8123B5474C4E42868258DB281B08E09C8B30DE6764D2443EB3A
0638F2F77E4B285CC2265E464E8808BDF0A6BF858A498FBE8B174FE5206FFE45
FF252232D57AF4515FEE837CEB8A87F901B1D00E24494469BE40AA5476DF3987
018C30EDF0DB8BFF27F4EF22BE7104F3A7381C5F0991CDD6D6EF816AFA4869D5
39242C2CC6BFC21015AFE82FCF228227B3E0F058FE624ED1E5D5567E69A6B4EE
702268537DF81FE7D0D2F2584C071666B7B800EDCBFBCFBB2736A85B9218B845
1C1CE753CBF6D1CB6E43F26453E1784DF6429141E1E1223548188455F5273D38
526BD44F98FE4268D84C4B105B05B16C0B8140A92B6C9D37E4268D2ABD68BE06
172177FB118F2EFE54CBAB25E38A4CD22AD21F5925847B20198A513B3180AC4E
51112ED134986229422526046B27F59EFB7AEE0CB4D05780001D567F01CF59F9
E7D7094EA590BEAA8A5198FE8C6DAE5E8BBB906ACB623805A56CC64B611CDD52
912F3D1B831C6D03FBFABEF9C81D9CBD1BDEB0B34B4685CF8CE1909400E05A6F
D6F33CD930D431DC3A34269C50D65D14B6D619AF7C314E0E8EFC499FAF9917E0
A4211F58E74D093D9149C895DC4945F4326516968FE24DF8DA1A8523A83CE875
FF3489FADDFFBC47882062A14D972AD1D956FB2FA17D3B3C9B12EAE58BCF2F88
EEB5D5123CEDC98EE686B4A553F74A85D59CAD0DE8B4E23B19EA988237A3B2D1
A3707FE54290E51550DB59E4322176137F3686AFA1863BF5F6390B4641F27CD3
BEC8CC149D713D476E71F1470EB935FFF84A46BE7CAAF7A60D496CE85D239345
7C50A04094D4C1D06311DF5FD96880ECE947B6052A4F33065C68458D28C670CB
FF1BCA45F48AE47A46D51E819463796B070A2B3B51BA0190EB4B23B593786176
93213061803A124704C62901112C2196C827C610872B2DBD8668A8A7CAC9673C
70C504C797B3E0C80268545C4A69B44864CD60AC879F572DB81D3EFE439914B7
7694C3F3A6414CBC08267C84560638D95F3D588D6E07F1E26F0E0C5400E7ADA7
1974E12ABCB895E0183959C7E0278CEB41C46373947358DF9C93B7DCCCAEE7CB
E98E2E7CD0A51BD638BC0C2537809B8D2A6C47FCBDAE410919E31DB52069F011
5CCA0FF72D2093079A2642CF23F408290B56F2D294CCE99144CFAF5505DB8C3A
EC6893772EB9D225C9F3407570803990A466030A417E78F9D6A10A365985F7D9
A1CEA05AA1EAC90278B8AE446ABBB751053D42564BE4C2F2A4B51846F3BDCAF1
794C18E1CCB647647F445D3FF7B9BBC5928BB2B1D62CADBB04D5A74A7A957421
09B87E6267DDA421327356EDC9FBB6ACC2735733630065F2608CBDE18106AF54
5301BAED4B5C074CF9CAED6D09248150786DE3383AB03CD11DB49D936F790E8B
4CB06F4227DC9682816BE2216EC3F9C89CD4B2F8CC3862063C0BDE8A0728C5D5
33EC873FB16C4CE30DE92133740C73B1394479513741DE60091BFB975B3CA389
6BD2B0CB7E7460D287E65B2DDEF6D29F88750B156839879F942AEF374FB9B664
FA0D77198CE6652E2F2A2F19345B9C205A6919CB665988B3993354DA317AA308
228FEC40F0445ECF20ECCFA7BAC909E4FAB70B322C928A3304A859D98C2AE3B0
DF0C1ACE459D7FC4F9C50E4805DD9838C5C286853AB506FE3196DC7994F3ADEB
8D0920E6F0D5806715B0D99569A25169F92404F6B1469C26BAC29D0A6F370355
88EA515DB7EB203CD4236A12B00D191F133FD28889AEC6B4BA868F318F4A5948
4B3924E8C4C56CA2E51E93B38DF0699EBCA0A210C5E777D703DB271340EDCDB0
7B9796DA58756FA0D72F2686A73AA0DB11368DE7D088B666C54EDCAA90CFBECA
C423EFCB573CD2D0DD4DCF5CE2F7792830D0DD6DF169E43AE197A253559907C0
A13DEF135C81A880B657D848467626E1D0ADD5D7D4B3A3FB4DC1AC6988632662
5F6ADCAC095B0F2D969FF03087C4764D490DBC088373851A0855F6C418B2525A
B9BA9AAAFD1A115C632910E1FBF1298F8053603441C04E0EBBE7235A85AB4510
6417070800596ACA3FABE2A790586C8182D05BFC7D5171F745731780467348C6
C0104FAAB95731760297D1B413584325272087D1106B534A707DB89C11EC7E10
17D1CE2100BBBED029324AE193EE09C797FA52D7DD43B679CAF5EB3E36CD2D9F
BB84407FBEA91A5C1847CED3D30BFE096EDD56D5EF9CD88E4B559075224923CC
A2E1381DE84FE25767C311CEFD015C6806469B92AADE39D1600D7F6229441EC8
BF95F015438E33FD48F1442F138E6D34297EE861B914BFD2C9E1DA366BBACF12
EFEF1C2C7870AE7D62FAB2A265DE09BB9DBD1DF98861BD19D0F091D72980787C
C6F39A835F00AEA8D93845CD2AA8A1CBCDDEA20CF9CE7D435F733D362AD97891
27D2D5FFBFD7E4036FEBD5E3BBD5963C615AAD698238819E2FAD0AC54FDD79A9
E39C505CC47232B9E3DCE9AF9D6ACE96BC6BA8BF0A9B6509E8720999D6E0536B
1D953CB0EDF314A51EBE3DA85923D165E73F0099BEE013FE84B3F7D27759E76E
615E8AC96DCFEB832D66DD5BE4DB748679AD5647B87FF3DF51519ACFDE6E1EAC
7B9273A0137ADA6FDFD1C1070E3C922559FB12AAF73EF65E0C3E7EA66F519781
707A1CC19509B048CABEB786F136B6591BB36E9DA1187B9B5D4A33135ADD22C3
4FCDAB9568D29A98AE4EAACA821AC17AAA3E78B3D71B7757CAB550549BDCCFFA
A571398153B2681741B76C48AF94643CD600D46ED1A0C59BFAB99EB5F30A2C18
7D0641B50552B1E7F828145DC333A77FFBB718BA58A8D5DAB7A870A6FB27CDFC
BB490A48653ED2E5D54A3C67E34280C08495EF31901218C4E07CDF6B7033CF45
AF30E4FE9E49377AD80344DC704D04506536BCF433D4F2E564B81BB7D3D1982F
2C7F311C92BDBF3AFEE3307B1CDCD4D791578AC250762E9826C6FDB89617A1CF
9B98D6C762131E1DFBAA0D412835C09E8235CDCA3224261089F5E10DE8C6A100
15CA03254AF31C4AAF34A4FDFD5A8E2A6C31619F14354D70BACE74C20E8F540A
E4A17AC2985AAC4291517EA4B3F55264B064559D0503D4A2B82CBA82B08B0739
1DDD64636A1E9DE835560FEF4F937EE8CF56EEA87AD11067174E47BD24C18433
9C65F45B2DD5AFD96CF456D01C50B811EAE7F801A2A4A8D7C0E1A50428F390A9
E7BC9AA9D415F51F913902BE373769E6B9DB3E9A41717F20A80E764D3B449869
D40D39A72D7831E1171EEF0794735EE0A8F8162C84FA4FE8BF9CF84D4070C0DB
74DB6319970BFFBD1A80C5043954EFECFE10485A5F88DC13C190CA0C1514431F
FD29E5428076E6C533CE8153AB8059C9E478E579EE2FAA608E9F0050A41D5644
57C768BBA808890ECB590472C923348F3A1FE8426CA4881EF3502D2D122CDA9A
E789E42C389EDE846293F4F565535C40C2DF37883FC2BFD3C6E3383906298968
B12CEBA294E01F2766DFB49E029FBF797CDA878EC802B59733A871E3F0B4BC3D
B2919AF179689B20A27852B34404BF8A083E604777D6602AC0DD27232EA50E2A
559435E72690E47A5575423D084A8A27F23E7927EDF8433C4DDBEE19D33F14CC
ED8FF7322DB84E23BCE0C36D09CF9E2FD073701F40DB4161F5BC2918441A86FA
D317D469F44BA5FF7C76EAFA146B03A33BE2E8A887367A5D3F6EC7C2F74649D8
BE471C0DDB423725599017EC756C93B39DA2D7C6EE668580D173806EE00B9190
4AD3454116CA130F1710C4D384A959FB5E27C9F2AF13E89BA11B92F897BAFB71
5762BAE8419FB4C114A198A3AED84028918A39385FCCDC600AA23D4645E24F11
08C2D584DFD234D0ADAA58CC5E2DD763EAB0E48C62DE0885B8D074A7642D51B1
4D6BF331703053D7A0F32A727D6AE02D6247945722481A2BB0C0426BBE1EFE79
0D4732272D5980A3AC00987DFB8E86535BD96D4E8A5B3229A323B7048692004E
8D5B14183E0EFD29685C6FA1BFD78EBCEE63C42EFA71302A4EBB29FEC54D709C
50864C105BDD3C8070619ACA6ADE78A427FC98B3BF6EF08E319EFABBAAAAF1D6
A52C52D99BBF316ED0E84D4F0CB6A32BAFFFA8F7E50CD997A8978041F8DCFB2C
D252F7710963CAD0B1C5270BE35D2F96E1059607034CC5D3CEC383CF03C6DFE7
2D7759C8995C7031555A4756F636FD9C66873C4480C5C6AF493594567FFA5B52
8CD94AE6E32CC9A1DB8EBE55ABDB390E1426F6CB05F2117C3B9C10D02931932B
E275EAD3822441B447391A605313D50934419AD65439FD992B4E33E2413B40ED
1694EF30BC519B80868DFC551050F97EAD6C933FF53193EB5E264DFE59BBC830
83831F41EF23D94DCC68811A991B2009B4DD28A460C862DD34E1A30E99F17020
0C69293884A973E58B2DB2251B5576133022D610655AD01C64189D085A7DE138
3FBEBA4089899E9F4A7B818EFA4530AD6B09F745D931E81AD1E41967416E1FE8
C348E25A96E532B53C97B0553201FFDCAB2EB1C88E7B447C8CECA243AA068FF9
0F702ED2F3DE02A1E37A1446EAC57D237A1591BB471640E8A76B023128075BC1
FDB07DD31F6A154B5490D8D6E32586D16334DA6B9D480E9E6D2E0FF9585C3E4C
4F139C46B6BCA884454B2963742963DB4B983834993EBAFEB322FF15193003BC
DEFDD65FA5A41863B47FFE6138D7A7E2FC165BA7B63EC9C3275E3EFC559D942A
BDE315589D981F2547EB434DBE40ACD0AB6CC27253A753D679BBEDD3FF504DB9
FF13439A59A24C09625D1266B4F1D4DF3A6B78BA2115AF58CE22EB741291EF11
7B8DFFDD0C41E45F7F61CC55FF97F7C62B1FEFDE6DF012974241B33B67AA67FC
AFB573A70DAE4C0CE00686403678EE29038F000D1695E55CE25C3EDA2FE76AF4
74F739BAD34C85D6964051874BF44E20E4A3AAE67CE9405AEEA82D1226ECAFD4
E9ADA1387512EB65992FF9C83D7CAD2A46E131BA4EB5063893E6A559A2C294BE
88B7EA38B0902B7AA7C46A1D9ECA78D9846B799D9A8A143DA77E7ABE6666DD7A
3E056E8449D591595159BF5FA6EF014C41391ACEA0B20D18F3C5AC2AE6DB4A62
146F42BDA2984447AA56BF7D865C0FEAFE482EAFD796B8A5324BBBE01AEBABB9
0081919E07526273EB7082A98CD3F2DAEAB592D605D74AF9837FF026D77A9782
DBB30F18098C4BE32CBE9BD9959214C260B05D426EB29A6A415AE54D2FC625DD
BBD2A0937497212FBA8D9CF42032B368A4FEA2E9D5925FED05D60D85375C53B8
2AFC59A6323AAD6C18BA46F7CC9768F72207405CD04180727AC1D6EC9F864CF2
A8581694AF0C70EF36C3E406C33C037B51DC5267C2C78F7595F63B242F6ABE5A
E0F8C80B693FBAB5D522112B787CF3E145F8E4C41FCF68538CA88760F8ADD7F2
2560BEEE782247E5C1F49083FFD94A2C3964BF52C601170FCE601FBC0E93BCFD
58FEF7D464D473CB96B2FEDC321C756DC486131C0EAFCED360A9270BF7C049F5
748D612C2F7CD376FFC1EECDD9114D530140C1CCA04A53D11486192AC67016F1
2CE3933E53261E44A0FAE9BF4FFAA1508421BAD346F805D481D2AB500B13EFDD
690608E7A0EF4C4E7DD5ED759ADAE96553591C49C8F660952474913EDA2740FC
B7A1A92F293284B025BBB49637AD919D024650A3D4F75C69573A8247AF30CBD3
B8FEFE6A5F23081191152C01A7DF2E63C5CF0772DD3AD3DDBEC1AB6374E1E10A
9648D33C15B53193FB78D2B8EA37CCE7E46CF99B117F96560959231F2BD6408A
CAE74BE7E3358889F0C7E050CC75AEF32776B3A29543F526BB81BC3B306FEC49
5BCE04690664A1FA91CC003030253BE4F8E963EE35F073005F4B13EC25741D89
590C9844EA1E956E611777ABF56369D9C7C5BE7C552F40FFEAA0895020FEB0FD
A1F01E4961424B94A0B72EF5E8DF9EA935CC63D5B13BB00F594EB3737BEB3B08
0E044638D9081B65FAE1118281DC3D80855220F975CCD4A9043E5041E7CAC1F1
44DF9486B3CFFA939999AFCED13CECB02D64A80F0FF82D718BC9D791B9F6A228
4643AC878A542DEBA7326300217E1DFE54F1D17E880B3856C0E035BB6FFA539C
E793ABC241CED825687392DB64F65C63D5EE4E26202AE5C6281A01076686837B
4A93A2519062B5EC596DAA33F69AA40B6D5DC23F5D22F98710EC8717BDFFDCA7
92EAE249871AC562268B2A97C82BCF1451E58159AD71A3EA6BC40D4362EF994D
FA50F250768E98AC0BD7463D487B8CEE274AE7842BD8077F90731D9C075382C9
C78142B90F315333168698A10F2495328188B29852F8C792864C4BB40E21CC10
0A2A0D6DC29A9E5BDFFDC394A6DD05090D2AD76707A192DA3CA61BAB9C801481
CDF494C2B0FD2368A5D997FBEC1FB68D602F16E8763506676CEB1FF5CB70E6FC
D8EDDCB9320664BDD6653FD9670054CC043974F7F51C1B692431A07E3A510BAF
6268A273112DC13C7BD0994D5B943DF49042CA0344D8330CE73E7BD25031B3D6
8DA2E602F26E328351B0DACE2EB50AF4A47E8B1A3D507FEA848119B3A38F6684
D7361F1E510DE65C3C4ED6D9DB299B9AA3BDBC5FE9050B75B90D82A545A7A2FF
662E3CEE4A15B9BC06E024596FF947F6B730973063483F9E87C210A7697221B8
FE16A5737A89929306EA078F09A2F70D7DF08890CCB66011C6813D4C5EEF232A
952324FA5A6F737F091E4EE61363C0F2F644FC3A1D8DB7E6EA57688C97CD7C7C
9EC243E3696CF275B77ED3992AA41B396DEBEC082C8B4C0DAEE8AE809B53F134
FAB24DCA5CB368B6A8AC8EF0C740139AA3E0DDE69577451CD76A6450E3FD123C
AB6EAE2DC063095DBFD69C9688A6517288A870B9935FBA7CFC215116ABE1B34F
B9D69EA205DCA008FE653D05C3F22B105359EE65575EFB9D67801270FD3F8BE1
4BD010AFD1C614843B040A79E21A616C8C05EE7524D87EAD421ED0ED3107E704
80CDC743E438272CD80C2CDF97C3A5C4830CF8E305BCF89B140C6E7B4CEBF2B6
0B014CDA35ABE3AE7AC0F677E280D70EB2B7A4909E6A44ED2FC32444AEB565F3
D87684D7A23752762CA0200CABA11D45531DE1D5BC2030087D62B042DE210CA9
6381F593D01036549F1D6B75D752E762977BCEB28F129535655C5E9E97172263
A7E37ACA8181D99026877FDFE438990E66EFACF929793C9D15286E6667AF3195
281E7B0973FCA3AB1E0D5BC544AFFFA6A435B64AB5BD2E6EC580D550DBF3F7DC
47B85620B641E77FE5F22725425220CF7FAB7CE21F0814C4FA99AAB6C049430F
38CEF6AFEC51FEDAAD95397881EE3757EAEA2383627BF5736BCA3DE34E62136D
90BA08337F8907DD71B5488A941C64D12982448A5812C803FA8DAC277F358382
1D40C3B1C4B38D864386B8A96F494FCF8D02FF0165490A79BEF3F8472E70FD36
95BB17486D50FD459A3DBAAAA332EEFD654E792BC98F10E2561A3749ADF95078
A3374D2BE1482B38FB22FB41DF999023275AF5D30C951844B94A006DCC6471A8
F256197AD8EE1F44A32C81C2F455F3457AC3E42F65210336D03CA94EA8FDE1C4
C33BFA85467C96A1A6056D66E1F57750DE134EC4DDEBCB56AE0A7C8203D9F119
B813E15DA7A0E4DF0457EEBB0B78D8D60A180F4035419B561146730DA663EDF4
85800E59218D7B8DBFC9B5C97A2C9E8B589AFE944BD226D4263EEEB56A465866
D1AE087F3A194094B28D4E44AD4A65B11407FCC2DAC7F13B0C4C93E1E8BEEB12
390567CA015D3978A928134E9EDD96EBFEDB66BF5F5E18C430D828A7C16A8100
2AE7A15866F68D158FE3F8269101D9D7821941B18B7C1A0283750EF567B17896
EB7B59540B407E0EB8DE1DD9CBEE48B3F4FEC235AF963BAD37DC2D0EC44BD11A
6DCDB73AE5A9DD0D86FB2819DFABBA2B0737DA6A718DCE5C60D6A10375649F76
7DE9A0C0D3C395FB8048A4BC9A1CFFD8A95305CA994B7954644B183F1841A4D7
DAB401B7CBC2A482BE556600A300B8CF4ACD3E6251856A45F16B65FA7D2C68B2
9971E6C53B5A35203A5681E35446D145400AA4DE5BF8B928579198B80F70788B
40FEA6E61E233FE6F94D17650A49F6367351904E1E2865C1F737A2B388897F0A
59491D87094363A61124EFAF3301B96CF71FE00DB9005DC58973248CAB6870FA
6E98C7A8359BAA60D61D98F51FBF490CC444BF8255E368B917A0768A6C447CB3
99037C7DD77615062D3052DB0709E14D4201384F222B95BD5CFC70229D53ABE5
B37EF91967AF1F68257E0623A21D85FBD07EB4B04BA53758C5F1225A7B3BC68C
A891264E308B71B7D3DB781D8E7CC260ED0E596CD2FF09E7A787826AB395EB36
A1595871E3ADD1369E83B1F17EF142DD510AD2D9A540B2C3898FE6E5178D6E02
C275758E030818F1BF84FA81843646B877AF11DFEFE3A52385E8A0D50E496DF7
F6EEDAD2550B6AB9E0725BBBCE6C57ACE0F570BB1321CF72DF8B64B19EEBE1F8
1EAF5DDBA6A5B619F99A816A9480F12F1DA6AFACC63A0C38E38CC83B412ACEF6
FAB2991DF63DD926DE12D88C355CBCA7D1DAA9F471A0E0CA7D0B08F6DD1C223B
FB87C851F116294B1A74F066B7CE29E64449D9F503D6FE3C89FB012231166D45
7F08E688CAB4FDE2C554E48B96BD6E7F47D2A1F30D9D0EA7AC32DE20EAEC3871
93E4B4866CCD665A2F8007CA4BA03C8C2F41E10CFF5C14B050EA04F22A80B647
9AB78F7638ED09E3E7A0FF34D9CD381AD02BD2EFD7D3490438AF260A47AF6E86
14A80D19B6FC3A41389937E5B2316C22F79D781393A7640773DBF0A0E08D087C
4FE8831DF0536D8D5AAFCCB3016C566B0425533F6838C73D817742F8FA900282
294488D85FA68C9C11CA3806B3B4F0F4236BEB835BD15E565EA311735A563242
DB06F6F19AA2F1F87D570AE5DCF3DB602F93F2AD9F14E00604EA06BAB635A0AF
98F5DC7E7DC308C555F071154D0F19DD3F1C02B136F0D3165ACAD0463DFA4563
81B41E04A32D687A3DE4528C9E61C9F6B6530C38C6605E6B2F25B703EDB52388
A1B7B848FD519B5B4D6E00A301AD88E2A1732B362650880B501452D205CC7A0B
42733EE2CD484E331B5266752AF7E34861A6C04F49A5E5277FCF3487282E5CD3
DAB1FC6FD1C795EE6B7C3A557B8284B6BFC5E2D6D9762A876980EC5C16651E50
D35498E005FC163DD57E53AB4918EDB8AF55FF956E5992A748BA7E5F5352E919
56697628069EC53FD5E9C745E978091C4C8B2BFE8AB4AF787DAAF64ABDDD0294
2696B50AC447A92297D8B4DFAADCD9247310B9458B6B7A1AC6890B37EBF91F8A
782B8649B9E6E8CBCACA6F843F286522FE8ECDECECEA7062B322B87BFC7103F2
0DBB95F71AF416DB4E5D6BC03884AF2258D43E39503827E1E4CF6D19962FBC53
A59268B50940D51C799F0BB1E027C2A23DB3D967758A7CC5FDC0C1DED57A1885
D1F64F31E352918C737927D3A30E28AF6A1251535B618D8498D5798664FE39FF
4B33596101264ED3F9B4B9C9114D834B26726E057588B3DBCE208126042BDA8A
D75E1DC771D68C11C8EF49502F8745EF0063C30691F7EC342BE9A2B01CADC18F
55E3B60D1F5516DF5E60F059F014B9BFC9B7C6FB49DAF4913E9C608A83178548
0F27C8EBB62AD5FD021E2397E29295AE76F09A56DCB81DF6D0C8969C448853E0
E41CE5C9F79906B4165CBA24069472DD6C19D08C25E598B3F66D65F8F487BEE6
5F053935C4A3E1DBDEC359C343288F42C934483E9DC487962473062040E29269
4769B9A7EB1E7EE99C741A3E098E1AFED1CE464B43801A35FBCB962C4EA67DDF
DDA9FC5209958E19C7C476F585C938A8015312E6E0662B629AB09E72508F7E7F
720720FB0387290B16896410B5F0942790991B10447A9409B07CEBC3B0A4502B
8DEE967B95EFBD1AB1DEB005EAE6BD338E6B04E2F992F03831FFA002099904D0
574661A759149432044905548CBCEB6F42369D3D5350009CD7AEE826D25857A8
E0AF536893B02849B46C2EE9A510A1B46F9D81060816655B2F7052016A4C72A6
A1CF192D661BF10004C4F14B992441257B033382D80BE876B729C9D84BBB6361
D5378232BAE9F5C6B07147C0882B362EF0098AE31F54ADE47822468E5201A9BF
AA84FBFF1F6BFE63345B0B8E33A660729F9E2E1A1F760498C875EAE7E66ACA17
8250BFA1E5F9EC3635E0A8F513BC3B3DD2B411C9AB9C1EF7C643D284AD3FFE50
D1F56400564BE6F6D44A6CEB33D4106D93A5C7214F35DF0AB0D6CE94A091A27E
7846225F62D98DB66D2BA8F1ADCF1336F8E4D8E15752FBCD381A1D7BAA3D879C
E9E2C6E2A74BEB265CF56EBB39E55DAFC1C94CF72D16E67673D2C20708DBEA9C
C0879E7CA668FF3BD876AD2DA6FF8DE0BC4DB13DF444FA6446A858691677C450
DE4F944B29EDC8B303E1D51D57925DC57EAD88D9992186AF6EB6873AB0D27866
E1CDD66940D73B5F679F14435D7ACC2B56CA52E1D8B5EF5A64974CCB30B94990
7BB3E7B2C5F5333EF9DC245DF160A85EC85E61CAC2221E93A6C55A54ADEDC383
DC37312CD634497940DDA9562EAD979388D9C21A933817168828BA1D6D2F2D56
D62EEF6079504A5809102BA7108DBCF3A47DCF8DC829927255ACEA830AB445DB
A02FA1408073FBFA29230E7F23904838D7336D86BEEFFE9CBBF87CF91CB3542A
09B69AC6ABC8DAC07BA099C29BB1FE8C16CAF0476BE6A1A65E9E870532BDBD9F
E993C90728B12FB175C21077173038091AC805E832F016A7FD4F3FBD4484E5E1
2A27FAE2F10CEA6C96698ACDBF0A08DB38FD4FB56FE607B8ECA12177C4B8DEC5
757DFD38424FAFA277F3BE382D95FC3C863CE08C8FD14D52B22037060D77D034
79871FB0193D486571DF39B5B1D41DE505CB79365E6744950545990FCB1877EA
E85AF88A27261ABC3AD2551EE30A8BEDECD5BC7A2D67CF6C3160A1B08BA9E19A
0B51A509626114A5A70C8B8FF075AFA3D03F6BFE988440D16A80AA4D723B8C12
8ADA8897283BF696C5C43CC63C1336B7E4902B45A1CC9A9CF385AD06AE33AACE
5B3829CFD0DF347C7757429B3ED5E2767557DC626C19DB0DFE2937634DD0B9B6
1219994D97AC4451DBF27622E99305DE4283D9697D004709EC35503C0A39A5BA
AC0D7009159F18C4F3042BABF0A2EB2C3F904BD0E9E9307B675F8BB048F3377D
D8F3C7E469B37CE1EB1D10C6FC1DE5C6AD6D53EB2CC157554DE510D2A8F3BAC8
CD654950795D08A0D7C797A6FE0A044A347782077C3E28CCB6C7363FA5FD95D9
4CCD2B1BD035F7969DDAF35765327871EA80F3BBCD9D13B0C2720DEBB9432F01
A550980BF46D54DCD0A8E25EAB1EE1935AE395D789B19C4E00A759B499C19220
7C1E52F523C2D6CF25CB716AB9A86D4DC4B88645A7206ED266C2A0DC0058B06F
85F072B966A6C68B85E07DE33B84A6B5CD163EE1658E4FD0CB2E528EC29E158E
EB43F280A931F7977848C2CFDFC77C8DBC0D4189D56EB1E1E9631A82643ABD4A
03802147C5206DE64CD9FFE20059D241C6709E48728B0F13139AF488BEE9FFB1
DE7113B024BB2C188D7C6AC93C1BDB4CF80D306801E39931F366EDEFA240803C
F44B0A08F5D46A50C126DAD3AE6D93AB2C0F1D1CE0A1C1B8976C7550F2768BF5
4B1C1A98FF75D66700397740F2460C6CFBA1276014042DE97C5DFD1B5068CACB
80A370D8E7233027D14400283CDC01B08B5CA9FAD301988C95C23E251F523558
1D79F4196DCA7D55C87A77684AD0A9CA943E52234275369F2CB4EAA482D1A851
0092BD01240F732E1BF6967AED15459D627A9E65A1323BA915C10F72563CE05D
8150B809C13809A65DE0BF2FB280634F9E280372A27B2FBA37304E3316ED1F26
0CACB7FF2FA9C2EB77D6CEB6F20266F110172D43AFADFDF0B16608E0655BE1EB
6771755B69AC213B044151D6ECB0EEA2511C0DDEB5233B2A5106EA512777BA49
E80D332113F62106F087832A80B7D1C508BD9460B1B84DB9BE580ABA8412DCA1
892405028F2F6B29B0EB5BFB698B7D33009B49727FA8952446053FED1556562A
4709034E24DB6553A025F760169CB952FAF30077FCD06D0FFEC2FCC2DD5ED058
2A0CD093911A3E50E363B67CF0C6B7AB68072A4415D6B490673720FD6A84B18D
97C290149AB5D5AFF4AA6106FCC27B204D7A67C1F6DBA0C5818D03DD7267FBA1
9417F8DCE55956FA21D6DB9D518687A54A7AC0874061D3B4B6B0FE1E989281BD
360AA9CF68685FE7988389765292E21B4DE9FB4F0DEA229A8CB90819774D5EED
01ECAB3416BB3525E45C3B301E6A2B3EBFF06F817E40CC9ED578C838BBA02506
798071F1F8CB8F58295F08250FB345EC3C5832338D9A8EEA1FF5CB70E6FCD8ED
DCB9320664BDD666E4ADAF64E30977F52AF5EB2231F0C4E85D7DB0A275E76E1A
FF0D3119E033384E202C3BE3EDDC463DE9D30C60E702F76CEAFCD124689E3FFF
AA0DB3B168198AD580430A54AAB1C77EB53C6AB9C468104114D2F8B387AD8459
7860B4921A01B83BA6D9C90867AD294030AA8BAC6BCC11228C0DC64347977815
3281472BA8F9877AE959B2B87FE13DC290C53819DBDC232C0CA7276014042DE9
7C5DFD1B5068CACB80A249EB769A1AF03C5426920AFF453DC14D9AA2F99A4390
C909C288842B157CAD1E44C4FC5E5445FAE2131C80261F040CF9D08057C9CB4D
29E2278CEB41C46373947358DF9C93B7D56565108E305B068C11A8020D1A155F
CB44F4E345720EEA0421B60B1545DB74A31B8E86E46F47F43375DA27297A8909
B63BBAD79D0B44AA052668307C7CF7E5722AF1647958F52B9EEDAEF47A23B198
3AFC516FB3F028AAB2FADE0823C41AC9E1561406DCD0990EDDEE2C8FEB4ED680
6B1CA37FD5163982B18206BA898490918CAAC53C01E77A8F0DEC362420027262
54FD518B17DAD2305A9844D70DA7C173D5BC316569F4F4CA848DE077416D8F8C
595E07707A1BAC8D5F4CF583761FC3F7DA2608909B7E4FE4D48DEE3AC0831524
56D1AA41DD7643D81A0AB63116A6D5868B60996E0E87A2DBD42A7B73AF23ECCD
DD6F4DFBCC8A504273FDD95DAEB4320363A1C01B4BDD1B9B310B5232FF2FF827
04671C9126BC4B037F08E0D40CF07EA3AA4A88F70E3075D88421347F78A37FAC
420C79433495767DAF1100F5B4FBCD902C53053C202E7548875C37F4EC1C41B4
0C7BBDDE96E9A9EC2763C591626923C03DBADD06488328477541354BD7462DA7
4326745D538D71CB310BB9D3EEA66B482AC5C79ECACCAA443D12492C82F8BC47
0898D16423AF8D86CB53C2DEA7E429601D0489B437CFC21D923572530E41B756
79E4E7C4115453F992D7BE21CA6934AB31C297B70D23E38905EC11852227A06B
DC84ABC8F79F6E9F2B271721AA252D0151D7DE2478A2B21CE819E5AB466B3679
D0A6ACA5A13D4D305D5A096E88FEC844DB5BAC8A551129C526E7EE3DB846839F
AE6F191ADA61A25C0272C7D4774940F09BEE432246585290E0B93D4C6BCD6917
B1439ACD831B00F9708EB1ECB3581944CF5702CD964703FC210C478AC9DB25A2
9C3EF3822E3574BD6CCAE8C2707BCB4A3CD42FDFAA90B925266C47DE3DC6B596
D3DC87AB035DEEC6CC9C377946AD908DCCB8287E17BBA4F8F47830EA7B041BE1
AD132864876086D2C2D95FA5AEEFE6ADBD43A1BBB8F0F5627D43475625FDADC4
D77E01C5B93388AD5C63D7B2E52D703DCA7A34B4B9DA3074E9593663AC861E5E
7DC03D54E179CF8F45AFF8B43FF0AC533EB8FF3DB637625521668D70D8697BF9
F2F1D127C84EABD51AA80955F86226CF381C72291EBB156673FDFD0CF7EBD86D
100A22B78964AF7A26F86BBBD7B27C047D9CAE387378FC232393D8A5F67E89BF
68F0E03334995451D8FE9BCA9702B50F20FC54EDCB33F2DE2E88C1874BE8C434
DA4358843E2F05CA31EDC30AFCF839B2EFB28DB70F3D29D2D54F997FB6FBB9B9
1CB426BB49A004C5DB73D109CA9B47C4333D013563A62BF06D200D80B4A329AD
819EE9F5DC024797242406308826728D249B741DA77D776D1C06FE2898859FDC
FC04820E2C57F585DA96CF19F4FD91EF18458D29E3D4839679354CDA6C8F671B
2D41867F212510E3700773BEE7AF65C44BA2D4EE0144CF74D866C8428FA690CD
AA7A6061B84D31D8F36D1A6FC954F67E8941A27DDD72B8E1E5FF8DF7B4ACC157
3A530FEAD29F583EEC9026BDC48917AFB3B9D2B58A91DEEB69F813B776CA3C00
6A2F6EF8428E27DB4E06B5E475A588107F6C7A6E76C422487A8E9B4D6BEB9EB9
7F55ED1602D8588AF1EA813B2EBB26D2F762787194DE48E6BACD02A7FBF89A21
824A62BE88A0800B05A6EA496DE182F8FB8CCFE606D200D34870358817D3086A
C12A968777F2FC141F01B9EB0208FFDB55F64DA03C7CE529E5ADBD9114B28E05
70768D28FCE6B2AAAB39989D42C994A5767903274040ADAAA941FCD41820F503
511BCA3509F190AE74B9E1F102B6A8DA999047EDD7D4E25ECA50FE1EA35CC0EA
95C50FF265285A743B83CCC1B4DC56DDB7B84CEFEFF3550A0DD64039C230A6A9
FE05607A6078B553AD3DF63996C18B87248FEE329B75D428C2A28D4D03193D5A
A93BC857648E7974977AD8AC96C9258C49F992C7BAD1CE52230DEDFDB8DBB249
EEE100A012CE976016D1DBCDEC75B13E1EDCE2E9D84192525D19A81E8483FB6C
2526FC59D6DBD09514E5B8248C2E77143355D0E90913DB34828FDDB40713F1B0
ABCABA71E64046CA745793AB57DFACC9D019CA56C985EF566EE0025D177D8718
8FE3515819CD774ACC72615733744220BAD2C45E5777F357E5864C1331AB9B3B
DDEFF0232674607E22800AAA25EBCB2F369E32C7E50A4654EF4843695DE7927A
B3D571C835C60C0CDED94179C657BE2B04EA467D303679A609522A90C6B7558C
75BC5DCAD93FD818D2D5B9071ACAB17D38EBA8840CFFBF6583446C384D09CD8F
CDC31ECCB945C65C7B77C7BB8D1DDD81276D73073620E7468FB9410EC6246979
079507174A02DDD17D5BDC8A21EAFBF5B3C5C0D5DB9D3C8A18A3E249980B99E4
D965E5BD0087BFA2F56206E8A3BA7836495241743313D1B1337F218F7BE9D77A
93C30BEEBFF2BCAFB8ECFC153030189804CBCE93C8E10B4DB3F5470C355ED963
315999D3F3BADA523FEF3BB8A345D4C31EDED6DD6AE54BF6F12EE77F8882A28A
5F2C6514AE1585FD14B2DB1B53552F1DBF1B7A9F840D41D6D794F656BC0F0698
CF1720BA31A6CC54A7C01C4C4A673EE67074D53EAD75FC26B7C14D2C52602220
EFCC7C12871A27BCB2A2591E97378915917F75436966E38E481AED2F426F8BC1
7939435EC889142C2DC9196A7B32A2B16680B57CE863809E26EA04C81DADA704
6D94145ED41ED74D8FC043F619151D88919872B41992DC801879DE9FFFC5AF79
9C43F169D97C8CE6A00EBD672EBA1843B8284794F9DC9B734784F791C59BB8C7
B93C0E77B32B4863BE932C567544DB1A0CDF58D10BC11731387DB9C4FFACEB87
BC773D2549D6D74DAB538C280A82265FCC846C6676F16CDF8D32DCFB75BDBD2C
CB5289A650690EC1802D41AC83BDF39427472684B93636B2DEF8AF8000A248A3
66D5E2DA8D3BF9DAA06B2DEE25D2EA1844466C7AE5F27F9F697D12D9BAFA843B
249E6544907FDFA7EDF1E76C8C14C41330942FD866CF9D1439C9F93DDF129D14
BA6436EC2FD0F641ADAB859F80616094D05338B92645C49F5B790895B71AC54A
E92C1CF20A29D45BB12EE97723CE0202E095CF5324B234B7AD11899B24774D87
9A7AFAB94C1CCC64D3753585B77F6CFD3DBEF02B9D83FF5D783A91D930D55760
25CCD21289C65405734ED86FFE50F7406524570EA793435D96625F6FB8040D9E
A34D25C94F92C71EC7B3CFA3110EF40898D7E239E8350312E62603F40B67B8FD
F7D62C6D5C57F72174928D48DD8FA1BABA8EA1605589918EAD247D0D695109B6
36B3FA1E1C15121B26D460355880DD260A831BE94AF3E9C97A96699E16C206FC
306E65BF784D6501D73FCA9ECF09491664E84B70EDA57EA927CE511D90C5D567
0781D1349A499FE560705566D32A57E5E229DAFA6A47330C6510D28F14C67A0D
8F5312B20DD102A8E3C004251BC360B365F25FF07850493D031928B5EBF72C93
2ACD4BA1BD85E62E06BBC34E1885B8E262C281604178F8ADDFD73F1131AE570F
DFB6AAFF8268ABF028FDD8ECF80C851E4D571D2CEA5F07009ED36D5B9D590155
94C697B28DE4D2CF188FB4BD474C0D42C84496E5D0B74997B788CC2A993067DB
D9729BA093C1AA307B08E6998EB9247CB559FC666649F755B02FEBDA831D9CF9
EFFE60A923A2E921D80FAE2FEE1CD10BBACA149CF0B00AFA79E4436C6564C702
2E11B13EC157DC1B5712887F0F2383A6052A3E7D63DBF1ED550524C7B0831A08
71A8F9F50B8055E3B60D1F5516DF5E60F059F014B9B916A5DF9B65BD59EB9143
365584B054A5ED943712066B3A0DFB3F10EA1B4F0CD1F449BE397720A73221F6
C261FB223E55574BC6C5F18F0B598F06A518770F2E25DB51F220ECCC244D6A6A
DA2577AB21E669469E5BA1A334F4E5098758DF77063F6ACB3FDA289F09A57296
45AA6BEF0CB24B393FF4CEDF697C67C54DC08F2AB6B57D776A6A6C0C89365FD7
697FD45E3A2D7AFC7E4D73C5A839F9BBDCA90CBC58D064D17385D1C4971FF049
91D44FF6BAE1E0064863BDA4BD3F2D4158696DDAB1F46D02E2D34624455C4430
545AC98D1132F7F0002FC039A9A6B9D15455C51AB1DDC18D8AE1C56554EB3A4B
A410B5128B4CD45604DCD6BA76C4CF6F768C8E832F0EBC12722EACF4877DF327
3727A44D8B208F19EE5A5FD9F0F87B8CA08864264A18FC785C092C289C14A28B
8FB816874323BFD2F90D521F1AF665F50ABF0D200220E90ABB57173EA237B848
30D0DF99D21F552994DADD11067197E598082949CB197F4D04681FD3FA64328F
18621FF770F5A7F5813EFAB3E19AA2C91BF140DF4587F80060FC492999C9851F
EAD678CA9F6E270DD8301E2D3C10E4BA102FE26CCF2A345EE25B9258B424DC70
49110D4E689FF13546AFFA7576BB869B03DD1A4BD475FBDCE7E1AB420FF4E07C
E99F1C814FB84358FD7C9E31B203ECC907D92967859AFA410BB95617A88D149F
E28899DF8BB59912EA6224ED1AEAC4779CA5C3564A0C6DDB6695FD7F693FCBB6
95E755BBCBABB8938C589673B0B3631F2C542E6EA1C89AE61D18AF2CB3B93889
CD7BB7C3BB8482965F084152E051C2565FF37EC92A2C1250E1566F4763EA3A94
601DFADA7053EDBD1A08B3EAFF2FD2D6199EEAC6B7C7DD4CCA57DB35809923CA
FB7216DA022E286CEA8031E3FAF86C7A071CE6A1A700673CBDC92AEB54C6C201
0CF59A5B7C40D0C57479189802F0E5FF83579502A53A216B977CB8752D205B8E
0BED7D56580058042C41909814B7EF03120F94C9DF4B699922F41EB92477EF0A
91A571E0B9F24731CCDA582FB6D33B492456BEB5A01F159DC880F61DF25A908A
B7EF0D24A97F8BE32F0B912AD31739A3FC79F000BF7646653993D744AFC11357
C411D6F805825F492F4CEF786A6D3F85E17C4604469E8C6025A44630AFBF321E
F1B09F42694DCDBF33C1654F6A39908BA58D34D531DFF786188CA63D91A6BF1F
C0D194AA8AF7803F582E287D99A1BEA472D21883161A79EF3D56947C5E5F3652
839BA3C4DD2569A44CD8E8FC70B6DEEAC1A9ED7D97445C9D3189CCDFF3A75F4F
D407763A49ACCB73D590B35EFB86D17E62666B21B6B03013AAE7A3CEF1B3AC5A
50CCFE95F92B3A6178C230FF4967059F1AA60413B72ACED9597B0216A2CD557F
A94ACC0CE33FBC172C3B639DC19E2C9852FF0434356CD01B462DFE4BD547CEA3
4C3401F46C3A6EB328A9AC9D5CE44C32AA5568851C500EA52A67A4AF217CF5B2
FA25CC4490DED0BCD3B3A24DAC30D569E30D5702AD63FE418569B1BFD030C45A
A59C3441FC5F43E7BAC3785C6B8670043F4BDC88C758E05778A0F31617BDEB85
969EEBCBB2E02B4D5B0B20040EE599FB54C958CA869B4BBBCEF744D07E51A091
34D725856E2A3D8B64F089DE3B0E721E4209FECA07BDACCC54F91F2EC2395930
1628D8C3CA9A580B910C4EC47D5D433638CB90658E85ABA6686C6ADA18A29995
146553FECF9632BB4668018A8F2678C5E196690C57CEF4B471738B9888602979
8EFAE976EB03973AE8E920B1E13191005C37A6F3A0677A4444325178C3C3312B
87A99191C90943B82D99036C114C2AF26BACDBD2561A5CE358F6DF152BBE009F
CD94A0776EB4D376997E8DD36E68A4B884753365122F2089BF2D9DBAD450656C
29983837454BAAB15B82A701C64FB6AAEBB2FA7A00CB424E21C3FB6C727352E5
368BFE000B8B89C5FB2CB1A83DE9F83CBA1FC040AF19C0F932FD2E151E1620EC
B751E376E2B50D9F4DD7684EC178ADFEDF70DCA457F85D67027A1235D02BF699
346E19B577DCE6101EC4F9B706BFF7E5155E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /a75 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE94A09D54FA74709C83B0824F96BC972F4FD728A
BEBD57EFF668607F499E1C51E9FB45286F4C13BD0AFA0A508F56824CF0EAA82F
4FE235BBA8D245C937FACAF4DFF3681FBA6D35EEBA001B55704878F22E7A2C86
476C1CCF1FDAD0E29EE5CB818640B6853A362F764E9A5DBE640CA905A9146590
3F8F2CE8881EADDBC6FA9C1505D0EACDA995DA8D00B9EB755B79D90D68B335F9
49FBCE867D0F7DE2076A879038601083B20389216CB01A808CF4069034CD1152
FF9BEFCB0DB36F87FBFFD269DDA23439D738D84DA9C96CC7435484DA8BF6FB1A
34BC1DA8F3FE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/home/fenarius/Travail/Cours/MkDocs/docs/pdf/C1/C1-act.dvi)
@start
%DVIPSBitmapFont: Fa ecbi1095 10.95 9
/Fa 9 120 df<000003FE0000003FFF800000FFFFE00003FF03F0000FF801F8001FF000
F8007FE003FC00FFC007FC01FF800FFC01FF000FFC03FF000FFC07FE000FF80FFE000FF8
0FFC000FF01FFC0007C01FFC0000003FF80000003FF80000003FF80000007FF80000007F
F00000007FF00000007FF0000000FFF0000000FFE0000000FFE0000000FFE0000000FFE0
000000FFC0000000FFC00000007FC00000307FC00000787FC00000FC7FC00001FC3FE000
03F83FE00007F01FF0001FE00FF8007FC007FC03FF0001FFFFFC00007FFFE000000FFE00
00262A77A830>99 D<0000000001FE00000000FFFE00000000FFFE00000001FFFE000000
00FFFE0000000007FE0000000007FC0000000007FC000000000FFC000000000FFC000000
000FF8000000000FF8000000001FF8000000001FF8000000001FF0000000001FF0000000
003FF0000000003FF0000000003FE0000000003FE0000000007FE0000000007FE000000F
F07FC000007FFC7FC00001FFFFFFC00007FC1FFFC0001FF00FFF80003FE007FF80007FC0
03FF8000FF8003FF8001FF0001FF0003FF0001FF0007FE0003FF0007FE0003FF000FFE00
03FE000FFC0003FE001FFC0007FE001FFC0007FE003FF80007FC003FF80007FC003FF800
0FFC007FF8000FFC007FF0000FF8007FF0000FF8007FF0001FF800FFF0001FF800FFE000
1FF000FFE0001FF000FFE0003FF000FFE0003FF0F8FFC0003FE0F8FFC0003FE0F8FFC000
7FE0F8FFC0007FE1F07FC0007FC1F07FC000FFC1F07FC001FFC3E03FC003FFC3E03FE007
FFC3E01FE00FFFC7C00FF03F1FCF8003FFFE0FFF8000FFF803FE00003FC000FC002F4077
BE35>I<00001E0000007F000000FF800001FF800001FF800001FF800001FF800001FF00
0000FE000000780000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000003F000000FFC00003FFE000
07C7F0000F87F8001F07F8001F07F8003E07F8003E0FF8007C0FF8007C0FF800FC1FF800
F81FF000F81FF000F83FF000003FE000007FE000007FE000007FC00000FFC00000FF8000
00FF800001FF800001FF000003FF000003FF000003FE000007FE0F8007FC0F8007FC0F80
0FFC1F800FF81F000FF81F000FF83E000FF03E000FF07C000FF07C000FF0F80007F1F000
03FFE00001FF8000007E0000194178BF20>105 D<0001FE00000000FFFE00000000FFFE
00000001FFFE00000000FFFE0000000007FE0000000007FC0000000007FC0000000007FC
000000000FFC000000000FF8000000000FF8000000000FF8000000001FF8000000001FF0
000000001FF0000000001FF0000000003FF0000000003FE0000000003FE0000000003FE0
000000007FE0000000007FC0003E00007FC001FF80007FC003FF8000FFC00F87C000FF80
1E0FC000FF803C3FC000FF80787FC001FF80F0FFC001FF01C0FFC001FF03C0FFC001FF07
80FFC003FF0F00FF8003FE1E00FF0003FE3C003C0003FE7800000007FEF000000007FFE0
00000007FF8000000007FF800000000FFFFC0000000FFFFF0000000FFBFFC000000FF87F
F000001FF83FF800001FF01FF800001FF00FFC00001FF007FC00003FF007FC07C03FE007
FC07C03FE007FC07C03FE007FC0FC07FE00FFC0F807FC00FF80F807FC00FF80F807FC00F
F81F00FFC007F81F00FF8007F83E00FF8003F83C00FF8003FC7C00FF0001FFF800FE0000
7FE0003C00001F80002A4079BE30>107 D<00FC0003FE0000FF000003FF001FFF8007FF
C00007FFC07FFFE01FFFF0000F8FE0FC0FF07F07F8001F0FF3F007F8F803FC001F0FF7C0
07F9F003FE003E0FFF8007FFE003FE003E0FFF0003FFC001FE007C0FFE0003FF8001FE00
7C0FFC0007FF0003FE007C0FFC0007FF0003FE00FC1FF80007FE0003FE00F81FF00007FC
0003FE00F81FF00007FC0003FE00F81FF0000FFC0007FE00003FF0000FFC0007FE00003F
E0000FF80007FC00003FE0000FF80007FC00003FE0001FF8000FFC00007FE0001FF8000F
F800007FC0001FF0000FF800007FC0001FF0001FF800007FC0003FF0001FF00000FFC000
3FF0001FF00000FF80003FE0003FF00000FF80003FE0003FE00000FF80007FE0003FE000
01FF80007FE0007FE07C01FF00007FC0007FC07C01FF00007FC0007FC07C01FF0000FFC0
00FFC0FC03FF0000FFC000FF80F803FE0000FF8000FF80F803FE0000FF8000FF01F003FE
0001FF8000FF01F007FE0001FF8000FF03E007FC0001FF0000FF07C007FC0001FF0000FF
0FC007FC0001FF00007F1F8007F80001FE00003FFE0007F00001FC00001FFC0001E00000
78000003F0004E2A78A855>109 D<0007E0007F8000000FF803FFE000003FFE0FFFF800
003E7F1F81FE00007C7FFE00FF0000F87FFC00FF8000F87FF8007F8000F87FF0007FC001
F07FE0007FC001F07FC0007FC001F0FFC0007FE003E0FFC0007FE003E0FF80007FE003E0
FF80007FE003E1FF8000FFE00001FF8000FFE00001FF0000FFE00001FF0000FFE00003FF
0001FFE00003FF0001FFC00003FE0001FFC00003FE0001FFC00007FE0003FFC00007FE00
03FF800007FC0003FF800007FC0003FF80000FFC0007FF00000FFC0007FF00000FF80007
FE00000FF8000FFE00001FF8000FFC00001FF8000FFC00001FF0001FF800001FF0001FF0
00003FF8003FE000003FF8007FC000003FFC00FF8000003FFE01FF0000007FFF07FC0000
007FFFFFF00000007FC7FFC00000007FC1FE00000000FFC00000000000FFC00000000000
FF800000000000FF800000000001FF800000000001FF800000000001FF000000000001FF
000000000003FF000000000003FF000000000003FE000000000003FE000000000007FE00
000000007FFFF000000000FFFFF800000000FFFFF0000000007FFFF000000000333B7EA8
35>112 D<01F8001FE00003FE00FFF8000FFF83FFFE000F9FC7E07F001F1FFF801F803E
1FFF007F803E1FFE00FF803E1FFC01FF807C1FF801FF807C1FF801FF807C1FF001FF80F8
3FF001FF00F83FE001FE00F83FE0007800F83FE0000000007FE0000000007FC000000000
7FC0000000007FC000000000FFC000000000FF8000000000FF8000000000FF8000000001
FF8000000001FF0000000001FF0000000001FF0000000003FF0000000003FE0000000003
FE0000000003FE0000000007FE0000000007FC0000000007FC0000000007FC000000000F
FC000000000FF8000000000FF8000000000FF8000000000FF0000000000FE00000000003
C000000000292A78A82D>114 D<003F0000780000FFC001FE0003FFE003FF0007C7F007
FF000F87F807FF001F07F807FF801F07F807FF803E07F807FF803E0FF807FF807C0FF803
FF807C0FF801FF00FC1FF800FF00F81FF0007F00F81FF0007F00F83FF0003F00003FE000
3E00003FE0003E00007FE0003E00007FC0007E0000FFC0007C0000FFC0007C0000FF8000
7C0000FF8000FC0001FF8000F80001FF0000F80001FF0000F80001FF0001F00003FF0001
F00003FE0001E00003FE0003E00003FE0003E00003FE0007C00003FE0007800003FE000F
800001FE000F000001FF001F000000FF003E000000FF807C0000007FC0F80000001FFFF0
0000000FFFC000000001FF000000292A78A830>118 D<003F0000000003C000FFC00007
800FF003FFE0001FE01FF807C7F0001FE03FF80F87F8003FE03FF81F07F8003FE03FFC1F
07F8007FE07FFC3E07F8007FE03FFC3E0FF8007FC03FFC7C0FF8007FC03FFC7C0FF800FF
C00FF8FC1FF800FFC007F8F81FF000FF8003F8F81FF000FF8003F8F83FF001FF8001F800
3FE001FF8001F0003FE001FF0001F0007FE001FF0001F0007FC003FF0003F0007FC003FF
0003E000FFC003FE0003E000FF8003FE0003E000FF8007FE0007E001FF8007FE0007C001
FF0007FC0007C001FF0007FC0007C001FF0007FC000F8003FF000FFC000F8003FE000FF8
000F8003FE000FF8001F0003FE000FF8001F0003FE000FF8001F0003FE000FF8003E0001
FE000FF8003E0001FE001FF8007C0001FF003FFC00F80000FF003FFC00F80000FF807FFE
01F000007FC0F9FF07E000001FFFF07FFFC0000007FFC01FFF00000000FF0003FC00003E
2A78A845>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb ectt1095 10.95 22
/Fb 22 121 df<1F003F807FC0FFE0FFE0FFE0FFE0FFE07FC03F801F000B0B6E8A2F>46
D<00000000E000000001F000000003F000000003F000000007F000000007E00000000FE0
0000000FC00000001FC00000001F800000003F800000003F000000007F000000007E0000
0000FE00000000FC00000000FC00000001FC00000001F800000003F800000003F0000000
07F000000007E00000000FE00000000FC00000001FC00000001F800000003F800000003F
000000003F000000007F000000007E00000000FE00000000FC00000001FC00000001F800
000003F800000003F000000007F000000007E00000000FE00000000FC00000000FC00000
001FC00000001F800000003F800000003F000000007F000000007E00000000FE00000000
FC00000001FC00000001F800000003F800000003F000000003F000000007F000000007E0
0000000FE00000000FC00000001FC00000001F800000003F800000003F000000007F0000
00007E00000000FE00000000FC00000000FC00000000F800000000780000000024477BBE
2F>I<00003F00000000007F80000000007F8000000000FFC000000000FFC000000000FF
C000000000FFC000000001F3E000000001F3E000000001F3E000000001F3E000000001F3
E000000003F3F000000003F3F000000003F3F000000003E1F000000007E1F800000007E1
F800000007E1F800000007E1F800000007C0F80000000FC0FC0000000FC0FC0000000FC0
FC0000000FC0FC0000001F807E0000001F807E0000001F807E0000001F807E0000003F80
7F0000003F003F0000003F003F0000003F003F0000003F003F0000007E001F8000007E00
1F8000007FFFFF8000007FFFFF800000FFFFFFC00000FFFFFFC00000FFFFFFC00000FFFF
FFC00000FC000FC00001F80007E00001F80007E00001F80007E00001F80007E00003F800
07F00003F00003F00003F00003F00003F00003F0007FFF003FFF807FFF003FFF80FFFF80
7FFFC0FFFF807FFFC07FFF003FFF807FFF003FFF802A397EB82F>65
D<7FFFF000007FFFF80000FFFFF80000FFFFF800007FFFF800007FFFF0000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800000001F800000001F800000001F800000001F800000001F800000001F800000001F8
00000001F800000001F800000001F800000001F800000001F800000001F800000001F800
000001F800000001F800000001F800000001F800000001F800000001F800000001F80000
0001F800000001F800000001F800000001F800000001F800001E01F800003F01F800003F
01F800003F01F800003F01F800003F01F800003F01F800003F01F800003F01F800003F7F
FFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFF7FFFFFFFFE28387DB72F>76
D<7FFE001FFF80FFFE001FFFC0FFFF003FFFC0FFFF003FFFC0FFFE001FFFC07FFE001FFF
8007E00001F80007E00001F80007E00001F80007F00003F80003F00003F00003F00003F0
0003F00003F00003F80007F00001F80007E00001F80007E00001F80007E00001FC000FE0
0000FC000FC00000FC000FC00000FC000FC00000FE001FC000007E001F8000007E001F80
00007E001F8000007E001F8000003F003F0000003F003F0000003F003F0000003F003F00
00001F807E0000001F807E0000001F807E0000001F807E0000000FC0FC0000000FC0FC00
00000FC0FC0000000FC0FC00000007C0F800000007E1F800000007E1F800000007E1F800
000003E1F000000003F3F000000003F3F000000003F3F000000001F3E000000001F3E000
000001F3E000000001F3E000000000FFC000000000FFC000000000FFC000000000FFC000
000000FFC0000000007F80000000003F0000002A397EB72F>86 D<0003FFC000000FFFF8
00003FFFFC0000FFFFFE0001FFFFFF0003FFFFFF8007FF007F800FF8007F800FF0007F80
1FE0007F801FC0003F003F80001E003F000000007F000000007E000000007E00000000FE
00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC00000000FC00
000000FC00000000FE000000007E000000007E000000007F000000007F000007803F8000
0FC03FC0000FC01FE0001FC01FF0001F800FFC007F8007FF81FF0003FFFFFF0001FFFFFE
0000FFFFFC00003FFFF000000FFFC0000003FE0000222A79A82F>99
D<000003FF8000000007FFC000000007FFC000000007FFC000000007FFC000000003FFC0
000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0
000000000FC0000000000FC0000000000FC0000000000FC0000003FC0FC000001FFF0FC0
00007FFFCFC00000FFFFEFC00001FFFFFFC00003FFFFFFC00007FE07FFC0000FF801FFC0
001FF0007FC0001FC0003FC0003F80003FC0003F80001FC0007F00001FC0007F00000FC0
007E00000FC000FE00000FC000FE00000FC000FC00000FC000FC00000FC000FC00000FC0
00FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000FE00000FC0
007E00001FC0007E00001FC0007F00001FC0003F80003FC0003F80007FC0001FC0007FC0
001FE000FFC0000FF801FFC00007FE07FFFF0007FFFFFFFF8003FFFFEFFF8001FFFFCFFF
80007FFF8FFF80001FFE07FF000007F800000029397DB72F>I<0003FE0000000FFF8000
003FFFE00000FFFFF00001FFFFF80003FFFFFC0007FE07FE000FF800FF000FF0007F001F
C0003F803FC0001F803F80001FC03F00000FC07F00000FC07E00000FC07E00000FE0FE00
0007E0FC000007E0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFF
FFC0FC00000000FE000000007E000000007E000000007F000000003F800003C03F800007
E01FC00007E01FE0000FE00FF8001FC007FE003FC007FF80FF8003FFFFFF8001FFFFFF00
007FFFFC00003FFFF800000FFFE0000001FF0000232A7BA82F>I<000001FF00000007FF
C000001FFFE000007FFFE00000FFFFF00000FFFFF00001FF0FF00003FC0FF00003F807E0
0007F001800007E000000007E000000007E000000007E000000007E000000007E0000000
07E000000007E000007FFFFFFF80FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC07FFF
FFFF800007E000000007E000000007E000000007E000000007E000000007E000000007E0
00000007E000000007E000000007E000000007E000000007E000000007E000000007E000
000007E000000007E000000007E000000007E000000007E000000007E000000007E00000
0007E000000007E000000007E000000007E000000007E000000007E000003FFFFFFC007F
FFFFFE007FFFFFFE007FFFFFFE007FFFFFFE003FFFFFFC0024397DB82F>I<7FF0000000
00FFF800000000FFF800000000FFF800000000FFF8000000007FF80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80FF0000001F83FFC000001F8FFFE00
0001FBFFFF000001FFFFFF800001FFFFFF800001FFF03FC00001FFC01FC00001FF800FE0
0001FF000FE00001FE0007E00001FC0007E00001FC0007E00001FC0007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E0007FFFE07FFF80FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFF
C07FFFE07FFF802A387EB72F>104 D<0003800000000FE00000000FE00000001FF00000
001FF00000001FF00000000FE00000000FE0000000038000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000003FFF
E000007FFFF000007FFFF000007FFFF000007FFFF000003FFFF000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000003F000000003F000000003F0000000
03F000000003F000000003F000000003F000007FFFFFFF00FFFFFFFF00FFFFFFFF80FFFF
FFFF80FFFFFFFF007FFFFFFF00213979B82F>I<7FF000000000FFF800000000FFF80000
0000FFF800000000FFF8000000007FF80000000000F80000000000F80000000000F80000
000000F80000000000F80000000000F80000000000F80000000000F80000000000F80000
000000F80000000000F80000000000F807FFFF0000F80FFFFF0000F80FFFFF8000F80FFF
FF8000F80FFFFF0000F807FFFF0000F8003F800000F8007F000000F800FE000000F801FC
000000F803F8000000F807F0000000F80FE0000000F81FC0000000F83F80000000F87F00
000000F8FF00000000F9FF80000000FBFF80000000FFFFC0000000FFE7E0000000FFC7F0
000000FF83F0000000FF01F8000000FE00FC000000FC00FE000000F8007E000000F8003F
000000F8001F800000F8001F800000F8000FC00000F80007E00000F80007F0007FFFF03F
FFC0FFFFF87FFFC0FFFFF87FFFE0FFFFF87FFFE0FFFFF87FFFC07FFFF03FFFC02B387EB7
2F>107 D<7FFFF000007FFFF80000FFFFF80000FFFFF800007FFFF800007FFFF8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800000001F800000001F800000001F800000001F800000001F800000001F800000001F8
00000001F800000001F800000001F800000001F800000001F800000001F800000001F800
000001F800000001F800000001F800000001F800000001F800000001F800000001F80000
0001F800000001F800000001F800000001F800000001F800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800007FFFFFFFE07FFFFFFFE0FFFFFFFFF0FFFFFFFFF07FFFFFFFE07FFFFFFFE024387B
B72F>I<0001F801F8007F8FFC0FFC00FFDFFE1FFE00FFFFFF3FFF00FFFFFFFFFF80FFFF
FFFFFF807FFE1FFE1F8007FC0FFC0FC007F80FF80FC007F007F007C007E007E007C007E0
07E007C007E007E007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C0
07C007C007C007C007C007C007C007C007C007C007C007C007C007C07FFC3FFC3FFCFFFE
3FFE3FFEFFFE7FFE7FFEFFFE7FFE7FFEFFFE3FFE3FFE7FFC3FFC3FFC2F2880A72F>I<00
000FF000007FF03FFC0000FFF8FFFE0000FFFBFFFF0000FFFFFFFF8000FFFFFFFF80007F
FFF03FC00001FFC01FC00001FF800FE00001FF000FE00001FE0007E00001FC0007E00001
FC0007E00001FC0007E00001F80007E00001F80007E00001F80007E00001F80007E00001
F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001
F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001
F80007E00001F80007E00001F80007E00001F80007E0007FFFE07FFF80FFFFF0FFFFC0FF
FFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A287EA72F>I<0003FC000000
1FFF8000003FFFC00000FFFFF00001FFFFF80003FFFFFC0007FE07FE000FF801FF000FE0
007F001FC0003F801F80001F803F80001FC03F00000FC07F00000FE07E000007E07E0000
07E0FC000003F0FC000003F0FC000003F0FC000003F0FC000003F0FC000003F0FC000003
F0FC000003F0FC000003F0FE000007F07E000007E07E000007E07F00000FE07F00000FE0
3F80001FC03F80001FC01FC0003F801FE0007F800FF801FF0007FE07FE0003FFFFFC0001
FFFFF80000FFFFF000007FFFE000001FFF80000003FC0000242A7BA82F>I<00000FF000
007FF03FFC0000FFF8FFFF0000FFFBFFFFC000FFFFFFFFE000FFFFFFFFF0007FFFF03FF0
0001FFC00FF80001FF8003FC0001FF0001FC0001FE0000FE0001FC0000FE0001FC00007F
0001F800003F0001F800003F0001F800003F8001F800001F8001F800001F8001F800001F
8001F800001F8001F800001F8001F800001F8001F800001F8001F800001F8001F800003F
8001F800003F8001FC00003F0001FC00007F0001FC00007F0001FE0000FE0001FE0000FE
0001FF0001FC0001FF8007FC0001FFC00FF80001FFF03FF00001FFFFFFE00001FFFFFFC0
0001FBFFFF800001F9FFFF000001F87FFC000001F81FE0000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F8000000007FFFE00000
00FFFFF0000000FFFFF0000000FFFFF0000000FFFFF00000007FFFE0000000293C7EA72F
>I<0000000FF0007FFF007FFE007FFF81FFFF00FFFF87FFFF00FFFF8FFFFF807FFF9FFF
FF807FFFBFF87F80001FFFC07F80001FFF003F00001FFE001E00001FFC000000001FF800
0000001FF0000000001FF0000000001FE0000000001FC0000000001FC0000000001FC000
0000001FC0000000001F80000000001F80000000001F80000000001F80000000001F8000
0000001F80000000001F80000000001F80000000001F80000000001F80000000001F8000
0000001F80000000001F80000000001F80000000001F800000007FFFFFF800007FFFFFFC
0000FFFFFFFC0000FFFFFFFC00007FFFFFFC00007FFFFFF8000029287EA72F>114
D<7FF001FFC000FFF803FFE000FFF803FFE000FFF803FFE000FFF803FFE0007FF801FFE0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F8000FE00001F8000FE0
0001F8001FE00001F8003FE00001FC007FE00000FF01FFFF8000FFFFFFFFC0007FFFFFFF
C0007FFFFFFFC0003FFFE7FFC0000FFF83FF800003FE0000002A287EA62F>117
D<7FFF003FFF80FFFF807FFFC0FFFF807FFFC0FFFF807FFFC0FFFF807FFFC07FFF003FFF
8001F00003E00001F00003E00001F80007E00000F80007C00000F80007C00000FC000FC0
00007C000F8000007C000F8000007C000F8000003E001F0000003E001F0000003E001F00
00001F003E0000001F003E0000001F003E0000000F807C0000000F807C0000000F807C00
000007C0F800000007C0F800000007C0F800000003E1F000000003E1F000000003E1F000
000001F3E000000001F3E000000001F3E000000000FFC000000000FFC000000000FFC000
0000007F80000000007F80000000003F0000002A277EA62F>I<7FFF801FFFE07FFFC03F
FFE0FFFFC03FFFF0FFFFC03FFFF07FFFC03FFFE07FFF801FFFE007C000003E0007C00000
3E0007C000003E0007E000007E0003E000007C0003E000007C0003E000007C0003E00000
7C0003E000007C0001F00000F80001F00F80F80001F01FC0F80001F03FE0F80001F03FE0
F80001F03FE0F80000F87FF0F00000F87DF1F00000F87DF1F00000F8FDF1F00000F8FDF9
F00000F8F9F9F0000078F8F9E0000079F8F9E000007DF8F9E000007DF8F9E000007DF079
E000007DF07BE000003FF07FC000003FE07FC000003FE03FC000003FE03FC000003FC01F
C000001F800F80002C277FA62F>I<3FFF80FFFE007FFFC1FFFF007FFFC1FFFF007FFFC1
FFFF007FFFC1FFFF003FFF80FFFE00007E001F0000003F003F0000003F007E0000001F80
FC0000000FC0FC00000007C1F800000007E3F000000003F3E000000001FFE000000000FF
C000000000FF80000000007F00000000003F00000000003F00000000007F0000000000FF
8000000000FFC000000001F3E000000003E3F000000007E1F000000007C0F80000000F80
FC0000001F807E0000003F003E0000003E001F0000007E001F800000FC000FC0007FFF80
7FFF807FFFC0FFFF80FFFFC0FFFFC0FFFFC0FFFFC07FFFC0FFFF807FFF807FFF802A277E
A62F>I E
%EndDVIPSBitmapFont
/Fc 240[45 15[{}1 90.9091 /CMSY10 rf /Fd 190[114 65[{
 fa5free3 ReEncodeFont }1 90.9091 /FontAwesome5Free-Solid
rf /Fe 125[114 87[102 42[{ fa5free1 ReEncodeFont }2 90.9091
/FontAwesome5Free-Solid rf
%DVIPSBitmapFont: Ff ecsx1095 10.95 7
/Ff 7 234 df<00003E000000007F00000000FF00000003FF0000000FFF000000FFFF00
003FFFFF00007FFFFF0000FFFFFF0000FFFFFF00007FFFFF00003F87FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007
FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF
00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00
000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00001FFFFFFFC03F
FFFFFFE07FFFFFFFE07FFFFFFFE03FFFFFFFE01FFFFFFFC0233D79BC32>49
D<000003FFE0000000000007FFF000000000000FFFF800000000000FFFF800000000001F
FFFC00000000001FFFFC00000000001FFFFC00000000003FFFFE00000000003FFFFE0000
0000003FFFFE00000000007FFFFF00000000007FEFFF00000000007FE7FF0000000000FF
E7FF8000000000FFC7FF8000000001FFC7FFC000000001FFC3FFC000000001FF83FFC000
000003FF83FFE000000003FF81FFE000000003FF01FFE000000007FF01FFF000000007FF
00FFF000000007FE00FFF00000000FFE00FFF80000000FFE007FF80000000FFC007FF800
00001FFC007FFC0000001FFC003FFC0000001FF8003FFC0000003FF8003FFE0000003FF8
001FFE0000007FF0001FFF0000007FF0001FFF0000007FF0000FFF000000FFE0000FFF80
0000FFE0000FFF800000FFE00007FF800001FFC00007FFC00001FFC00003FFC00001FFC0
0003FFC00003FFFFFFFFFFE00003FFFFFFFFFFE00003FFFFFFFFFFE00007FFFFFFFFFFF0
0007FFFFFFFFFFF00007FFFFFFFFFFF0000FFFFFFFFFFFF8000FFE0000007FF8001FFC00
00007FFC001FFC0000007FFC001FFC0000003FFC003FF80000003FFE003FF80000003FFE
003FF80000001FFE007FF00000001FFF007FF00000001FFF007FF00000000FFF00FFE000
00000FFF80FFE000000007FF80FFE000000007FF80FFC000000003FF80FF8000000001FF
80393F7CBE42>65 D<0000FFF800000FFFFF00003FFFFFC000FFFFFFF001FFFFFFFC03FF
FFFFFC07FFC01FFC0FFF0003FC1FFE0000F81FFC0000783FF80000383FF80000187FF000
00007FF00000007FF00000007FF0000000FFE0000000FFE0000000FFE0000000FFE00000
00FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000
FFE0000000FFE0000000FFE00000007FF00000007FF00000007FF00000003FF80000183F
F80000383FFC0000781FFE0001F80FFF0003FC0FFFC03FFC07FFFFFFFC01FFFFFFFC00FF
FFFFF0003FFFFFC0000FFFFE000000FFF000262D7DAB2D>99 D<3FE07FF0FFF0FFF0FFF0
FFF0FFF0FFF0FFF0FFF0FFF07FE000000000000000000000000000000000000000000000
00001FE03FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF0
7FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF0
7FF07FF07FF07FF07FF03FF01FE00C427BC118>105 D<00FF000001FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF80003F
FFFFF07FFFFFF8FFFFFFF8FFFFFFF8FFFFFFF87FFFFFF003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FFC00C03FFC01C01
FFE0FE01FFFFFE01FFFFFE00FFFFFE007FFFF0003FFFC0000FF8001F377EB524>116
D<7F8000007F00FFC00001FF80FFC00001FF807FE00003FF007FE00003FF007FF00003FF
003FF00007FE003FF00007FE003FF80007FE001FF8000FFC001FF8000FFC001FFC000FFC
000FFC001FF8000FFC001FF8000FFE001FF80007FE003FF00007FE003FF00007FF003FF0
0003FF007FE00003FF007FE00003FF807FE00001FF80FFC00001FF80FFC00001FFC0FFC0
0000FFC1FF800000FFC1FF800000FFE1FF8000007FE3FF0000007FE3FF0000007FF3FF00
00003FF7FE0000003FF7FE0000003FFFFE0000001FFFFC0000001FFFFC0000001FFFFC00
00000FFFF80000000FFFF80000000FFFF800000007FFF000000007FFF000000001FFC000
00292A7EA92E>118 D<00003FF80000007FF8000000FFF0000001FFE0000001FF800000
03FF00000007FE0000000FFC0000001FF00000003FE00000003FC00000007F80000000FE
00000000FC00000000000000000000000000000000000000000000000001FFC000000FFF
F800003FFFFE0000FFFFFF0001FFFFFF8003FFFFFFC007FFC0FFE00FFE003FF01FFC001F
F01FF8000FF83FF0000FF83FF00007FC7FF00007FC7FE00007FC7FE00007FC7FE00003FE
FFE00003FEFFE00003FEFFC00003FEFFC00003FEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFF
FFFFFFFEFFFFFFFFFEFFFFFFFFFCFFE0000000FFE0000000FFE00000007FE00000007FE0
0000007FE00000003FF00000003FF000000C3FF800001C1FF800003C0FFC0000FC0FFF00
03FE07FFE01FFE03FFFFFFFE01FFFFFFFE007FFFFFF8003FFFFFE00007FFFF000000FFF0
00273F7DBD2E>233 D E
%EndDVIPSBitmapFont
/Fg 142[69 113[{}1 90.9091 /Dingbats rf
%DVIPSBitmapFont: Fh ecti1095 10.95 26
/Fh 26 122 df<00000000FF8001C00000000FFFE001C00000003FFFF80380000000FF80
7C0780000003FC001E0F8000000FF0000F1F8000003FC000079F0000007F000003FF0000
00FE000001FF000001FC000001FF000003F8000000FE000007F0000000FE00000FE00000
00FE00001FC00000007E00003F800000007C00007F800000007C0000FF000000007C0000
FE000000007C0001FE00000000780003FC00000000780003F800000000780007F8000000
00780007F80000000070000FF00000000070000FF00000000070001FE00000000070001F
E00000000000003FE00000000000003FC00000000000003FC00000000000007FC0000000
0000007F800000000000007F800000000000007F80000000000000FF80000000000000FF
00000000000000FF00000000000000FF00000000000000FF00000000000000FF00000000
000000FE00000000000000FE000000000F0000FE000000000F0000FE000000000E0000FE
000000000E0000FE000000001E0000FE000000001C0000FE000000003C0000FE00000000
380000FE000000007800007F000000007000007F00000000F000007F00000001E000003F
00000001C000003F80000003C000001F800000078000001FC000000F0000000FE000001E
00000007E000003C00000007F00000F800000003FC0001E000000000FE0007C000000000
7FC03F00000000001FFFFE000000000007FFF0000000000000FF80000000003A4272BF41
>67 D<00000000FF8000E000000007FFF000E00000003FFFFC01C0000000FF803E03C000
0003FC000F07C000000FF000078FC000001FC00003CF8000007F800001DF800000FE0000
00FF800001FC000000FF800003F80000007F000007F00000007F00000FE00000007F0000
1FC00000003F00003F800000003E00007F800000003E0000FF000000003E0000FE000000
003E0001FE000000003C0003FC000000003C0003FC000000003C0007F8000000003C0007
F80000000038000FF00000000038000FF00000000038001FE00000000038001FE0000000
0000003FE00000000000003FC00000000000003FC00000000000007FC00000000000007F
800000000000007F800000000000007F80000000000000FF80000000000000FF00000000
000000FF00000000000000FF00000000000000FF000000FFFFFE00FF000000FFFFFE00FE
000000FFFFFE00FE000000007F8000FE000000007F8000FE000000007F0000FE00000000
7F0000FE00000000FF0000FE00000000FF0000FE00000000FE0000FE00000000FE0000FF
00000001FE00007F00000001FE00007F00000001FC00007F00000001FC00003F80000003
FC00003F80000003FC00001FC0000003F800001FC0000007F800000FE000000FF8000007
F000001FF8000003F800003DF0000001FC0000F9F0000000FF0003F0F00000007FE01FC0
700000001FFFFF006000000007FFFC0000000000007FC0000000003B4273BF46>71
D<0001FFFFFE0001FFFFFE0001FFFFFC000003FE00000003FC00000003F800000003F800
000003F800000007F800000007F000000007F000000007F00000000FF00000000FE00000
000FE00000000FE00000001FE00000001FC00000001FC00000001FC00000003FC0000000
3F800000003F800000003F800000007F800000007F000000007F000000007F00000000FF
00000000FE00000000FE00000000FE00000001FE00000001FC00000001FC00000001FC00
000003FC00000003F800000003F800000003F800000007F800000007F000000007F00000
0007F00000000FF00000000FE00000000FE00000000FE00000001FE00000001FC0000000
1FC00000001FC00000003FC00000003F800000003F800000007F800000007F800000007F
00000000FF800000FFFFFF0000FFFFFF0000FFFFFF0000273E7BBD23>73
D<0001FFFFFF00000001FFFFFF00000001FFFFFF0000000003FE000000000003FC000000
000003F8000000000003F8000000000003F8000000000007F8000000000007F000000000
0007F0000000000007F000000000000FF000000000000FE000000000000FE00000000000
0FE000000000001FE000000000001FC000000000001FC000000000001FC000000000003F
C000000000003F8000000000003F8000000000003F8000000000007F8000000000007F00
00000000007F0000000000007F000000000000FF000000000000FE000000000000FE0000
00000000FE000000000001FE000000000001FC000000000001FC000000000001FC000000
000003FC000000000003F8000000000003F8000000C00003F8000001E00007F8000001C0
0007F0000001C00007F0000003C00007F000000380000FF000000380000FE00000078000
0FE000000700000FE000000F00001FE000000F00001FC000001E00001FC000001E00001F
C000003E00003FC000007C00003F800000FC00003F800001FC00007F800003F800007F80
0007F800007F00001FF80000FF0000FFF000FFFFFFFFFFF000FFFFFFFFFFF000FFFFFFFF
FFE000333E7BBD39>76 D<1FFFFFC001FFFFC01FFFFFC001FFFFC01FFFFFC001FFFFC000
3FE000000FF800003FC0000007E000003F80000007C000003F800000038000007F800000
078000007F800000078000007F000000070000007F00000007000000FF0000000F000000
FF0000000E000000FE0000000E000000FE0000000E000001FE0000001E000001FE000000
1C000001FC0000001C000001FC0000001C000003FC0000003C000003FC00000038000003
F800000038000003F800000038000007F800000078000007F800000070000007F0000000
70000007F00000007000000FF0000000F000000FF0000000E000000FE0000000E000000F
E0000000E000001FE0000001E000001FE0000001C000001FC0000001C000001FC0000001
C000003FC0000003C000003FC0000003C000003F800000038000003F800000038000007F
800000078000007F800000078000007F000000070000007F000000070000007F0000000F
0000007F0000000E000000FE0000000E000000FE0000001E000000FE0000001C000000FE
0000003C0000007E000000380000007E000000780000007E000000F00000007E000000E0
0000007E000001E00000003F000003C00000003F000007800000001F80000F000000001F
80003E000000000FC0007C0000000007E001F00000000003F80FE00000000000FFFF8000
000000003FFE0000000000000FF000000000003A406FBD43>85 D<00007E00000001FF80
000007C1C380001F80EFC0003F00FFC0007E007FC000FC007F8001F8003F8003F0003F80
03F0003F8007E0003F000FE0003F000FC0003F001FC0007F001FC0007E003F80007E003F
80007E003F8000FE007F8000FC007F0000FC007F0000FC007F0001FC00FF0001F800FE00
01F800FE0001F800FE0003F800FE0003F038FC0003F038FC0003F038FC0007F038FC0007
E078FC000FE0707C000FE0707C001FE0F07E003FE0E03E007FE0E03E00F3E1E01F01E3E1
C00F8781E38003FF00FF0000FC003E00252977A72E>97 D<001FC0000FFFC0000FFF8000
0FFF8000003F8000003F8000003F0000003F0000007F0000007F0000007E0000007E0000
00FE000000FE000000FC000000FC000001FC000001FC000001F8000001F8000003F80000
03F8000003F0000003F07C0007F1FF0007F787C007EE03E007FC01F00FF801F00FF001F8
0FF000F80FE000F81FC000F81FC000FC1F8000FC1F8001FC3F8001FC3F8001FC3F0001FC
3F0001FC7F0003FC7F0003F87E0003F87E0003F87E0007F8FE0007F0FC0007F0FC0007F0
FC000FE0FC000FE0FC000FE0F8001FC0F8001F80F8003F80F8003F00F8007E0078007E00
7C00FC007C01F8003C03F0001E07E0000F0F800007FE000001F800001E4076BE29>I<00
001FC00000FFF00003F07C000FC01E001F000E003E000F007C001F00FC007F01F8007F03
F0007F07F0007E07E0007E0FE000381FC000001FC000003F8000003F8000003F8000007F
8000007F0000007F0000007F000000FF000000FE000000FE000000FE000000FE000000FE
000000FC000000FC000006FC00000E7E00001E7E00003C7E0000783E0000F03F0001E01F
0007C00F800F0007C07E0001FFF000007F8000202977A729>I<000000003F800000001F
FF800000001FFF000000001FFF00000000007F00000000007F00000000007E0000000000
7E0000000000FE0000000000FE0000000000FC0000000000FC0000000001FC0000000001
FC0000000001F80000000001F80000000003F80000000003F80000000003F00000000003
F00000000007F00000000007F00000000007E00000007E07E0000001FF8FE0000007C1CF
E000001F80EFC000003F00FFC000007E007FC00000FC007FC00001F8003F800003F0003F
800003F0003F800007E0003F80000FE0003F00000FC0003F00001FC0007F00001FC0007F
00003F80007E00003F80007E00003F8000FE00007F8000FE00007F0000FC00007F0000FC
00007F0001FC0000FF0001FC0000FE0001F80000FE0001F80000FE0003F80000FE0003F8
3800FC0003F03800FC0003F03800FC0007F03800FC0007F07800FC000FE070007C000FE0
70007C001FE0F0007E003FE0E0003E007FE0E0003E00F3E1E0001F01E3E1C0000F8781E3
800003FF00FF000000FC003E0000294077BE2E>I<00003F000001FFE00007C0F0001F00
78007E007800FC003C01F8003C03F0003C07F0003C0FE0007C0FC000781FC000783F8000
F83F8001F07F8007E07F001FC07F01FF007FFFF800FFFF8000FE000000FE000000FE0000
00FE000000FC000000FC000000FC000000FC000000FC000000FC000000FC00000CFC0000
1CFC00003C7C0000787C0000F07E0001E03E0003C01F000F800F001E000780FC0003FFE0
0000FF00001E2976A729>I<000000007C0000000001FF0000000007C7800000000F83C0
0000001F83C00000001F0FC00000003F1FC00000003F1FC00000007E1FC00000007E1F80
0000007E0F000000007E0000000000FC0000000000FC0000000000FC0000000000FC0000
000001FC0000000001F80000000001F80000000001F80000000001F80000000003F80000
000003F00000000003F00000000003F000000003FFFFF8000003FFFFF8000003FFFFF800
000007E00000000007E00000000007E0000000000FE0000000000FC0000000000FC00000
00000FC0000000000FC0000000000FC0000000001FC0000000001F80000000001F800000
00001F80000000001F80000000003F80000000003F00000000003F00000000003F000000
00003F00000000007F00000000007E00000000007E00000000007E00000000007E000000
0000FE0000000000FC0000000000FC0000000000FC0000000000FC0000000001FC000000
0001F80000000001F80000000001F80000000001F80000000003F00000000003F0000000
0003F00000000003F00000000007E00000000007E00000000007E00000000007E0000000
000FC0000000000FC00000001C0FC00000007E0F80000000FE0F80000000FE1F00000000
FE1F00000000FC1E00000000F83C00000000F03C000000007878000000003FE000000000
0F80000000002A5383BF1C>I<000003E00000001FF80000003E1E380000F80EFC0001F0
07FC0003E007FC0007E003FC000FC003F8001F8003F8003F8003F8003F0003F8007F0003
F0007E0003F000FE0007F000FE0007F001FC0007E001FC0007E001FC000FE003FC000FE0
03F8000FC003F8000FC003F8001FC007F8001FC007F0001F8007F0001F8007F0003F8007
F0003F8007E0003F0007E0003F0007E0007F0007E0007F0003E000FE0003E001FE0003F0
01FE0001F003FE0001F007FC0000F80EFC00007C3DFC00001FF1FC000007C1F800000001
F800000003F800000003F800000003F000000003F000000007F000000007F000000007E0
0000000FE0003C000FC0007E000FC000FE001F8000FE003F0000FE007E0000FC00FC0000
F001F800007C03E000003FFF80000007FE000000263B7CA729>I<0001FC000000FFFC00
0000FFF8000000FFF800000003F800000003F800000003F000000003F000000007F00000
0007F000000007E000000007E00000000FE00000000FE00000000FC00000000FC0000000
1FC00000001FC00000001F800000001F800000003F800000003F800000003F000000003F
03F800007F0FFE00007F3E0F80007E780FC0007EE007C000FFC007E000FF8007E000FF00
07E000FF0007E001FE0007E001FC0007E001FC0007E001F80007E003F8000FE003F8000F
C003F0000FC003F0000FC007F0001FC007F0001F8007E0001F8007E0001F800FE0003F80
0FE0003F000FC0003F000FC0007F001FC0007E001FC000FE071F8000FC071F8000FC073F
8001FC0F3F8001F80E3F0001F80E3F0001F81E7F0001F01C7F0001F01C7E0001F0387E00
01F038FE0001F070FE0000F0E0FC00007FC03800001F0028407ABE2E>I<0000700001FC
0001FC0001FC0001F80001F80000E0000000000000000000000000000000000000000000
000000000000000000000000000000000000007C0001FF00038F800707800E07C01E07C0
1C07C03C0FC0380FC0380FC0781FC0701F80701F80F03F80F03F00003F00007F00007E00
00FE0000FC0000FC0001FC0001F80001F80003F80003F00003F03807F03807E0380FE078
0FC0700FC0700FC0F00F80E00F80E00F81C00F83C00F838007870003FE0000F800163D79
BB1C>I<0001FC000000FFFC000000FFF8000000FFF800000003F800000003F800000003
F000000003F000000007F000000007F000000007E000000007E00000000FE00000000FE0
0000000FC00000000FC00000001FC00000001FC00000001F800000001F800000003F8000
00003F800000003F000000003F0007C0007F001FF0007F007838007E00E078007E01C1FC
00FE0381FC00FE0703F800FC0E03F800FC0C03F801FC1C00E001FC38000001F870000001
F8E0000003F9C0000003FB80000003F700000003FE00000007FC00000007FFC0000007EF
F0000007E1FC00000FE0FE00000FE07F00000FC03F00000FC01F80001FC01F80001FC01F
80E01F801F80E01F801F80E03F801F81E03F803F81C03F003F01C03F003F01C07F003F03
C07F003F03807E001F07807E001F0700FE001F0F00FE000F1E00FC0007FC00380001F000
26407ABE29>107 D<0007F003FFF003FFE003FFE0000FE0000FE0000FC0000FC0001FC0
001FC0001F80001F80003F80003F80003F00003F00007F00007F00007E00007E0000FE00
00FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F000
07F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F8000
3F80003F00003F00007F00007F07007E07007E0700FE0F00FE0E00FC0E00FC0E00FC1E00
FC1C00FC1C007C38007C78003C70001FE000078000144079BE17>I<01F0003F80007F00
0007FC01FFE003FFC0000F3E07C1F80F83F0000E1F0F00FC1E01F8001E1F1C007C3800F8
001C1F38007E7000FC003C1FF0007EE000FC00381FF0007FE000FC00381FE0007FC000FC
00783FC0007F8000FC00703FC0007F8000FC00703F80007F0000FC00703F00007E0000FC
00F03F0000FE0001FC00F07F0000FC0001F800007E0000FC0001F800007E0000FC0001F8
00007E0001FC0003F80000FE0001FC0003F00000FC0001F80003F00000FC0001F80003F0
0000FC0003F80007F00001FC0003F80007E00001F80003F00007E00001F80003F0000FE0
0001F80007F0000FC00003F80007F0001FC0E003F00007E0001F80E003F00007E0001F80
E003F0000FE0003F81E007F0000FE0003F01C007E0000FC0003F01C007E0000FC0003F01
C007E0001FC0003E03800FE0001FC0003E03800FC0001F80003E07000FC0001F80003E07
000FC0003F80003E0E001FC0003F80001E1C001F80003F00000FF8000700000E000003E0
00432979A74A>I<01F0003F800007FC01FFE0000F3E07C1F8000E1F0F00FC001E1F1C00
7C001C1F38007E003C1FF0007E00381FF0007E00381FE0007E00783FC0007E00703FC000
7E00703F80007E00703F00007E00F03F0000FE00F07F0000FC00007E0000FC00007E0000
FC00007E0001FC0000FE0001F80000FC0001F80000FC0001F80000FC0003F80001FC0003
F00001F80003F00001F80007F00001F80007E00003F8000FE07003F0000FC07003F0000F
C07003F0001FC0F007F0001F80E007E0001F80E007E0001F81E007E0001F01C00FE0001F
01C00FC0001F03800FC0001F03800FC0001F07001FC0000F0E001F800007FC0007000001
F0002C2979A733>I<00001FC0000000FFF8000003F07C00000FC01F00001F801F00003F
000F80007E000FC000FC0007C001F80007E003F00007E007F00007E007E00007E00FE000
07F01FC00007F01FC00007F03F800007F03F800007F03F80000FE07F80000FE07F00000F
E07F00000FE07F00001FE0FF00001FC0FE00001FC0FE00001FC0FE00003F80FE00003F80
FE00007F00FE00007F00FC00007E007C0000FC007E0001FC007E0001F8007E0003F0003E
0007E0001F000FC0001F001F80000F803E000007C0FC000001FFF00000003F8000002429
77A72E>I<0003E001F800000FF807FE00001E7C1E0F80001C3E3C07C0003C3E7807C000
383EE003E000783FE003E000703FC003F000703F8001F000F07F0001F000E07F0001F800
E07E0001F800E07E0003F801E0FE0003F801E0FE0003F80000FC0003F80000FC0003F800
01FC0007F80001FC0007F00001F80007F00001F80007F00003F8000FF00003F8000FE000
03F0000FE00003F0000FE00007F0001FC00007F0001FC00007E0001F800007E0003F8000
0FE0003F00000FE0007F00000FE0007E00000FE000FC00001FE000FC00001FE001F80000
1FF003F000001FF007E000003FB80F8000003F9C1F0000003F0FFC0000003F03E0000000
7F00000000007F00000000007E00000000007E0000000000FE0000000000FE0000000000
FC0000000000FC0000000001FC0000000001FC0000000001F80000000001F80000000003
F80000000003F8000000007FFFE0000000FFFFE0000000FFFFE00000002D3A80A72E>I<
01F000FE0007FC03FF800F3E0F03E00E1F1C01E01E1F3807E01C1F7007F03C1FF00FE038
1FE00FE0381FC00FE0783FC00380703F800000703F800000703F000000F03F000000F07F
000000007E000000007E000000007E00000000FE00000000FC00000000FC00000000FC00
000001FC00000001F800000001F800000001F800000003F800000003F000000003F00000
0003F000000007F000000007E000000007E000000007E00000000FE00000000FC0000000
0FC00000000FC00000001FC00000001F800000000700000000242979A726>114
D<00007F800001FFE00007C0F8001E003C003C001C003C001E0078000E00F0003E00F000
7E00F0007E01F0007C01F0007C01F0001001F8000001FC000001FF800001FFF80000FFFF
0000FFFF80007FFFC0001FFFE00007FFE000007FF000000FF0000003F0000003F0000001
F03E0001F07E0000F07F0001F0FE0001E0FE0001E0FC0001E0F80003C0F0000780700007
8078000F003C003C001F00F80007FFE00000FF00001F297AA725>I<0001C0000003F000
0007F0000007F0000007E0000007E000000FE000000FE000000FC000000FC000001FC000
001FC000001F8000001F8000003F8000003F8000003F0000003F00007FFFFF80FFFFFF80
FFFFFF00007E000000FE000000FE000000FC000000FC000001FC000001FC000001F80000
01F8000003F8000003F8000003F0000003F0000007F0000007F0000007E0000007E00000
0FE000000FE000000FC000000FC000001FC000001FC01C001F801C001F801C003F803C00
3F8038003F0078003F0070003F00F0003F00E0003F01C0001F03C0001F0780000F0F0000
07FC000001F00000193A78B81E>I<007C0000000001FF00003800038F8000FC00070780
00FC000E07C000FC001E07C001FC001C07C001FC003C0FC001F800380FC001F800380FC0
03F800781FC003F800701F8003F000701F8003F000F03F8007F000F03F0007F000003F00
07E000007F0007E000007E000FE000007E000FE00000FE000FC00000FC000FC00000FC00
1FC00001FC001FC00001F8001F800001F8001F800001F8003F800003F8003F838003F000
3F038003F0003F038003F0007F038003F0007F078003F0007E070003F0007E070003F000
FE0F0003F000FE0E0001F001FE0E0001F803BE1C0000F8073E1C00007C1E1E3800003FF8
0FF0000007E003E000292979A730>I<007C00038001FF0007E0038F800FE00707800FE0
0E07C00FF01E07C00FF01C07C007F03C0FC007F0380FC003F0380FC003E0781FC001E070
1F8001E0701F8001E0F03F8001E0F03F0001C0003F0001C0007F0001C0007E0003C0007E
00038000FE00038000FC00038000FC00078001FC00070001F800070001F800070001F800
0E0003F8000E0003F0000E0003F0001C0003F0001C0003F000380003F000380003F00070
0003F000700001F000E00001F001C00001F803C00000F8078000007E0F0000001FFC0000
0007F00000242979A729>I<007C00000001FF000038038F8000FC07078000FC0E07C000
FC1E07C001FC1C07C001F83C0FC001F8380FC001F8380FC003F8781FC003F0701F8003F0
701F8003F0F03F8007F0F03F0007E0003F0007E0007F0007E0007E000FE0007E000FC000
FE000FC000FC000FC000FC001FC001FC001FC001F8001F8001F8001F8001F8003F8003F8
003F0003F0003F0003F0003F0003F0007F0003F0007E0003F0007E0003F0007E0003F000
FE0003F000FC0001F001FC0001F803FC0000F807FC00007C1FF800003FF9F8000007E1F8
00000003F800000003F000000003F000000007F000000007E0001F0007E0003F800FC000
3F800FC0003F801F80007F001F00007E003E000038007E00003800FC00003801F000001C
03E000001E0FC0000007FF00000001F8000000263B79A72C>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi ecbx0800 8 1
/Fi 1 102 df<000FFC00007FFF8001FFFFE007FC0FF00FF003F81FE001FC1FE000FC3F
C000FE7FC0007E7F80007E7F80007FFF80007FFF80007FFFFFFFFFFFFFFFFFFFFFFFFFFF
800000FF800000FF8000007F8000007FC000007FC000003FC0000F1FE0000F0FF0001F07
F8007E03FE01FC01FFFFF8007FFFE00007FF00201E7E9D25>101
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj ecbx1095 10.95 14
/Fj 14 117 df<00000F000000001F000000007F00000001FF0000000FFF000001FFFF00
00FFFFFF0000FFFFFF0000FFF7FF0000FE07FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007
FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF
00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00
000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00003F
FFFFFFF83FFFFFFFF83FFFFFFFF83FFFFFFFF8253C79BB34>49 D<0007FF800000003FFF
F0000001FFFFFC000003FC03FF000007E000FFC0000FF8007FE0001FF8003FF0001FFC00
3FF0001FFC001FF8001FFC001FF8001FFC000FFC001FFC000FFC000FF8000FFC0007F000
0FFC0001C0000FFC000000000FFC000000000FFC000000000FFC00000003FFFC000001FF
FFFC00000FFFFFFC00007FFF8FFC0001FFF00FFC0007FF800FFC000FFF000FFC001FFC00
0FFC003FF8000FFC007FF8000FFC007FF0000FFC00FFF0000FFC00FFE0000FFC00FFE000
0FFC00FFE0000FFC00FFE0001FFC00FFE0001FFC00FFF0003FFC007FF0003FFC007FF800
7FFF003FFC01F7FFFC1FFE07E3FFFC07FFFF81FFFC01FFFE007FFC001FF80000002E2B7D
A932>97 D<00007FF0000003FFFF00001FFFFFC0007FE01FE000FF8003F001FF000FF803
FE000FFC07FE001FFC0FFC001FFC1FFC001FFC1FF8001FFC3FF8001FFC3FF8000FF87FF8
0007F07FF00001C07FF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF000
0000FFF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF00000007FF00000
007FF00000007FF80000007FF80000003FF800001E3FFC00001E1FFC00003E0FFC00003C
0FFE00007C07FF0000F803FF8001F000FFC003E0007FF00FC0001FFFFF000007FFFC0000
007FE000272B7DA92E>99 D<0000000007F80000000007FFF80000000007FFF800000000
07FFF80000000007FFF800000000003FF800000000001FF800000000001FF80000000000
1FF800000000001FF800000000001FF800000000001FF800000000001FF800000000001F
F800000000001FF800000000001FF800000000001FF800000000001FF800000000001FF8
00000000001FF800000000001FF800000000001FF80000007FE01FF8000003FFFC1FF800
001FFFFF1FF800007FF00FDFF80000FFC003FFF80003FF0000FFF80007FE00007FF8000F
FE00003FF8000FFC00001FF8001FFC00001FF8003FF800001FF8003FF800001FF8007FF8
00001FF8007FF000001FF8007FF000001FF8007FF000001FF800FFF000001FF800FFF000
001FF800FFF000001FF800FFF000001FF800FFF000001FF800FFF000001FF800FFF00000
1FF800FFF000001FF800FFF000001FF800FFF000001FF8007FF000001FF8007FF000001F
F8007FF000001FF8007FF800001FF8003FF800001FF8003FF800001FF8001FF800001FF8
001FFC00003FF8000FFC00007FF80007FE0000FFF80003FF0001FFFC0001FF8007FFFFE0
007FE01F9FFFE0001FFFFE1FFFE00007FFF81FFFE000007FC01FE00033407DBE3A>I<00
00FFE0000007FFFC00003FFFFF00007FE0FF8001FF803FC003FF001FE007FE000FF00FFC
000FF80FFC0007FC1FF80007FC3FF80003FE3FF80003FE3FF80003FE7FF00003FE7FF000
03FF7FF00003FFFFF00001FFFFF00001FFFFF00001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF0000000FFF0000000FFF0000000FFF0000000FFF00000007FF00000007FF0000000
7FF00000003FF80000003FF800000F1FF800000F1FFC00001F0FFC00001E07FE00003E03
FE00007C01FF0000F800FFC003F0007FF01FE0001FFFFFC00007FFFE0000007FF000282B
7DA92F>I<000007FC0000007FFF000001FFFFC00007FE1FE0001FF83FE0003FF07FF000
7FE07FF0007FE07FF000FFC07FF000FFC07FF001FF807FF001FF803FE001FF800F8001FF
80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80
000001FF80000001FF80000001FF800000FFFFFFE000FFFFFFE000FFFFFFE000FFFFFFE0
0001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF800000
01FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001
FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF
80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80
000001FF80000001FF80000001FF8000007FFFFF80007FFFFF80007FFFFF80007FFFFF80
0024407DBF20>I<0003FF8003F0003FFFF81FFC00FFFFFE7FFE03FF01FFFCFE07FC007F
E1FE0FFC007FE0FE1FF8003FF0FE3FF8003FF87C3FF0001FF8003FF0001FF8007FF0001F
FC007FF0001FFC007FF0001FFC007FF0001FFC007FF0001FFC007FF0001FFC007FF0001F
FC003FF0001FF8003FF0001FF8003FF8003FF8001FF8003FF0000FFC007FE00007FC007F
C00007FF01FF800007FFFFFE00000F3FFFF800000F03FF8000001E00000000001E000000
00001F00000000001F00000000001F00000000001F80000000001FC0000000001FFFFFFF
00000FFFFFFFF0000FFFFFFFFC0007FFFFFFFF0007FFFFFFFF8003FFFFFFFFC003FFFFFF
FFE00FFFFFFFFFE01FC00001FFF03F8000001FF07F0000000FF87F00000007F8FE000000
07F8FE00000003F8FE00000003F8FE00000003F8FE00000003F8FF00000007F87F000000
07F07F8000000FF03FC000001FE01FE000003FC00FF80000FF8003FF800FFE0000FFFFFF
F800001FFFFFC0000001FFFC00002F3D7DA834>I<01F80003FC0007FE000FFF001FFF80
1FFF801FFF801FFF801FFF801FFF800FFF0007FE0003FC0001F800000000000000000000
00000000000000000000000000000000000000FF00FFFF00FFFF00FFFF00FFFF0007FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF00FFFFF8FFFFF8FFFFF8FFFFF815407C
BF1D>105 D<00FF00FFFF00FFFF00FFFF00FFFF0007FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00
03FF00FFFFFCFFFFFCFFFFFCFFFFFC163F7CBE1D>108 D<01FE003FF00001FF8000FFFE
00FFFE0007FFF000FFFE03FFFF801FFFFC00FFFE0FC0FFC07E07FE00FFFE1E007FE0F003
FF0007FE3C003FF1E001FF8003FE78003FF3C001FF8003FEF0003FF78001FF8003FFE000
1FFF0000FFC003FFC0001FFE0000FFC003FFC0001FFE0000FFC003FF80001FFC0000FFC0
03FF80001FFC0000FFC003FF80001FFC0000FFC003FF00001FF80000FFC003FF00001FF8
0000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF
00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000
FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF0000
1FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC0
03FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF8
0000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC0FFFF
FC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03F
FFFF50297CA857>I<01FE003FF00000FFFE00FFFE0000FFFE03FFFF8000FFFE0FC0FFC0
00FFFE1E007FE00007FE3C003FF00003FE78003FF00003FEF0003FF00003FFE0001FF800
03FFC0001FF80003FFC0001FF80003FF80001FF80003FF80001FF80003FF80001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF
00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00
001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF0000
1FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001F
F80003FF00001FF80003FF00001FF800FFFFFC07FFFFE0FFFFFC07FFFFE0FFFFFC07FFFF
E0FFFFFC07FFFFE033297CA83A>I<00007FF000000003FFFE0000001FFFFFC000007FE0
3FF00000FF800FF80001FF0007FC0003FE0003FE0007FC0001FF000FF80000FF801FF800
00FFC01FF80000FFC03FF80000FFE03FF000007FE07FF000007FF07FF000007FF07FF000
007FF07FF000007FF0FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000
007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF87FF000
007FF07FF000007FF07FF000007FF07FF000007FF03FF80000FFE03FF80000FFE01FF800
00FFC00FF80000FF800FFC0001FF8007FE0003FF0003FF0007FE0001FF800FFC00007FE0
3FF000001FFFFFC0000007FFFF000000007FF000002D2B7DA934>I<01FE01FC00FFFE07
FF80FFFE0FFFE0FFFE3F1FF0FFFE3C1FF007FE783FF803FEF03FF803FEE03FF803FFE03F
F803FFC03FF803FFC01FF003FF800FE003FF80038003FF80000003FF80000003FF000000
03FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003
FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF
00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF000000FFFFFF
0000FFFFFF0000FFFFFF0000FFFFFF000025297DA82B>114 D<00078000000780000007
80000007800000078000000F8000000F8000000F8000000F8000001F8000001F8000001F
8000003F8000007F8000007F800000FF800001FF800007FF80001FFFFFFCFFFFFFFCFFFF
FFFCFFFFFFFC01FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF
800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF
800001FF800001FF800001FF800001FF801E01FF801E01FF801E01FF801E01FF801E01FF
801E01FF801E01FF801E01FF801E00FF803C00FFC03C00FFC03C007FE078003FF0F0001F
FFE00007FFC00000FF001F3B7EB928>116 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk ecrm1095 10.95 57
/Fk 57 245 df<FFFFFFFFFFF0FFFFFFFFFFF02C0280982D>21 D<000003FF000FE00000
1FFFC07FF80000FE00F1F81C0001F8003BE07E0007E0007FC0FF000FC001FFC0FF001F80
01FF80FF003F0001FF00FF007F0001FF00FF007E0001FF007E00FE0000FE000000FC0000
7E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E
000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E00
0000FC00007E000000FC00007E000000FC00007E0000FFFFFFFFFFFF80FFFFFFFFFFFF80
FFFFFFFFFFFF8000FC00007E000000FC00007E000000FC00007E000000FC00007E000000
FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC
00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00
007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC0000
7E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E
000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E00
0000FC00007E000000FC00007E000001FE0000FF00007FFFF83FFFFF007FFFF83FFFFF00
7FFFF83FFFFF0038407FBF35>27 D<000003FE000000001FFFC0000000FE01E0000001F8
0078000007E0001C00000FC0007C00001F8000FE00003F0001FE00007F0001FE00007E00
01FE0000FE0001FE0000FC0000FC0000FC0000780000FC0000000000FC0000000000FC00
00000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC00
00000000FC0000000000FC0000000000FC00007E00FFFFFFFFFE00FFFFFFFFFE00FFFFFF
FFFE0000FC0001FE0000FC0000FE0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0001FE0000FF007FFFF83FFFFC7FFFF83FFFFC7FFFF8
3FFFFC2E407FBF32>I<000003FE0001FF000000001FFF800FFFE0000000FE01E07F00F0
000001F80078FC003C000007E0001BF0000E00000FC0007FE0003E00001F8001FFC0007F
00003F0001FF8000FF00007F0001FF8000FF00007E0001FF0000FF0000FE0001FF0000FF
0000FC0001FE00007E0000FC00007E00003C0000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E00003F00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF
00FFFFFFFFFFFFFFFF0000FC00007E0000FF0000FC00007E00007F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0001FE0000FF00007F807FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFF
FE7FFFF83FFFFC1FFFFE47407FBF4B>30 D<3E001F007F003F807F003F80FF807FC07F00
3F807F003F807F003F807F003F807F003F807F003F807F003F807F003F807F003F807E00
1F803E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E00
1F001C000E001C000E001C000E001C000E001C000E001C000E001C000E001C000E001C00
0E00180006001A2177BF2D>34 D<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000C0
00C000C000C001C00180018003800300070006000E000C001C003800700060000A1B78BE
19>39 D<0000300000700000E00001C0000380000700000F00001E00003C00003C000078
0000F00000F00001E00001E00003C00003C00007C0000780000F80000F80000F00001F00
001F00001E00003E00003E00003E00003C00007C00007C00007C00007C00007C00007C00
00780000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F800007800007C00007C00007C00007C00
007C00007C00003C00003E00003E00003E00001E00001F00001F00000F00000F80000F80
0007800007C00003C00003C00001E00001E00000F00000F000007800003C00003C00001E
00000F000007000003800001C00000E0000070000030145A77C323>I<C00000E0000070
00003800001C00000E00000F000007800003C00003C00001E00000F00000F00000780000
7800003C00003C00003E00001E00001F00001F00000F00000F80000F800007800007C000
07C00007C00003C00003E00003E00003E00003E00003E00003E00001E00001F00001F000
01F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F000
01F00001F00001F00001F00001E00003E00003E00003E00003E00003E00003E00003C000
07C00007C00007C0000780000F80000F80000F00001F00001F00001E00003E00003C0000
3C0000780000780000F00000F00001E00003C00003C0000780000F00000E00001C000038
0000700000E00000C00000145A7BC323>I<1C007F00FF80FF80FFC0FFC0FFC07FC01CC0
00C000C000C000C000C001C00180018003800300070006000E000C001C00380070006000
0A1B788819>44 D<FFFFFEFFFFFEFFFFFEFFFFFEFFFFFE17057F951E>I<1C007F00FF80
FF80FF80FF80FF807F001C000909788819>I<0000C0000003C0000007C000001FC00000
7FC00007FFC000FFFFC000FF9FC000F81FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00000
1FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000007FF000FF
FFFFF8FFFFFFF8FFFFFFF81D3D78BC2D>49 D<0007FC0000003FFF800000FFFFE00001F0
0FF800078003FC000F0001FE000E0000FF001C00007F803800003FC03000003FC0700000
1FE06000001FE06000001FE0FE00000FF0FF00000FF0FF80000FF0FF80000FF0FF80000F
F0FF80000FF0FF80000FF07F00000FF01C00000FF00000000FE00000001FE00000001FE0
0000001FC00000003FC00000003F800000007F800000007F00000000FE00000001FC0000
0001FC00000003F800000007F00000000FE00000000FC00000001F800000003E00000000
7C00000000F800000001F000000003E000000003C000000007800000000F000030001E00
0030003C000030007800003000F000006001E000006003C0000060078000006007000000
E00FFFFFFFE01FFFFFFFE03FFFFFFFE07FFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0
243D7CBC2D>I<1C007F00FF80FF80FF80FF80FF807F001C000000000000000000000000
000000000000000000000000000000000000000000000000000000000000001C007F00FF
80FF80FF80FF80FF807F001C00092778A619>58 D<FFFFFFFFFFFFFFE0FFFFFFFFFFFFFF
E00000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000FFFFFFFFFFFFFFE0FFFFFFFFFFFFFF
E03B147BA046>61 D<000000070000000000000007000000000000000700000000000000
0F800000000000000F800000000000001FC00000000000001FC00000000000001FC00000
000000003FE00000000000003FE00000000000003FE00000000000007FF0000000000000
6FF00000000000006FF0000000000000CFF8000000000000C7F8000000000000C7F80000
0000000187FC00000000000183FC00000000000183FC00000000000301FE000000000003
01FE00000000000301FE00000000000600FF00000000000600FF00000000000E00FF8000
0000000C007F80000000000C007F80000000001C007FC00000000018003FC00000000018
003FC00000000030003FE00000000030001FE00000000030001FE00000000060001FF000
00000060000FF00000000060000FF000000000C00007F800000000C00007F800000000C0
0007F800000001800003FC00000001FFFFFFFC00000003FFFFFFFE00000003FFFFFFFE00
000003000001FE00000007000001FF00000006000000FF00000006000000FF0000000C00
0000FF8000000C0000007F8000000C0000007F800000180000007FC00000180000003FC0
0000180000003FC00000300000001FE00000300000001FE00000700000001FE000007000
00000FF00000F00000000FF00001F00000000FF80003F80000000FF8000FFE0000003FFE
00FFFFC00007FFFFF8FFFFC00007FFFFF8FFFFC00007FFFFF83D417DC044>65
D<0000003FF0000C00000003FFFE001C0000001FFFFF801C0000007FE00FC03C000000FF
0001F07C000003FC0000787C000007F000003CFC00001FE000000FFC00003FC0000007FC
00007F80000003FC0000FF00000003FC0001FE00000001FC0001FC00000000FC0003FC00
000000FC0007F8000000007C0007F8000000007C000FF0000000003C000FF0000000003C
001FE0000000001C001FE0000000001C003FE0000000001C003FC0000000001C003FC000
0000000C007FC0000000000C007FC0000000000C007FC0000000000C007F800000000000
00FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF8000
0000000000FF80000000000000FF80000000000000FF80000000000000FF800000000000
00FF80000000000000FF80000000000000FF8000001FFFFFF07F8000001FFFFFF07FC000
001FFFFFF07FC00000000FFE007FC000000003FC003FC000000003FC003FC000000003FC
003FE000000003FC001FE000000003FC001FE000000003FC000FF000000003FC000FF000
000003FC0007F800000003FC0007F800000003FC0003FC00000003FC0001FE00000003FC
0001FE00000003FC0000FF00000003FC00007F80000007FC00003FC0000007FC00001FE0
00000FFC000007F800001CFC000003FC0000387C000000FF0000F03C0000007FF007E01C
0000001FFFFF800C00000003FFFE0000000000003FF00000003C427BBF47>71
D<FFFFFFF00000FFFFFFF00000FFFFFFF0000000FFE0000000007F80000000007F800000
00007F80000000007F80000000007F80000000007F80000000007F80000000007F800000
00007F80000000007F80000000007F80000000007F80000000007F80000000007F800000
00007F80000000007F80000000007F80000000007F80000000007F80000000007F800000
00007F80000000007F80000000007F80000000007F80000000007F80000000007F800000
00007F80000000007F80000000007F80000000007F80000000007F80000000007F800000
00007F80000000007F80000000007F80000003007F80000003007F80000003007F800000
03007F80000003007F80000007007F80000006007F80000006007F80000006007F800000
06007F8000000E007F8000000E007F8000000E007F8000001E007F8000001E007F800000
3E007F8000007E007F800000FE007F800001FC007F800007FC00FFC0003FFCFFFFFFFFFF
FCFFFFFFFFFFFCFFFFFFFFFFFC303E7DBD38>76 D<FFFF8000007FFFF8FFFFC000007FFF
F8FFFFE000007FFFF8007FE0000003FF00007FF0000000FC00006FF80000007800006FFC
00000030000067FC00000030000063FE00000030000063FF00000030000061FF00000030
000060FF800000300000607FC00000300000607FC00000300000603FE00000300000601F
F00000300000601FF00000300000600FF800003000006007FC00003000006007FC000030
00006003FE00003000006001FF00003000006001FF00003000006000FF80003000006000
7FC00030000060007FE00030000060003FE00030000060001FF00030000060001FF80030
000060000FF800300000600007FC00300000600007FE00300000600003FE003000006000
01FF00300000600000FF80300000600000FF803000006000007FC03000006000003FE030
00006000003FE03000006000001FF03000006000000FF83000006000000FF83000006000
0007FC30000060000003FE30000060000003FE30000060000001FF30000060000000FFB0
000060000000FFF00000600000007FF00000600000003FF00000600000003FF000006000
00001FF00000600000000FF000006000000007F000006000000007F000006000000003F0
0000F000000001F00001F800000001F00007FE00000000F000FFFFF00000007000FFFFF0
0000007000FFFFF000000030003D3E7DBD44>78 D<000000FFE0000000000007FFFC0000
0000003FC07F8000000000FE000FE000000001F80003F000000007E00000FC0000000FC0
00007E0000001F8000003F0000003F0000001F8000007E0000000FC00000FE0000000FE0
0001FC00000007F00003F800000003F80003F800000003F80007F000000001FC0007F000
000001FC000FE000000000FE001FE000000000FF001FE000000000FF001FC0000000007F
003FC0000000007F803FC0000000007F803FC0000000007F807FC0000000007FC07F8000
0000003FC07F80000000003FC07F80000000003FC0FF80000000003FE0FF80000000003F
E0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF8000
0000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003F
E0FF80000000003FE07F80000000003FC07FC0000000007FC07FC0000000007FC07FC000
0000007FC07FC0000000007FC03FC0000000007F803FE000000000FF801FE000000000FF
001FE000000000FF001FE000000000FF000FF000000001FE000FF000000001FE0007F800
000003FC0003F800000003F80003FC00000007F80001FC00000007F00000FE0000000FE0
00007F0000001FC000003F8000003F8000001F8000003F0000000FE00000FE00000007F0
0001FC00000001F80003F000000000FE000FE0000000003FC07F800000000007FFFC0000
00000000FFE00000003B427BBF46>I<FFFFFFFFF00000FFFFFFFFFF0000FFFFFFFFFFC0
0000FFC0003FF000007F800007F800007F800001FE00007F800000FF00007F8000007F00
007F8000007F80007F8000003FC0007F8000003FC0007F8000001FE0007F8000001FE000
7F8000001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F
8000001FF0007F8000001FF0007F8000001FF0007F8000001FE0007F8000001FE0007F80
00003FC0007F8000003FC0007F8000007F80007F8000007F00007F800000FE00007F8000
03FC00007F800007F800007F80003FE000007FFFFFFF8000007FFFFFFC0000007F800000
0000007F8000000000007F8000000000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F800000000000FFC000000000FFFFFF
C0000000FFFFFFC0000000FFFFFFC0000000343E7DBD3D>I<0007FC0018003FFF803800
FFFFE03801FC03F87803F0007C7807C0001EF80F80000FF81F000007F83F000003F83E00
0001F87E000000F87E000000F87C00000078FC00000078FC00000078FC00000038FC0000
0038FC00000038FE00000018FE00000018FF00000018FF000000187F800000007FC00000
007FE00000003FF80000003FFF0000001FFFF000000FFFFF00000FFFFFF00007FFFFFC00
01FFFFFE0000FFFFFF80003FFFFFC00007FFFFE000007FFFE0000007FFF00000007FF800
00001FF80000000FFC00000007FC00000003FC00000001FE00000001FEC0000000FEC000
0000FEC0000000FEC00000007EC00000007EE00000007EE00000007EE00000007EE00000
007CF00000007CF0000000FCF8000000F8FC000001F8FE000001F0FF000003F0FF800007
E0FBE0000FC0F1F8001F80F07F007F00E01FFFFC00E007FFF000C0007FC00027427BBF32
>83 D<3FFFFFFFFFFFFF003FFFFFFFFFFFFF003FFFFFFFFFFFFF003FE000FFC001FF003F
00007F80003F007E00007F80001F807C00007F80000F807800007F800007807000007F80
0003807000007F800003807000007F800003806000007F800001806000007F8000018060
00007F800001806000007F800001806000007F80000180C000007F800000C0C000007F80
0000C0C000007F800000C0C000007F800000C0C000007F800000C00000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F80000000000000FFC000000000
0001FFE00000000007FFFFFFF800000007FFFFFFF800000007FFFFFFF800003A3E7DBD41
>I<FFFFFFC0007FFFF8FFFFFFC0007FFFF8FFFFFFC0007FFFF800FFC0000003FF00007F
80000000FC00007F800000007800007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000003F800000007000003FC00000006000003FC00000006000003F
C0000000E000001FC0000000C000001FE0000001C000000FE0000001C000000FF0000003
80000007F000000700000003F800000F00000001FC00000E00000000FE00003C00000000
7F000078000000003FC001F0000000000FF00FE00000000003FFFF800000000000FFFE00
00000000001FF00000003D407DBD44>I<FFFFFE000003FFFEFFFFFE000003FFFEFFFFFE
000003FFFE03FFC00000007FE001FF800000001F8000FF000000001F0000FF800000000E
00007F800000000C00007F800000000C00007FC00000001C00003FC00000001800003FE0
0000001800001FE00000003000001FE00000003000001FF00000007000000FF000000060
00000FF000000060000007F8000000C0000007F8000000C0000007FC000000C0000003FC
00000180000003FC00000180000003FE00000380000001FE00000300000001FF00000300
000000FF00000600000000FF00000600000000FF80000E000000007F80000C000000007F
80000C000000003FC00018000000003FC00018000000003FE00018000000001FE0003000
0000001FE00030000000001FF00070000000000FF00060000000000FF800600000000007
F800C00000000007F800C00000000007FC01C00000000003FC01800000000003FC018000
00000001FE03000000000001FE03000000000001FF03000000000000FF06000000000000
FF06000000000000FF8E0000000000007F8C0000000000007FCC0000000000003FD80000
000000003FD80000000000003FF80000000000001FF00000000000001FF0000000000000
0FE00000000000000FE00000000000000FE000000000000007C000000000000007C00000
0000000007C0000000000000038000000000000003800000003F407EBD44>I<FFFFFE00
3FFFFF8001FFFFFFFFFE003FFFFF8001FFFFFFFFFE003FFFFF8001FFFF07FFC00001FFF0
00003FF803FF0000007FC000000FE001FF0000007FC0000007C001FF0000003FC0000003
8000FF0000003FC00000030000FF0000003FC00000030000FF8000001FE000000700007F
8000001FE000000600007F8000001FE000000600007FC000003FF000000600003FC00000
3FF000000C00003FC000003FF000000C00003FE000007FF800000C00001FE0000067F800
001800001FE0000067F800001800001FE00000E7FC00001800000FF00000C3FC00003000
000FF00000C3FC00003000000FF00001C3FE000030000007F8000181FE000060000007F8
000181FE000060000007F8000181FF000060000003FC000300FF0000C0000003FC000300
FF0000C0000003FC000300FF0000C0000001FE0006007F800180000001FE0006007F8001
80000001FE0006007F800180000001FF000C003FC00380000000FF000C003FC003000000
00FF000C003FC00300000000FF8018001FE007000000007F8018001FE006000000007F80
18001FE006000000007FC030000FF006000000003FC030000FF00C000000003FC030000F
F00C000000003FE070000FF80C000000001FE0600007F818000000001FE0600007F81800
0000001FE0E00007FC18000000000FF0C00003FC30000000000FF0C00003FC3000000000
0FF1C00003FE300000000007F9800001FE600000000007F9800001FE600000000007F980
0001FF600000000003FF000000FFC00000000003FF000000FFC00000000003FF000000FF
C00000000001FE0000007F800000000001FE0000007F800000000001FE0000007F800000
000001FC0000003F800000000000FC0000003F000000000000FC0000003F000000000000
F80000001F000000000000780000001E000000000000780000001E000000000000700000
000E000000000000300000000C00000058407EBD5D>I<001FF0000000FFFC000003E03F
00000F000FC0001C0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC
003FC0007E001F80007E000F00007E000000007E000000007E000000007E000000007E00
00001FFE000003FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E001F
C0007E003F80007E007F80007E007F00007E007F00007E03FE00007E03FE00007E03FE00
007E03FE0000FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E
1F8E0FF03C0FFC03FFF007F8003FC003E0282A7CA82D>97 D<01F800000000FFF8000000
00FFF800000000FFF80000000007F80000000003F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F807F8000001F81FFF000001F8780FC0
0001F9E003F00001FB8001F80001FF0000FC0001FE00007E0001FC00003F0001FC00001F
8001F800001F8001F800001FC001F800000FC001F800000FE001F800000FE001F8000007
E001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007
F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007E001F800000F
E001F800000FE001F800000FE001F800000FC001F800001FC001F800001F8001FC00003F
0001FE00003F0001F600007E0001F70000FC0001E38001F80001C1C003E00001C0F81F80
0001803FFE0000000007F000002C407EBE32>I<0001FF0000000FFFE000003F00F80000
7C001E0001F800070003F0001F0007E0003F800FC0007F800FC0007F801F80007F801F80
007F803F00003F003F00001E007F000000007F000000007E00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE000000007F000000007F000000007F000000003F000000C03F800000C0
1F800001C01FC00001800FC000038007E000070003F000060001F8001E0000FC00380000
3F01F000000FFFC0000001FE0000222A7DA828>I<00000001F800000000FFF800000000
FFF800000000FFF80000000007F80000000003F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F8000000FF01F8000007FFC1F800001F80F1F800007C00
39F80001F8001DF80003F0000FF80007E00007F8000FC00003F8000FC00003F8001F8000
01F8003F800001F8003F000001F8007F000001F8007F000001F8007F000001F8007E0000
01F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE0000
01F800FE000001F800FE000001F800FE000001F800FE000001F8007E000001F8007F0000
01F8007F000001F8003F000001F8003F800001F8001F800003F8001F800003F8000FC000
07F80007E0000FF80003F0000DFC0001F8003DFE0000FC0071FFF0003F01E1FFF0000FFF
81FFF00001FE01F8002C407DBE32>I<0003FC0000001FFF8000007E07E00000F801F000
01F000F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F
00000F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFF
FFFFC0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
00007E000000007F000000007F000000007F000000003F000000C03F800000C01F800001
C00FC00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F01F000
000FFFC0000001FE0000222A7DA828>I<00001FC00000FFF00003F0380007C0FC000F81
FE001F81FE003F01FE003E01FE007E01FE007E00FC00FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC0000FFFFFF00FFFFFF00FFFFFF0000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000001FE00007FFFFE007FFFFE007FFFFE001F407FBF1C>I<000000007E000003
FC01FF00000FFF078780003E07CE0F8000FC03FC0F8001F801F80F8003F000FC070003E0
007C000007E0007E000007E0007E00000FC0003F00000FC0003F00000FC0003F00000FC0
003F00000FC0003F00000FC0003F00000FC0003F00000FC0003F000007E0007E000007E0
007E000003E0007C000003F000FC000001F801F8000001FC03F0000001BE07C00000038F
FF0000000303FC0000000700000000000700000000000700000000000700000000000780
0000000007800000000007C00000000003E00000000003FFFFF0000001FFFFFE000001FF
FFFF8000007FFFFFE00001FFFFFFF80007C0001FF8001F800003FC003F000000FE003E00
00007E007C0000003E007C0000003F00F80000001F00F80000001F00F80000001F00F800
00001F00F80000001F00FC0000003F007C0000003E007E0000007E003F000000FC001F80
0001F8000FC00003F00003F0000FC00000FE007F0000003FFFFC00000003FFC00000293D
7EA82D>I<01F800000000FFF800000000FFF800000000FFF80000000007F80000000003
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F803FC000001F80FFF800001F83C0FC00001F8F003E00001F9C003F00001FB8001F80001
FB0001F80001FF0000FC0001FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0003
FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFFF07FFFF82D3F7EBE32>I<01C00007F000
0FF8000FF8000FF8000FF8000FF80007F00001C000000000000000000000000000000000
00000000000000000000000000000000000000000001F8007FF8007FF8007FF80007F800
03F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80003FC00FFFFE0FFFFE0FFFFE0133D7E
BC19>I<0000700001FC0003FE0003FE0003FE0003FE0003FE0001FC0000700000000000
000000000000000000000000000000000000000000000000000000000000000000FE003F
FE003FFE003FFE0001FE0000FE00007E00007E00007E00007E00007E00007E00007E0000
7E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E0000
7E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E0000
7E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E3C007E7E00
7CFF00FCFF00FCFF00F8FF01F8FE01F07803E03E07C00FFF0001FC00175084BC1C>I<01
F800FFF800FFF800FFF80007F80003F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80003FC00FF
FFF0FFFFF0FFFFF0143F7EBE19>108 D<01F803FC0001FE0000FFF80FFF8007FFC000FF
F83C0FC01E07E000FFF8F003E07801F00007F9C003F0E001F80003FB8001F9C000FC0001
FB0001F98000FC0001FF0000FF80007E0001FE0000FF00007E0001FE0000FF00007E0001
FC0000FE00007E0001FC0000FE00007E0001F80000FC00007E0001F80000FC00007E0001
F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001
F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001
F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001
F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001
F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001
F80000FC00007E0001F80000FC00007E0003FC0001FE0000FF00FFFFF07FFFF83FFFFCFF
FFF07FFFF83FFFFCFFFFF07FFFF83FFFFC46287EA74B>I<01F803FC0000FFF80FFF8000
FFF83C0FC000FFF8F003E00007F9C003F00003FB8001F80001FB0001F80001FF0000FC00
01FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC00
01F80000FC0001F80000FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF07FFFF8
FFFFF07FFFF8FFFFF07FFFF82D287EA732>I<0001FE0000000FFFC000003F03F000007C
00F80001F0003E0003E0001F0007C0000F8007C0000F800F800007C01F800007E01F0000
03E03F000003F03F000003F07E000001F87E000001F87E000001F87E000001F8FE000001
FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FC
FE000001FC7E000001F87E000001F87E000001F87F000003F83F000003F03F000003F01F
800007E00F800007C00FC0000FC007C0000F8003E0001F0001F0003E0000FC00FC00003F
03F000000FFFC0000001FE0000262A7DA82D>I<01F807F80000FFF81FFF0000FFF8780F
C000FFF9E003F00003FB8001F80001FF0000FC0001FE00007E0001FC00007F0001FC0000
3F8001F800001F8001F800001FC001F800001FC001F800000FE001F800000FE001F80000
0FE001F800000FF001F8000007F001F8000007F001F8000007F001F8000007F001F80000
07F001F8000007F001F8000007F001F8000007F001F8000007F001F800000FE001F80000
0FE001F800000FE001F800000FE001F800001FC001F800001FC001F800003F8001FC0000
3F0001FE00007F0001FE0000FE0001FF0001FC0001FB8003F80001F9C007E00001F8F81F
800001F83FFE000001F807F0000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000003FC00000000FFFFF0000000FFFFF000
0000FFFFF00000002C3A7EA732>I<0000FF000C000007FFC01C00001F80F01C00007E00
381C0000FC001C3C0003F8000E3C0007F000077C0007E000037C000FC00003FC001FC000
01FC003F800001FC003F800000FC007F000000FC007F000000FC007F000000FC007F0000
00FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE0000
00FC00FE000000FC00FE000000FC00FE000000FC00FF000000FC007F000000FC007F0000
00FC007F000000FC003F800000FC003F800001FC001FC00001FC000FC00003FC000FE000
03FC0007E00007FC0003F0000EFC0001F8001CFC00007E0078FC00003F01E0FC00000FFF
C0FC000001FE00FC0000000000FC0000000000FC0000000000FC0000000000FC00000000
00FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC00000000
00FC0000000000FC0000000000FC0000000001FE000000007FFFF80000007FFFF8000000
7FFFF82D3A7DA730>I<03F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183FC03F383FC01F7
03FC01F603FC01F601F801FE006001FC000001FC000001FC000001FC000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000003FC0000FFFFF800FFFFF800FFFFF8001E287EA723>I<007FC0
6003FFF8E007C03DE01E000FE03C0003E0780001E0780001E0700000E0F00000E0F00000
60F0000060F8000060F8000060FC000060FF0000007FC000007FFE00003FFFE0001FFFFC
0007FFFE0003FFFF80007FFFC00007FFE000003FE000000FF0C00003F0C00001F8C00000
F8E00000F8E0000078E0000078F0000078F0000078F8000078F80000F0FC0000F0FC0001
E0FE0001C0F7800780F1E01F00E0FFFC00C01FE0001D2A7DA824>I<0018000000180000
001800000018000000180000001800000038000000380000003800000038000000780000
0078000000F8000000F8000001F8000003F8000007F800001FFFFFC0FFFFFFC0FFFFFFC0
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8006001F8006001F8006001F8006001F8006001F8006001F80060
01F8006001F8006000FC00E000FC00C000FC00C0007E01C0003F0380001F87000007FE00
0001F8001B397EB723>I<01F80000FC00FFF8007FFC00FFF8007FFC00FFF8007FFC0007
F80003FC0003F80001FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001
F80000FC0001F80001FC0001F80001FC0001F80001FC0001F80003FC0000F80003FC0000
FC0007FC0000FC000EFE00007C001CFF00003E0038FFF8001F80F0FFF80007FFE0FFF800
00FF00FC002D297EA732>I<FFFFC007FFE0FFFFC007FFE0FFFFC007FFE007FC0001FF00
03F800007C0003F80000780001F80000700001FC0000700000FC0000600000FC00006000
007E0000C000007E0000C000007F0001C000003F00018000003F00018000001F80030000
001F80030000001FC0070000000FC0060000000FC00600000007E00C00000007E00C0000
0007F01C00000003F01800000003F01800000001F83000000001F83000000001FC700000
0000FC6000000000FC60000000007EC0000000007EC0000000007FC0000000003F800000
00003F80000000001F00000000001F00000000001F00000000000E00000000000E000000
2B287EA630>I<FFFF87FFFC03FFF0FFFF87FFFC03FFF0FFFF87FFFC03FFF00FFC003FE0
007FC007F0001FC0003F0003F0000F80001E0003F0000FC0001C0001F8000FC0001C0001
F80007C000180001F80007E000180000FC000FE000300000FC000FE000300000FE000FF0
007000007E0019F0006000007E0019F0006000007F0019F800E000003F0030F800C00000
3F0030F800C000003F8030FC01C000001F80607C018000001F80607C018000000FC0E07E
030000000FC0C03E030000000FC0C03E0300000007E1C03F0600000007E1801F06000000
07E1801F8600000003F3801F8C00000003F3000F8C00000003F3000FCC00000001FE0007
D800000001FE0007D800000001FE0007F800000000FC0003F000000000FC0003F0000000
00FC0003F000000000780001E000000000780001E000000000780001E000000000300000
C000003C287EA641>I<7FFFC00FFFE07FFFC00FFFE07FFFC00FFFE003FF0007FE0000FF
0003F800007F0003E000003F0003C000003F80038000001FC0070000000FC00E00000007
E00C00000007F01800000003F83800000001F87000000000FCE000000000FEC000000000
7F80000000003F80000000001F80000000000FC0000000000FE0000000001FE000000000
3BF00000000071F800000000E1FC00000000C0FE00000001807E00000003803F00000007
003F8000000E001FC000000C000FC000001C0007E00000380007F00000F80003F80001F8
0003FC000FFC0007FE00FFFF001FFFF8FFFF001FFFF8FFFF001FFFF82D277FA630>I<FF
FFC007FFE0FFFFC007FFE0FFFFC007FFE007FC0001FF0003F800007C0001F80000780001
F80000700001FC0000700000FC0000600000FE00006000007E0000C000007E0000C00000
3F00018000003F00018000003F80038000001F80030000001F80030000000FC006000000
0FC0060000000FE00E00000007E00C00000007E00C00000003F01800000003F018000000
03F83800000001F83000000001FC3000000000FC6000000000FC60000000007EC0000000
007EC0000000007FC0000000003F80000000003F80000000001F00000000001F00000000
001F00000000000E00000000000E00000000000C00000000000C00000000001C00000000
00180000000000180000000000300000000000300000000000600000003800600000007C
00E0000000FE00C0000000FE01C0000000FE0180000000FE03000000007C070000000070
0E00000000383C000000001FF80000000007E0000000002B3A7EA630>I<1FFFFFFF801F
FFFFFF801FE0007F801F00007F001E0000FE001C0001FC001C0003FC00180003F8003800
07F00038000FE00030001FE00030001FC00030003F800030007F000030007F00000000FE
00000001FC00000003FC00000003F800000007F00000000FE00000001FE00000001FC001
80003F800180007F000180007F00018000FE00018001FC00018003FC00038003F8000380
07F00003000FE00003001FE00007001FC0000F003F80000F007F00003F00FF0001FF00FF
FFFFFF00FFFFFFFF0021277EA628>I<001C000000003E000000003F000000003F800000
003FC00000001FE00000000FF000000003F800000000FC000000007E000000001F000000
0007800000000380000000008000000000000000000000000000000000001FF0000000FF
FC000003E03F00000F000FC0001C0007E0001F0003F0003F8001F8003FC000FC003FC000
FC003FC000FC003FC0007E001F80007E000F00007E000000007E000000007E000000007E
000000007E0000001FFE000003FFFE00001FF87E00007F807E0001FC007E0007F0007E00
0FE0007E001FC0007E003F80007E007F80007E007F00007E007F00007E03FE00007E03FE
00007E03FE00007E03FE0000FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80
071F061FC00E1F8E0FF03C0FFC03FFF007F8003FC003E0283B7CB92D>224
D<0001FF0000000FFFE000003F00F800007C001E0001F800070003F0001F0007E0003F80
0FC0007F800FC0007F801F80007F801F80007F803F00003F003F00001E007F000000007F
000000007E00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE000000007F000000007F0000
00007F000000003F000000C03F800000C01F800001C01FC00001800FC000038007E00007
0003F000060001F8001E0000FC003800003F01F000000FFFC0000001FE00000000FC0000
0000FC00000000FC00000000FC00000000FF800000001FE000000007F000000003F80000
0001F800000001F800000001F800000001F800000003F800000007F00000003FE000007F
FF8000007FF00000223B7DA828>231 D<000E000000001F000000001F800000001FC000
00001FE00000000FF000000007F800000001FC000000007E000000003F000000000F8000
000003C000000001C00000000040000000000000000000000000000000000003FC000000
1FFF8000007E07E00000F801F00001F000F80003E0007C0007C0003E000FC0003F001F80
001F001F80001F803F00001F803F00000F807F00000F807F00000FC07E00000FC07E0000
0FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00000000FE00000000FE000000
00FE00000000FE00000000FE000000007E000000007F000000007F000000007F00000000
3F000000C03F800000C01F800001C00FC00001800FC000038007E000070003F0000E0001
F8001C0000FC003800003F01F000000FFFC0000001FE0000223B7DB928>I<00000E0000
00001F000000003F000000007F00000000FF00000001FE00000003FC00000007F0000000
0FC00000001F800000003E00000000780000000070000000004000000000000000000000
00000000000000000003FC0000001FFF8000007E07E00000F801F00001F000F80003E000
7C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F
807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0
FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F
000000007F000000007F000000003F000000C03F800000C01F800001C00FC00001800FC0
00038007E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE
0000223B7DB928>I<00300000780000FC0001FE0003CF000787800703800E01C01C00E0
380070700038E0001CC0000C80000400000000000000000000000000FC003FFC003FFC00
3FFC0003FC0001FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0001FE007FFFF07FFFF0
7FFFF0163A7FB919>238 D<000030000000007800000000FC00000001FE00000003CF00
0000078780000007038000000E01C000001C00E0000038007000007000380000E0001C00
01C0000E0000800004000000000000000000000000000000000001FE0000000FFFC00000
3F03F000007C00F80001F0003E0003E0001F0007C0000F8007C0000F800F800007C01F80
0007E01F000003E03F000003F03F000003F07E000001F87E000001F87E000001F87E0000
01F8FE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001
FCFE000001FCFE000001FC7E000001F87E000001F87E000001F87F000003F83F000003F0
3F000003F01F800007E00F800007C00FC0000FC007C0000F8003E0001F0001F0003E0000
FC00FC00003F03F000000FFFC0000001FE0000263B7DB92D>244
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl eccc1095 10.95 24
/Fl 24 233 df<FFFFFFFFFFFEFFFFFFFFFFFE2F027F9832>21 D<1C007F00FF80FF80FF
C0FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C
001C003800700060000A1B76BE1D>39 D<0000E0000001E0000003E000000FE000003FE0
0007FFE000FFFFE000FFCFE000F80FE000000FE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000001FF000003FF800FFFFFF
FEFFFFFFFEFFFFFFFE1F3D76BC32>49 D<1C007F00FF80FF80FF80FF80FF807F001C0000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000001C007F00FF80FF80FF80FF80FF807F001C00092776A61D>58
D<0000000FFC0000C0000000FFFF8001C0000007FFFFE001C000001FF801F803C000007F
C0003E07C00001FE00000F07C00007FC0000038FC0000FF0000001DFC0001FE0000000FF
C0003FC00000007FC0007F800000003FC000FF000000001FC001FE000000001FC003FC00
0000000FC003FC0000000007C007F80000000007C00FF80000000003C00FF00000000003
C01FF00000000003C01FE00000000001C03FE00000000001C03FE00000000001C03FC000
00000000C07FC00000000000C07FC00000000000C07FC00000000000C07F800000000000
00FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF8000
0000000000FF80000000000000FF80000000000000FF80000000000000FF800000000000
00FF80000000000000FF80000000000000FF800000000000007F800000000000007FC000
00000000007FC00000000000C07FC00000000000C03FC00000000000C03FE00000000000
C03FE00000000000C01FE00000000001C01FF00000000001800FF00000000001800FF800
000000038007F800000000038003FC00000000030003FC00000000070001FE000000000E
0000FF000000000E00007F800000001C00003FC00000003800001FE00000007000000FF0
000000E0000007FC000003C0000001FE000007800000007FC0001F000000001FF801FC00
00000007FFFFF00000000000FFFFC000000000000FFC0000003A427ABF47>67
D<0003FE000600001FFFC00E00007FFFF00E0001FE01FC1E0003F0001F1E0007E0000FBE
000FC00003FE001F800001FE003F000000FE003E0000007E007E0000007E007E0000003E
007C0000001E00FC0000001E00FC0000001E00FC0000000E00FC0000000E00FC0000000E
00FE0000000600FE0000000600FF0000000600FF00000006007F80000000007FC0000000
007FF0000000003FFC000000003FFF800000001FFFFC0000000FFFFFC0000007FFFFFC00
0003FFFFFF000001FFFFFFC000007FFFFFE000001FFFFFF0000003FFFFF80000003FFFFC
00000003FFFE000000001FFE0000000007FF0000000001FF8000000000FF80000000007F
80000000003FC0000000003FC0C00000001FC0C00000001FC0C00000001FC0C00000000F
C0C00000000FC0E00000000FC0E00000000FC0E00000000FC0F00000000F80F00000001F
80F80000001F80F80000001F00FC0000003F00FE0000003E00FF0000007C00FF800000FC
00F9E00001F800F0FC0003F000F07FC01FC000E01FFFFF8000E003FFFE0000C0003FF000
002A427ABF37>83 D<000000C0000000000001E0000000000001E0000000000001E00000
00000003F0000000000003F0000000000007F8000000000007F8000000000007F8000000
00000CFC00000000000CFC00000000001CFE0000000000187E0000000000187E00000000
00303F0000000000303F0000000000703F8000000000601F8000000000601F8000000000
C00FC000000000C00FC000000001C00FE0000000018007E0000000018007E00000000300
03F0000000030003F0000000070003F8000000060001F8000000060001F80000000C0000
FC0000000FFFFFFC0000001FFFFFFE0000001800007E0000001800007E0000003000003F
0000003000003F0000007000003F8000006000001F8000006000001F800000E000000FC0
0000C000000FC00001C000000FE00001C0000007E00003C0000007F00007E0000007F000
1FF000000FF800FFF80000FFFFC0FFF80000FFFFC032307DAF38>97
D<00000FF8003000007FFF00700003F807C070000FC000F0F0001F000039F0007E00001F
F000FC00000FF001F8000007F003F0000003F007E0000001F00FE0000001F00FC0000000
F01F80000000F01F80000000703F80000000703F00000000707F00000000307F00000000
307F0000000030FE0000000000FE0000000000FE0000000000FE0000000000FE00000000
00FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE00000000
007F00000000007F00000000307F00000000303F00000000303F80000000301F80000000
701F80000000600FC0000000600FE0000000E007E0000000C003F0000001C001F8000003
8000FC00000700007E00000E00001F00001C00000FC00078000003F803E00000007FFF80
0000000FFC00002C317BAF36>99 D<FFFFFFF80000FFFFFFFF800007F8001FE00003F000
03F00003F00000FC0003F000007E0003F000001F0003F000000F8003F000000FC003F000
0007E003F0000003E003F0000003F003F0000001F003F0000001F803F0000001F803F000
0001FC03F0000000FC03F0000000FC03F0000000FC03F0000000FE03F0000000FE03F000
0000FE03F0000000FE03F0000000FE03F0000000FE03F0000000FE03F0000000FE03F000
0000FE03F0000000FE03F0000000FC03F0000000FC03F0000000FC03F0000001F803F000
0001F803F0000001F803F0000003F003F0000003E003F0000007E003F0000007C003F000
000F8003F000001F0003F000003E0003F00000FC0003F00003F80007F8001FE000FFFFFF
FF8000FFFFFFFC00002F2F7BAE39>I<FFFFFFFFFE00FFFFFFFFFE0007F80001FE0003F0
00007E0003F000001F0003F000000F0003F00000070003F00000070003F00000030003F0
0000030003F00000030003F00000030003F00000018003F00000018003F00030018003F0
0030018003F00030000003F00030000003F00030000003F00070000003F000F0000003F0
01F0000003FFFFF0000003FFFFF0000003F001F0000003F000F0000003F00070000003F0
0030000003F00030000003F00030006003F00030006003F00030006003F0000000C003F0
000000C003F0000000C003F0000000C003F0000001C003F0000001C003F00000018003F0
0000038003F00000038003F00000078003F000000F8003F000003F8007F80001FF00FFFF
FFFFFF00FFFFFFFFFF002B2F7BAE33>I<00000FF800300000007FFF0070000003F807C0
7000000FC000F0F000001F000039F000007E00001FF00000FC00000FF00001F8000007F0
0003F0000003F00007E0000001F0000FE0000001F0000FC0000000F0001F80000000F000
1F8000000070003F8000000070003F0000000070007F0000000030007F0000000030007F
000000003000FE000000000000FE000000000000FE000000000000FE000000000000FE00
0000000000FE000000000000FE000000000000FE000000000000FE000000000000FE0000
07FFFF80FE000007FFFF807F0000000FF8007F00000007F0007F00000003F0003F000000
03F0003F80000003F0001F80000003F0001F80000003F0000FC0000003F0000FE0000003
F00007E0000003F00003F0000003F00001F8000003F00000FC000007F000007E00000FF0
00001F00001DF000000FC00038F0000003F803F0700000007FFFC0300000000FFC000000
31317BAF3B>103 D<FFFFC0FFFFC007F80003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00007F800
FFFFC0FFFFC0122F7BAE1C>105 D<FFFFF00000FFFFF0000007FC00000003F000000003
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000C03F000000C03F000000C03F000000C
03F000001C03F000001803F000001803F000001803F000003803F000003803F000007803
F000007803F00000F803F00001F803F00007F007F8003FF0FFFFFFFFF0FFFFFFFFF0262F
7BAE2F>108 D<FFF000000007FF80FFF80000000FFF8007F80000000FF00003F8000000
0FE000037C0000001BE000037C0000001BE000033E00000033E000033E00000033E00003
3E00000033E000031F00000063E000031F00000063E000030F800000C3E000030F800000
C3E000030F800000C3E0000307C0000183E0000307C0000183E0000303E0000303E00003
03E0000303E0000303E0000303E0000301F0000603E0000301F0000603E0000300F8000C
03E0000300F8000C03E00003007C001803E00003007C001803E00003007C001803E00003
003E003003E00003003E003003E00003001F006003E00003001F006003E00003001F0060
03E00003000F80C003E00003000F80C003E000030007C18003E000030007C18003E00003
0007C18003E000030003E30003E000030003E30003E000030001F60003E000030001F600
03E000030001F60003E000030000FC0003E000078000FC0003E0000FC000780003E0001F
E000780007F000FFFC007800FFFF80FFFC003000FFFF80392F7AAE45>I<FFF00000FFFC
FFF80000FFFC07F800001FE003FC00000FC003FE00000780037F00000300033F00000300
033F80000300031FC0000300030FC0000300030FE00003000307F00003000303F8000300
0301F80003000301FC0003000300FE00030003007E00030003007F00030003003F800300
03001FC0030003000FC0030003000FE00300030007F00300030003F00300030003F80300
030001FC0300030000FE0300030000FE03000300007F03000300003F83000300001F8300
0300001FC3000300000FE30003000007F30003000007F30003000003FB0003000001FF00
03000000FF0003000000FF00030000007F00030000003F00030000003F00078000001F00
0FC000000F001FE000000700FFFC00000700FFFC000003002E2F7BAE38>I<00001FF800
000000FFFF00000007F00FE000000F8001F000003F0000FC00007C00003E0000F800001F
0001F000000F8003E0000007C007E0000007E00FC0000003F00FC0000003F01F80000001
F81F80000001F83F00000000FC3F00000000FC7F00000000FE7F00000000FE7E00000000
7E7E000000007EFE000000007FFE000000007FFE000000007FFE000000007FFE00000000
7FFE000000007FFE000000007FFE000000007FFE000000007FFE000000007F7F00000000
FE7F00000000FE7F00000000FE3F00000000FC3F80000001FC3F80000001FC1F80000001
F80FC0000003F00FC0000003F007E0000007E003F000000FC001F800001F8000F800001F
00007E00007E00003F0000FC00000FC003F0000007F00FE0000000FFFF000000001FF800
0030317BAF3A>I<FFFFFFF80000FFFFFFFF000007F8001FC00003F00003F00003F00001
F80003F00000FC0003F000007E0003F000007F0003F000003F0003F000003F0003F00000
3F8003F000003F8003F000003F8003F000003F8003F000003F8003F000003F0003F00000
3F0003F000007F0003F000007E0003F00000FC0003F00001F80003F00003F00003F0001F
C00003FFFFFF000003FFFFF8000003F00000000003F00000000003F00000000003F00000
000003F00000000003F00000000003F00000000003F00000000003F00000000003F00000
000003F00000000003F00000000003F00000000003F00000000003F00000000003F00000
000003F00000000003F00000000003F00000000007F800000000FFFFC0000000FFFFC000
0000292F7BAE33>I<00001FF800000000FFFF00000007F00FE000000FC003F000003F00
00FC00007C00003E0000F800001F0001F000000F8003F000000FC007E0000007E00FC000
0003F00FC0000003F01F80000001F81F80000001F83F00000000FC3F00000000FC7F0000
0000FE7F00000000FE7E000000007E7E000000007EFE000000007FFE000000007FFE0000
00007FFE000000007FFE000000007FFE000000007FFE000000007FFE000000007FFE0000
00007FFE000000007F7E000000007E7F00000000FE7F00000000FE3F00000000FC3F0000
0000FC3F80000001FC1F80000001F80FC0000003F00FC003C003F007E00FF007E003E01C
3C07C001F0380C0F8000F8300E1F00007C30073E00003F3007FC00000FF803F0000007FC
0FE0000000FFFF800300001FFBC00300000001C00300000001E00700000001E007000000
01F00F00000001F83E00000000FFFE00000000FFFE000000007FFC000000007FFC000000
003FF8000000001FF00000000007C0303D7BAF3A>I<003FC00C00FFF81C03E03E1C0F00
07BC1E0001FC3C0000FC3800007C7800007C7000003CF000003CF000001CF000001CF000
001CF800000CF800000CFC00000CFE0000007F0000007F8000003FF800003FFF80001FFF
F8000FFFFF0003FFFFC000FFFFE0003FFFF00001FFF800001FFC000003FC000000FE0000
007E0000003F0000001FC000001FC000001FC000000FC000000FE000000FE000000FE000
000EF000001EF000001EF800003CFC000038FF000070F38001E0E1F807C0E07FFF00C007
FC0020317BAF2A>115 D<7FFFFFFFFFF87FFFFFFFFFF87F001FE003F87C000FC000F878
000FC0007870000FC0003860000FC0001860000FC00018E0000FC0001CE0000FC0001CC0
000FC0000CC0000FC0000CC0000FC0000CC0000FC0000CC0000FC0000CC0000FC0000C00
000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000
000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000
000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000
000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000
000FC0000000000FC0000000000FC0000000001FE0000000003FF00000001FFFFFE00000
1FFFFFE0002E2F7CAE36>I<FFFFC000FFFCFFFFC000FFFC07F800001FE003F000000FC0
03F00000078003F00000030003F00000030003F00000030003F00000030003F000000300
03F00000030003F00000030003F00000030003F00000030003F00000030003F000000300
03F00000030003F00000030003F00000030003F00000030003F00000030003F000000300
03F00000030003F00000030003F00000030003F00000030003F00000030003F000000300
03F00000030003F00000030003F00000030003F00000030003F00000030003F000000300
03F00000030003F00000070001F80000060001F80000060000F800000E0000FC00001C00
007C00001800003E00003800001F00007000000F8000E0000007C003C0000001F80F0000
00007FFC000000000FF000002E307BAE38>I<7FFFC0007FFE007FFFC0007FFE0007FF00
003FF00001FF00001FC00000FF00001F0000007F00001E0000007F00001C0000003F8000
380000001FC000700000000FE000600000000FE000E000000007F001C000000003F80180
00000001FC030000000001FC070000000000FE0E00000000007F0C00000000003F180000
0000003FB800000000001FF000000000000FE0000000000007E0000000000007F0000000
000003F8000000000007FC000000000006FC00000000000CFE00000000001C7F00000000
00383F8000000000301F8000000000601FC000000000E00FE000000001C007F000000001
8007F0000000030003F8000000070001FC0000000E0000FE0000000C0000FE0000001C00
007F0000003800003F8000007000001FC00000F000001FC00001F000001FE00007F00000
1FF0001FF800001FFC00FFFC00007FFFC0FFFC00007FFFC0322F7DAE38>120
D<FFFF800001FFF0FFFF800001FFF00FFE0000007F8003FC0000007E0001FC0000007C00
01FE000000780000FE0000007000007F000000E000003F800000C000003F800001C00000
1FC000018000000FE000030000000FE0000700000007F0000E00000003F8000C00000003
F8001C00000001FC003800000000FE003000000000FE0060000000007F00E0000000003F
80C0000000003F8180000000001FC380000000000FE300000000000FE6000000000007FE
000000000003FC000000000001F8000000000001F8000000000001F8000000000001F800
0000000001F8000000000001F8000000000001F8000000000001F8000000000001F80000
00000001F8000000000001F8000000000001F8000000000001F8000000000001F8000000
000001F8000000000001F8000000000001F8000000000003FC00000000007FFFE0000000
007FFFE00000342F7EAE38>I<00700000000000FC0000000000FF0000000000FF800000
0000FFE0000000007FF8000000000FFE0000000001FF80000000001FC00000000003E000
000000006000000000000000000000000000000000000000000000000000000000000000
00FFFFFFFFFE00FFFFFFFFFE0007F80001FE0003F000007E0003F000001F0003F000000F
0003F00000070003F00000070003F00000030003F00000030003F00000030003F0000003
0003F00000018003F00000018003F00030018003F00030018003F00030000003F0003000
0003F00030000003F00070000003F000F0000003F001F0000003FFFFF0000003FFFFF000
0003F001F0000003F000F0000003F00070000003F00030000003F00030000003F0003000
6003F00030006003F00030006003F0000000C003F0000000C003F0000000C003F0000000
C003F0000001C003F0000001C003F00000018003F00000038003F00000038003F0000007
8003F000000F8003F000003F8007F80001FF00FFFFFFFFFF00FFFFFFFFFF002B3F7BBE33
>232 D E
%EndDVIPSBitmapFont
/Fm 213[91 42[{ fa5free2 ReEncodeFont }1 90.9091 /FontAwesome5Free-Solid
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -396
a
SDict begin H.S end
 -136 -396 a -136 -396 a
SDict begin H.R end
 -136 -396 a -136 -396 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-396 a 0 TeXcolorgray -128 -297 a Fm(*)62 b Fl(\025)33
b(C1)g(:)44 b(Syst\350me)34 b(d'exploit)-8 b(a)g(tion)2001
b Fk(A)m(ctivit\351s)31 b(\025)f Fl(nsi)35 b Fj(1)4083
-330 y Fi(e)p -128 -260 4252 4 v Black 0 TeXcolorgray
-128 -180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128
-180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180
a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -180 a -128 -180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -180 a -128 -180 a
SDict begin H.S end
 -128
-180 a -128 -180 a
SDict begin 13.6 H.A end
 -128 -180 a -128 -180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -180
a 91 x Fk(A)-10 b(v)-5 b(an)m(t)32 b(l'a)m(v)m(\350nemen)m(t)j(des)c
(in)m(terfaces)h(graphiques)h(\()p Fl(gui)e Fk(en)h(anglais)g(p)s(our)g
Fh(Gr)-5 b(aphic)g(al)34 b(User)g(Interfac)-5 b(e)7 b
Fk(\))32 b(et)g(de)g(la)f(souris,)-128 24 y(l'utilisateur)d(comm)m
(uniquait)h(a)m(v)m(ec)e(les)f(applications)i(\(et)f(donc)g(aussi)f
(l'OS\))h(par)g(l'in)m(term\351diare)i(d'un)e(simple)g(cla)m(vier)g(et)
-128 137 y(d'une)33 b Fj(in)m(terface)j(en)g(ligne)g(de)g(commande)31
b Fk(\()p Fl(cli)g Fk(en)h(anglais)g(p)s(our)f Fh(Command)h(Line)h
(Interfac)-5 b(e)7 b Fk(\).)32 b(Le)g(but)g(de)g(cette)-128
250 y(activit\351)f(est)g(de)f(d\351couvrir)h(quelques)f(commandes)i
(de)f(base)f(d'un)h(syst\350me)f(de)g(t)m(yp)s(e)h(Lin)m(ux.)-128
381 y
SDict begin H.S end
 -128 381 a -128 381 a
SDict begin 13.6 H.A end
 -128 381 a -128 381 a
SDict begin [/View [/XYZ H.V]/Dest (Exercise.1) cvn /DEST pdfmark end
 -128
381 a 68 x Fg(q)g Ff(A)m(ctivit\351)h(1)2833 b Fk(title=)p
Fl(qcm)p Fk(,origine=)p Fe(\202)-128 467 y
SDict begin H.S end
 -128 467 a
-128 467 a
SDict begin 13.6 H.A end
 -128 467 a -128 467 a
SDict begin [/View [/XYZ H.V]/Dest (Question.1.1) cvn /DEST pdfmark
end
 -128 467 a 0 TeXcolorgray
13 599 a Fk(1.)p 0 TeXcolorgray 61 w(Lancer)24 b(un)g(terminal)h(en)f
(cliquan)m(t)g(sur)g(l'ic\364ne)53 b Fd(A)p 1785 502
172 5 v 1785 632 5 133 v 1953 632 V 1785 634 172 5 v
76 w Fk(dans)23 b(la)h(barre)g(de)g(lancemen)m(t)i(ou)d(en)h(c)m(herc)m
(han)m(t)j("terminal")144 712 y(dans)j(les)g(applications.)-128
753 y
SDict begin H.S end
 -128 753 a -128 753 a
SDict begin 13.6 H.A end
 -128 753 a -128 753 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128
753 a 0 TeXcolorgray 0 TeXcolorgray 144 848 a Fk(Gestion)g(des)g
(dossiers)g(:)h(cr\351er,)g(supprimer,)g(se)f(d\351placer)i(dans)e
(l'arb)s(orescence)144 961 y(T)-8 b(outes)33 b(les)e(commandes)i(que)f
(v)m(ous)g(a)m(v)m(ez)h(l'habitude)h(de)e(r\351aliser)g(dans)g
(l'explorateur)i(de)e(\034c)m(hier)h(de)f(Windo)m(ws)144
1074 y(on)m(t)f(leur)g(\351quiv)-5 b(alen)m(t)31 b(en)g(ligne)g(de)f
(commande)i(:)p 0 TeXcolorgray 268 1218 a Fc(\017)p 0
TeXcolorgray 31 w Fb(pwd)e Fk(\(qui)g(signi\034e)h Fa(p)p
Fh(rint)h Fa(w)p Fh(orking)h Fa(d)p Fh(ir)-5 b(e)g(ctory)42
b Fk(\))30 b(v)m(ous)g(p)s(ermet)h(de)g(conna\356tre)g(le)g(r\351p)s
(ertoire)g(couran)m(t.)344 1331 y(T)-8 b(ap)s(er)31 b
Fb(pwd)f Fk(dans)g(l'in)m(vite)i(de)e(commande)i(de)f(W)-8
b(ebminal)31 b(et)g(noter)g(ci-dessous)f(le)h(r\351sultat)g(obten)m(u)h
(:)352 1444 y(.)15 b(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)
g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)
g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)
g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)p 0 TeXcolorgray
268 1588 a Fc(\017)p 0 TeXcolorgray 31 w Fb(mkdir)30
b Fk(\(qui)g(signi\034e)h(\()p Fa(m)p Fh(a)p Fa(k)p Fh(e)i
Fa(dir)p Fh(e)-5 b(ctory)8 b Fk(\))32 b(p)s(ermet)e(de)h(cr\351er)g(un)
g(dossier.)344 1701 y(T)-8 b(ap)s(er)28 b(par)f(exemple)h
Fb(mkdir)47 b(ViveLinux)27 b Fk(dans)g(l'in)m(vite)h(de)g(commande)h
(de)e(W)-8 b(ebminal,)29 b(on)e(vien)m(t)h(donc)g(de)344
1814 y(cr\351er)j(un)f(dossier)h("Viv)m(eLin)m(ux")h(dans)e(notre)h
(r\351p)s(ertoire)p 0 TeXcolorgray 268 1958 a Fc(\017)p
0 TeXcolorgray 31 w Fb(cd)f Fk(\(qui)g(signi\034e)h(\()p
Fa(c)p Fh(hange)i Fa(d)p Fh(ir)-5 b(e)g(ctory)8 b Fk(\))32
b(p)s(ermet)f(de)g(se)f(d\351placer)h(v)m(ers)f(un)h(autre)g(dossier)
344 2071 y(T)-8 b(ap)s(er)38 b Fb(cd)47 b(ViveLinux)38
b Fk(dans)g(W)-8 b(ebminal,)39 b(nous)f(v)m(enons)h(de)f(nous)g
(d\351placer)h(dans)f(le)g(r\351p)s(ertoire)h("Viv)m(e-)344
2184 y(Lin)m(ux")33 b(cr\351er)h(ci-dessus.)e(Nous)g(p)s(ouv)m(ons)h
(le)f(v)m(\351ri\034er)i(en)f(a\036c)m(han)m(t)i(de)d(nouv)m(eau)i(le)f
(r\351p)s(ertoire)g(couran)m(t)h(\340)344 2297 y(l'aide)d(de)f(la)h
(commande)h Fb(pwd)p Fk(,)e(faites-le)g(et)h(noter)g(de)f(nouv)m(eau)i
(le)e(r\351sultat)h(obten)m(u)h(:)352 2410 y(.)15 b(.)f(.)h(.)g(.)g(.)f
(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)f
(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)
f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)g(.)
f(.)344 2523 y Fe(*)57 b Fk(Lorsqu'on)34 b(utilise)f(la)g(commande)h
Fb(cd)p Fk(,)e(on)h(p)s(eut)g(donner)h(le)e(dossier)h(de)g(destination)
h(de)f(deux)f(fa\347ons)344 2635 y(di\033\351ren)m(tes)f(:)-128
2651 y
SDict begin H.S end
 -128 2651 a -128 2651 a
SDict begin 13.6 H.A end
 -128 2651 a -128 2651
a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 2651 a 0 TeXcolorgray 413 2780 a Fk(1.)p 0 TeXcolorgray
31 w(le)38 b(c)m(hemin)i Fh(absolu)p Fk(,)f(c'est)f(\340)h(dire)f(la)h
(liste)f(des)g(dossiers)g(\340)g(tra)m(v)m(erser)i(depuis)f(la)f
(racine)h(du)g(syst\350me)514 2893 y(de)k(\034c)m(hier)i(qui)e(est)g
Fb(/)p Fk(.)g(Un)g(c)m(hemin)i(absolu)f(commence)h(donc)f(toujours)f
(par)h(le)f(caract\350re)i Fb(/)p Fk(.)e(P)m(ar)514 3005
y(exemple)27 b(p)s(our)f(l'utilisateur)i("Alfred",)f(le)g(c)m(hemin)h
(absolu)e(du)h(dossier)g("Viv)m(eLunix")g(cr\351e)g(ci-dessous)514
3118 y(est)j Fb(/home/Alfred/ViveLinux)p Fk(.)-128 3142
y
SDict begin H.S end
 -128 3142 a -128 3142 a
SDict begin 13.6 H.A end
 -128 3142 a -128 3142 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128
3142 a 0 TeXcolorgray 413 3263 a Fk(2.)p 0 TeXcolorgray
31 w(le)f(c)m(hemin)i Fh(r)-5 b(elatif)p Fk(,)30 b(c'est)g(\340)f(dire)
h(la)g(liste)g(des)f(dossiers)g(\340)h(tra)m(v)m(erser)h(depuis)f(le)f
(r\351p)s(ertoire)i(couran)m(t,)g(on)514 3376 y(utilise)g(alors)g(les)f
(caract\350res)i Fb(..)e Fk(p)s(our)h(indiquer)h(qu'on)f(d\351sire)g
(remon)m(ter)h(au)f(r\351p)s(ertoire)h(paren)m(t.)g(P)m(ar)514
3488 y(exemple)38 b(\340)g(partir)h(du)f(r\351p)s(ertoire)h
Fb(ViveLinux)p Fk(,)f(il)g(su\036t)g(de)g(tap)s(er)g
Fb(cd)47 b(..)38 b Fk(p)s(our)g(se)f(placer)i(dans)f(le)514
3601 y(r\351p)s(ertoire)31 b Fb(/home/Alfred)p Fk(.)p
0 TeXcolorgray 268 3746 a Fc(\017)p 0 TeXcolorgray 31
w Fb(rmdir)f Fk(\(qui)g(signi\034e)h Fa(r)p Fh(e)p Fa(m)p
Fh(ove)j Fa(dir)p Fh(e)-5 b(ctory)41 b Fk(\))31 b(p)s(our)f(supprimer)h
(un)g(dossier.)p 0 TeXcolorgray 268 3890 a Fc(\017)p
0 TeXcolorgray 31 w Fb(mv)f Fk(\(qui)g(signi\034e)h Fa(m)p
Fh(o)p Fa(v)p Fh(e)7 b Fk(\))31 b(p)s(our)f(d\351placer)i(ou)e
(renommer)i(un)f(dossier.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
